"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-beautiful-dnd";
exports.ids = ["vendor-chunks/react-beautiful-dnd"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DragDropContext: () => (/* binding */ DragDropContext),\n/* harmony export */   Draggable: () => (/* binding */ PublicDraggable),\n/* harmony export */   Droppable: () => (/* binding */ ConnectedDroppable),\n/* harmony export */   resetServerContext: () => (/* binding */ resetServerContext),\n/* harmony export */   useKeyboardSensor: () => (/* binding */ useKeyboardSensor),\n/* harmony export */   useMouseSensor: () => (/* binding */ useMouseSensor),\n/* harmony export */   useTouchSensor: () => (/* binding */ useTouchSensor)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! redux */ \"(ssr)/./node_modules/redux/es/redux.js\");\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-redux */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/index.js\");\n/* harmony import */ var use_memo_one__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! use-memo-one */ \"(ssr)/./node_modules/use-memo-one/dist/use-memo-one.esm.js\");\n/* harmony import */ var css_box_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! css-box-model */ \"(ssr)/./node_modules/css-box-model/dist/css-box-model.esm.js\");\n/* harmony import */ var memoize_one__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\");\n/* harmony import */ var raf_schd__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! raf-schd */ \"(ssr)/./node_modules/raf-schd/dist/raf-schd.esm.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\n\n\n\nvar isProduction = \"development\" === \"production\";\nvar spacesAndTabs = /[ \\t]{2,}/g;\nvar lineStartWithSpaces = /^[ \\t]*/gm;\nvar clean = function clean(value) {\n    return value.replace(spacesAndTabs, \" \").replace(lineStartWithSpaces, \"\").trim();\n};\nvar getDevMessage = function getDevMessage(message) {\n    return clean(\"\\n  %creact-beautiful-dnd\\n\\n  %c\" + clean(message) + \"\\n\\n  %c\\uD83D\\uDC77‚Äç This is a development only message. It will be removed in production builds.\\n\");\n};\nvar getFormattedMessage = function getFormattedMessage(message) {\n    return [\n        getDevMessage(message),\n        \"color: #00C584; font-size: 1.2em; font-weight: bold;\",\n        \"line-height: 1.5\",\n        \"color: #723874;\"\n    ];\n};\nvar isDisabledFlag = \"__react-beautiful-dnd-disable-dev-warnings\";\nfunction log(type, message) {\n    var _console;\n    if (isProduction) {\n        return;\n    }\n    if (false) {}\n    (_console = console)[type].apply(_console, getFormattedMessage(message));\n}\nvar warning = log.bind(null, \"warn\");\nvar error = log.bind(null, \"error\");\nfunction noop() {}\nfunction getOptions(shared, fromBinding) {\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, shared, {}, fromBinding);\n}\nfunction bindEvents(el, bindings, sharedOptions) {\n    var unbindings = bindings.map(function(binding) {\n        var options = getOptions(sharedOptions, binding.options);\n        el.addEventListener(binding.eventName, binding.fn, options);\n        return function unbind() {\n            el.removeEventListener(binding.eventName, binding.fn, options);\n        };\n    });\n    return function unbindAll() {\n        unbindings.forEach(function(unbind) {\n            unbind();\n        });\n    };\n}\nvar isProduction$1 = \"development\" === \"production\";\nvar prefix = \"Invariant failed\";\nfunction RbdInvariant(message) {\n    this.message = message;\n}\nRbdInvariant.prototype.toString = function toString() {\n    return this.message;\n};\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction$1) {\n        throw new RbdInvariant(prefix);\n    } else {\n        throw new RbdInvariant(prefix + \": \" + (message || \"\"));\n    }\n}\nvar ErrorBoundary = function(_React$Component) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(ErrorBoundary, _React$Component);\n    function ErrorBoundary() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args)) || this;\n        _this.callbacks = null;\n        _this.unbind = noop;\n        _this.onWindowError = function(event) {\n            var callbacks = _this.getCallbacks();\n            if (callbacks.isDragging()) {\n                callbacks.tryAbort();\n                 true ? warning(\"\\n        An error was caught by our window 'error' event listener while a drag was occurring.\\n        The active drag has been aborted.\\n      \") : 0;\n            }\n            var err = event.error;\n            if (err instanceof RbdInvariant) {\n                event.preventDefault();\n                if (true) {\n                    error(err.message);\n                }\n            }\n        };\n        _this.getCallbacks = function() {\n            if (!_this.callbacks) {\n                throw new Error(\"Unable to find AppCallbacks in <ErrorBoundary/>\");\n            }\n            return _this.callbacks;\n        };\n        _this.setCallbacks = function(callbacks) {\n            _this.callbacks = callbacks;\n        };\n        return _this;\n    }\n    var _proto = ErrorBoundary.prototype;\n    _proto.componentDidMount = function componentDidMount() {\n        this.unbind = bindEvents(window, [\n            {\n                eventName: \"error\",\n                fn: this.onWindowError\n            }\n        ]);\n    };\n    _proto.componentDidCatch = function componentDidCatch(err) {\n        if (err instanceof RbdInvariant) {\n            if (true) {\n                error(err.message);\n            }\n            this.setState({});\n            return;\n        }\n        throw err;\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        this.unbind();\n    };\n    _proto.render = function render() {\n        return this.props.children(this.setCallbacks);\n    };\n    return ErrorBoundary;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().Component));\nvar dragHandleUsageInstructions = \"\\n  Press space bar to start a drag.\\n  When dragging you can use the arrow keys to move the item around and escape to cancel.\\n  Some screen readers may require you to be in focus mode or to use your pass through key\\n\";\nvar position = function position(index) {\n    return index + 1;\n};\nvar onDragStart = function onDragStart(start) {\n    return \"\\n  You have lifted an item in position \" + position(start.source.index) + \"\\n\";\n};\nvar withLocation = function withLocation(source, destination) {\n    var isInHomeList = source.droppableId === destination.droppableId;\n    var startPosition = position(source.index);\n    var endPosition = position(destination.index);\n    if (isInHomeList) {\n        return \"\\n      You have moved the item from position \" + startPosition + \"\\n      to position \" + endPosition + \"\\n    \";\n    }\n    return \"\\n    You have moved the item from position \" + startPosition + \"\\n    in list \" + source.droppableId + \"\\n    to list \" + destination.droppableId + \"\\n    in position \" + endPosition + \"\\n  \";\n};\nvar withCombine = function withCombine(id, source, combine) {\n    var inHomeList = source.droppableId === combine.droppableId;\n    if (inHomeList) {\n        return \"\\n      The item \" + id + \"\\n      has been combined with \" + combine.draggableId;\n    }\n    return \"\\n      The item \" + id + \"\\n      in list \" + source.droppableId + \"\\n      has been combined with \" + combine.draggableId + \"\\n      in list \" + combine.droppableId + \"\\n    \";\n};\nvar onDragUpdate = function onDragUpdate(update) {\n    var location = update.destination;\n    if (location) {\n        return withLocation(update.source, location);\n    }\n    var combine = update.combine;\n    if (combine) {\n        return withCombine(update.draggableId, update.source, combine);\n    }\n    return \"You are over an area that cannot be dropped on\";\n};\nvar returnedToStart = function returnedToStart(source) {\n    return \"\\n  The item has returned to its starting position\\n  of \" + position(source.index) + \"\\n\";\n};\nvar onDragEnd = function onDragEnd(result) {\n    if (result.reason === \"CANCEL\") {\n        return \"\\n      Movement cancelled.\\n      \" + returnedToStart(result.source) + \"\\n    \";\n    }\n    var location = result.destination;\n    var combine = result.combine;\n    if (location) {\n        return \"\\n      You have dropped the item.\\n      \" + withLocation(result.source, location) + \"\\n    \";\n    }\n    if (combine) {\n        return \"\\n      You have dropped the item.\\n      \" + withCombine(result.draggableId, result.source, combine) + \"\\n    \";\n    }\n    return \"\\n    The item has been dropped while not over a drop area.\\n    \" + returnedToStart(result.source) + \"\\n  \";\n};\nvar preset = {\n    dragHandleUsageInstructions: dragHandleUsageInstructions,\n    onDragStart: onDragStart,\n    onDragUpdate: onDragUpdate,\n    onDragEnd: onDragEnd\n};\nvar origin = {\n    x: 0,\n    y: 0\n};\nvar add = function add(point1, point2) {\n    return {\n        x: point1.x + point2.x,\n        y: point1.y + point2.y\n    };\n};\nvar subtract = function subtract(point1, point2) {\n    return {\n        x: point1.x - point2.x,\n        y: point1.y - point2.y\n    };\n};\nvar isEqual = function isEqual(point1, point2) {\n    return point1.x === point2.x && point1.y === point2.y;\n};\nvar negate = function negate(point) {\n    return {\n        x: point.x !== 0 ? -point.x : 0,\n        y: point.y !== 0 ? -point.y : 0\n    };\n};\nvar patch = function patch(line, value, otherValue) {\n    var _ref;\n    if (otherValue === void 0) {\n        otherValue = 0;\n    }\n    return _ref = {}, _ref[line] = value, _ref[line === \"x\" ? \"y\" : \"x\"] = otherValue, _ref;\n};\nvar distance = function distance(point1, point2) {\n    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\n};\nvar closest = function closest(target, points) {\n    return Math.min.apply(Math, points.map(function(point) {\n        return distance(target, point);\n    }));\n};\nvar apply = function apply(fn) {\n    return function(point) {\n        return {\n            x: fn(point.x),\n            y: fn(point.y)\n        };\n    };\n};\nvar executeClip = function(frame, subject) {\n    var result = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getRect)({\n        top: Math.max(subject.top, frame.top),\n        right: Math.min(subject.right, frame.right),\n        bottom: Math.min(subject.bottom, frame.bottom),\n        left: Math.max(subject.left, frame.left)\n    });\n    if (result.width <= 0 || result.height <= 0) {\n        return null;\n    }\n    return result;\n};\nvar offsetByPosition = function offsetByPosition(spacing, point) {\n    return {\n        top: spacing.top + point.y,\n        left: spacing.left + point.x,\n        bottom: spacing.bottom + point.y,\n        right: spacing.right + point.x\n    };\n};\nvar getCorners = function getCorners(spacing) {\n    return [\n        {\n            x: spacing.left,\n            y: spacing.top\n        },\n        {\n            x: spacing.right,\n            y: spacing.top\n        },\n        {\n            x: spacing.left,\n            y: spacing.bottom\n        },\n        {\n            x: spacing.right,\n            y: spacing.bottom\n        }\n    ];\n};\nvar noSpacing = {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n};\nvar scroll = function scroll(target, frame) {\n    if (!frame) {\n        return target;\n    }\n    return offsetByPosition(target, frame.scroll.diff.displacement);\n};\nvar increase = function increase(target, axis, withPlaceholder) {\n    if (withPlaceholder && withPlaceholder.increasedBy) {\n        var _extends2;\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, target, (_extends2 = {}, _extends2[axis.end] = target[axis.end] + withPlaceholder.increasedBy[axis.line], _extends2));\n    }\n    return target;\n};\nvar clip = function clip(target, frame) {\n    if (frame && frame.shouldClipSubject) {\n        return executeClip(frame.pageMarginBox, target);\n    }\n    return (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getRect)(target);\n};\nvar getSubject = function(_ref) {\n    var page = _ref.page, withPlaceholder = _ref.withPlaceholder, axis = _ref.axis, frame = _ref.frame;\n    var scrolled = scroll(page.marginBox, frame);\n    var increased = increase(scrolled, axis, withPlaceholder);\n    var clipped = clip(increased, frame);\n    return {\n        page: page,\n        withPlaceholder: withPlaceholder,\n        active: clipped\n    };\n};\nvar scrollDroppable = function(droppable, newScroll) {\n    !droppable.frame ?  true ? invariant(false) : 0 : void 0;\n    var scrollable = droppable.frame;\n    var scrollDiff = subtract(newScroll, scrollable.scroll.initial);\n    var scrollDisplacement = negate(scrollDiff);\n    var frame = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, scrollable, {\n        scroll: {\n            initial: scrollable.scroll.initial,\n            current: newScroll,\n            diff: {\n                value: scrollDiff,\n                displacement: scrollDisplacement\n            },\n            max: scrollable.scroll.max\n        }\n    });\n    var subject = getSubject({\n        page: droppable.subject.page,\n        withPlaceholder: droppable.subject.withPlaceholder,\n        axis: droppable.axis,\n        frame: frame\n    });\n    var result = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, droppable, {\n        frame: frame,\n        subject: subject\n    });\n    return result;\n};\nfunction isInteger(value) {\n    if (Number.isInteger) {\n        return Number.isInteger(value);\n    }\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n}\nfunction values(map) {\n    if (Object.values) {\n        return Object.values(map);\n    }\n    return Object.keys(map).map(function(key) {\n        return map[key];\n    });\n}\nfunction findIndex(list, predicate) {\n    if (list.findIndex) {\n        return list.findIndex(predicate);\n    }\n    for(var i = 0; i < list.length; i++){\n        if (predicate(list[i])) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction find(list, predicate) {\n    if (list.find) {\n        return list.find(predicate);\n    }\n    var index = findIndex(list, predicate);\n    if (index !== -1) {\n        return list[index];\n    }\n    return undefined;\n}\nfunction toArray(list) {\n    return Array.prototype.slice.call(list);\n}\nvar toDroppableMap = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(droppables) {\n    return droppables.reduce(function(previous, current) {\n        previous[current.descriptor.id] = current;\n        return previous;\n    }, {});\n});\nvar toDraggableMap = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(draggables) {\n    return draggables.reduce(function(previous, current) {\n        previous[current.descriptor.id] = current;\n        return previous;\n    }, {});\n});\nvar toDroppableList = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(droppables) {\n    return values(droppables);\n});\nvar toDraggableList = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(draggables) {\n    return values(draggables);\n});\nvar getDraggablesInsideDroppable = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(droppableId, draggables) {\n    var result = toDraggableList(draggables).filter(function(draggable) {\n        return droppableId === draggable.descriptor.droppableId;\n    }).sort(function(a, b) {\n        return a.descriptor.index - b.descriptor.index;\n    });\n    return result;\n});\nfunction tryGetDestination(impact) {\n    if (impact.at && impact.at.type === \"REORDER\") {\n        return impact.at.destination;\n    }\n    return null;\n}\nfunction tryGetCombine(impact) {\n    if (impact.at && impact.at.type === \"COMBINE\") {\n        return impact.at.combine;\n    }\n    return null;\n}\nvar removeDraggableFromList = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(remove, list) {\n    return list.filter(function(item) {\n        return item.descriptor.id !== remove.descriptor.id;\n    });\n});\nvar moveToNextCombine = function(_ref) {\n    var isMovingForward = _ref.isMovingForward, draggable = _ref.draggable, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact;\n    if (!destination.isCombineEnabled) {\n        return null;\n    }\n    var location = tryGetDestination(previousImpact);\n    if (!location) {\n        return null;\n    }\n    function getImpact(target) {\n        var at = {\n            type: \"COMBINE\",\n            combine: {\n                draggableId: target,\n                droppableId: destination.descriptor.id\n            }\n        };\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, previousImpact, {\n            at: at\n        });\n    }\n    var all = previousImpact.displaced.all;\n    var closestId = all.length ? all[0] : null;\n    if (isMovingForward) {\n        return closestId ? getImpact(closestId) : null;\n    }\n    var withoutDraggable = removeDraggableFromList(draggable, insideDestination);\n    if (!closestId) {\n        if (!withoutDraggable.length) {\n            return null;\n        }\n        var last = withoutDraggable[withoutDraggable.length - 1];\n        return getImpact(last.descriptor.id);\n    }\n    var indexOfClosest = findIndex(withoutDraggable, function(d) {\n        return d.descriptor.id === closestId;\n    });\n    !(indexOfClosest !== -1) ?  true ? invariant(false, \"Could not find displaced item in set\") : 0 : void 0;\n    var proposedIndex = indexOfClosest - 1;\n    if (proposedIndex < 0) {\n        return null;\n    }\n    var before = withoutDraggable[proposedIndex];\n    return getImpact(before.descriptor.id);\n};\nvar isHomeOf = function(draggable, destination) {\n    return draggable.descriptor.droppableId === destination.descriptor.id;\n};\nvar noDisplacedBy = {\n    point: origin,\n    value: 0\n};\nvar emptyGroups = {\n    invisible: {},\n    visible: {},\n    all: []\n};\nvar noImpact = {\n    displaced: emptyGroups,\n    displacedBy: noDisplacedBy,\n    at: null\n};\nvar isWithin = function(lowerBound, upperBound) {\n    return function(value) {\n        return lowerBound <= value && value <= upperBound;\n    };\n};\nvar isPartiallyVisibleThroughFrame = function(frame) {\n    var isWithinVertical = isWithin(frame.top, frame.bottom);\n    var isWithinHorizontal = isWithin(frame.left, frame.right);\n    return function(subject) {\n        var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);\n        if (isContained) {\n            return true;\n        }\n        var isPartiallyVisibleVertically = isWithinVertical(subject.top) || isWithinVertical(subject.bottom);\n        var isPartiallyVisibleHorizontally = isWithinHorizontal(subject.left) || isWithinHorizontal(subject.right);\n        var isPartiallyContained = isPartiallyVisibleVertically && isPartiallyVisibleHorizontally;\n        if (isPartiallyContained) {\n            return true;\n        }\n        var isBiggerVertically = subject.top < frame.top && subject.bottom > frame.bottom;\n        var isBiggerHorizontally = subject.left < frame.left && subject.right > frame.right;\n        var isTargetBiggerThanFrame = isBiggerVertically && isBiggerHorizontally;\n        if (isTargetBiggerThanFrame) {\n            return true;\n        }\n        var isTargetBiggerOnOneAxis = isBiggerVertically && isPartiallyVisibleHorizontally || isBiggerHorizontally && isPartiallyVisibleVertically;\n        return isTargetBiggerOnOneAxis;\n    };\n};\nvar isTotallyVisibleThroughFrame = function(frame) {\n    var isWithinVertical = isWithin(frame.top, frame.bottom);\n    var isWithinHorizontal = isWithin(frame.left, frame.right);\n    return function(subject) {\n        var isContained = isWithinVertical(subject.top) && isWithinVertical(subject.bottom) && isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);\n        return isContained;\n    };\n};\nvar vertical = {\n    direction: \"vertical\",\n    line: \"y\",\n    crossAxisLine: \"x\",\n    start: \"top\",\n    end: \"bottom\",\n    size: \"height\",\n    crossAxisStart: \"left\",\n    crossAxisEnd: \"right\",\n    crossAxisSize: \"width\"\n};\nvar horizontal = {\n    direction: \"horizontal\",\n    line: \"x\",\n    crossAxisLine: \"y\",\n    start: \"left\",\n    end: \"right\",\n    size: \"width\",\n    crossAxisStart: \"top\",\n    crossAxisEnd: \"bottom\",\n    crossAxisSize: \"height\"\n};\nvar isTotallyVisibleThroughFrameOnAxis = function(axis) {\n    return function(frame) {\n        var isWithinVertical = isWithin(frame.top, frame.bottom);\n        var isWithinHorizontal = isWithin(frame.left, frame.right);\n        return function(subject) {\n            if (axis === vertical) {\n                return isWithinVertical(subject.top) && isWithinVertical(subject.bottom);\n            }\n            return isWithinHorizontal(subject.left) && isWithinHorizontal(subject.right);\n        };\n    };\n};\nvar getDroppableDisplaced = function getDroppableDisplaced(target, destination) {\n    var displacement = destination.frame ? destination.frame.scroll.diff.displacement : origin;\n    return offsetByPosition(target, displacement);\n};\nvar isVisibleInDroppable = function isVisibleInDroppable(target, destination, isVisibleThroughFrameFn) {\n    if (!destination.subject.active) {\n        return false;\n    }\n    return isVisibleThroughFrameFn(destination.subject.active)(target);\n};\nvar isVisibleInViewport = function isVisibleInViewport(target, viewport, isVisibleThroughFrameFn) {\n    return isVisibleThroughFrameFn(viewport)(target);\n};\nvar isVisible = function isVisible(_ref) {\n    var toBeDisplaced = _ref.target, destination = _ref.destination, viewport = _ref.viewport, withDroppableDisplacement = _ref.withDroppableDisplacement, isVisibleThroughFrameFn = _ref.isVisibleThroughFrameFn;\n    var displacedTarget = withDroppableDisplacement ? getDroppableDisplaced(toBeDisplaced, destination) : toBeDisplaced;\n    return isVisibleInDroppable(displacedTarget, destination, isVisibleThroughFrameFn) && isVisibleInViewport(displacedTarget, viewport, isVisibleThroughFrameFn);\n};\nvar isPartiallyVisible = function isPartiallyVisible(args) {\n    return isVisible((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, args, {\n        isVisibleThroughFrameFn: isPartiallyVisibleThroughFrame\n    }));\n};\nvar isTotallyVisible = function isTotallyVisible(args) {\n    return isVisible((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, args, {\n        isVisibleThroughFrameFn: isTotallyVisibleThroughFrame\n    }));\n};\nvar isTotallyVisibleOnAxis = function isTotallyVisibleOnAxis(args) {\n    return isVisible((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, args, {\n        isVisibleThroughFrameFn: isTotallyVisibleThroughFrameOnAxis(args.destination.axis)\n    }));\n};\nvar getShouldAnimate = function getShouldAnimate(id, last, forceShouldAnimate) {\n    if (typeof forceShouldAnimate === \"boolean\") {\n        return forceShouldAnimate;\n    }\n    if (!last) {\n        return true;\n    }\n    var invisible = last.invisible, visible = last.visible;\n    if (invisible[id]) {\n        return false;\n    }\n    var previous = visible[id];\n    return previous ? previous.shouldAnimate : true;\n};\nfunction getTarget(draggable, displacedBy) {\n    var marginBox = draggable.page.marginBox;\n    var expandBy = {\n        top: displacedBy.point.y,\n        right: 0,\n        bottom: 0,\n        left: displacedBy.point.x\n    };\n    return (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getRect)((0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.expand)(marginBox, expandBy));\n}\nfunction getDisplacementGroups(_ref) {\n    var afterDragging = _ref.afterDragging, destination = _ref.destination, displacedBy = _ref.displacedBy, viewport = _ref.viewport, forceShouldAnimate = _ref.forceShouldAnimate, last = _ref.last;\n    return afterDragging.reduce(function process(groups, draggable) {\n        var target = getTarget(draggable, displacedBy);\n        var id = draggable.descriptor.id;\n        groups.all.push(id);\n        var isVisible = isPartiallyVisible({\n            target: target,\n            destination: destination,\n            viewport: viewport,\n            withDroppableDisplacement: true\n        });\n        if (!isVisible) {\n            groups.invisible[draggable.descriptor.id] = true;\n            return groups;\n        }\n        var shouldAnimate = getShouldAnimate(id, last, forceShouldAnimate);\n        var displacement = {\n            draggableId: id,\n            shouldAnimate: shouldAnimate\n        };\n        groups.visible[id] = displacement;\n        return groups;\n    }, {\n        all: [],\n        visible: {},\n        invisible: {}\n    });\n}\nfunction getIndexOfLastItem(draggables, options) {\n    if (!draggables.length) {\n        return 0;\n    }\n    var indexOfLastItem = draggables[draggables.length - 1].descriptor.index;\n    return options.inHomeList ? indexOfLastItem : indexOfLastItem + 1;\n}\nfunction goAtEnd(_ref) {\n    var insideDestination = _ref.insideDestination, inHomeList = _ref.inHomeList, displacedBy = _ref.displacedBy, destination = _ref.destination;\n    var newIndex = getIndexOfLastItem(insideDestination, {\n        inHomeList: inHomeList\n    });\n    return {\n        displaced: emptyGroups,\n        displacedBy: displacedBy,\n        at: {\n            type: \"REORDER\",\n            destination: {\n                droppableId: destination.descriptor.id,\n                index: newIndex\n            }\n        }\n    };\n}\nfunction calculateReorderImpact(_ref2) {\n    var draggable = _ref2.draggable, insideDestination = _ref2.insideDestination, destination = _ref2.destination, viewport = _ref2.viewport, displacedBy = _ref2.displacedBy, last = _ref2.last, index = _ref2.index, forceShouldAnimate = _ref2.forceShouldAnimate;\n    var inHomeList = isHomeOf(draggable, destination);\n    if (index == null) {\n        return goAtEnd({\n            insideDestination: insideDestination,\n            inHomeList: inHomeList,\n            displacedBy: displacedBy,\n            destination: destination\n        });\n    }\n    var match = find(insideDestination, function(item) {\n        return item.descriptor.index === index;\n    });\n    if (!match) {\n        return goAtEnd({\n            insideDestination: insideDestination,\n            inHomeList: inHomeList,\n            displacedBy: displacedBy,\n            destination: destination\n        });\n    }\n    var withoutDragging = removeDraggableFromList(draggable, insideDestination);\n    var sliceFrom = insideDestination.indexOf(match);\n    var impacted = withoutDragging.slice(sliceFrom);\n    var displaced = getDisplacementGroups({\n        afterDragging: impacted,\n        destination: destination,\n        displacedBy: displacedBy,\n        last: last,\n        viewport: viewport.frame,\n        forceShouldAnimate: forceShouldAnimate\n    });\n    return {\n        displaced: displaced,\n        displacedBy: displacedBy,\n        at: {\n            type: \"REORDER\",\n            destination: {\n                droppableId: destination.descriptor.id,\n                index: index\n            }\n        }\n    };\n}\nfunction didStartAfterCritical(draggableId, afterCritical) {\n    return Boolean(afterCritical.effected[draggableId]);\n}\nvar fromCombine = function(_ref) {\n    var isMovingForward = _ref.isMovingForward, destination = _ref.destination, draggables = _ref.draggables, combine = _ref.combine, afterCritical = _ref.afterCritical;\n    if (!destination.isCombineEnabled) {\n        return null;\n    }\n    var combineId = combine.draggableId;\n    var combineWith = draggables[combineId];\n    var combineWithIndex = combineWith.descriptor.index;\n    var didCombineWithStartAfterCritical = didStartAfterCritical(combineId, afterCritical);\n    if (didCombineWithStartAfterCritical) {\n        if (isMovingForward) {\n            return combineWithIndex;\n        }\n        return combineWithIndex - 1;\n    }\n    if (isMovingForward) {\n        return combineWithIndex + 1;\n    }\n    return combineWithIndex;\n};\nvar fromReorder = function(_ref) {\n    var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, insideDestination = _ref.insideDestination, location = _ref.location;\n    if (!insideDestination.length) {\n        return null;\n    }\n    var currentIndex = location.index;\n    var proposedIndex = isMovingForward ? currentIndex + 1 : currentIndex - 1;\n    var firstIndex = insideDestination[0].descriptor.index;\n    var lastIndex = insideDestination[insideDestination.length - 1].descriptor.index;\n    var upperBound = isInHomeList ? lastIndex : lastIndex + 1;\n    if (proposedIndex < firstIndex) {\n        return null;\n    }\n    if (proposedIndex > upperBound) {\n        return null;\n    }\n    return proposedIndex;\n};\nvar moveToNextIndex = function(_ref) {\n    var isMovingForward = _ref.isMovingForward, isInHomeList = _ref.isInHomeList, draggable = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, insideDestination = _ref.insideDestination, previousImpact = _ref.previousImpact, viewport = _ref.viewport, afterCritical = _ref.afterCritical;\n    var wasAt = previousImpact.at;\n    !wasAt ?  true ? invariant(false, \"Cannot move in direction without previous impact location\") : 0 : void 0;\n    if (wasAt.type === \"REORDER\") {\n        var _newIndex = fromReorder({\n            isMovingForward: isMovingForward,\n            isInHomeList: isInHomeList,\n            location: wasAt.destination,\n            insideDestination: insideDestination\n        });\n        if (_newIndex == null) {\n            return null;\n        }\n        return calculateReorderImpact({\n            draggable: draggable,\n            insideDestination: insideDestination,\n            destination: destination,\n            viewport: viewport,\n            last: previousImpact.displaced,\n            displacedBy: previousImpact.displacedBy,\n            index: _newIndex\n        });\n    }\n    var newIndex = fromCombine({\n        isMovingForward: isMovingForward,\n        destination: destination,\n        displaced: previousImpact.displaced,\n        draggables: draggables,\n        combine: wasAt.combine,\n        afterCritical: afterCritical\n    });\n    if (newIndex == null) {\n        return null;\n    }\n    return calculateReorderImpact({\n        draggable: draggable,\n        insideDestination: insideDestination,\n        destination: destination,\n        viewport: viewport,\n        last: previousImpact.displaced,\n        displacedBy: previousImpact.displacedBy,\n        index: newIndex\n    });\n};\nvar getCombinedItemDisplacement = function(_ref) {\n    var displaced = _ref.displaced, afterCritical = _ref.afterCritical, combineWith = _ref.combineWith, displacedBy = _ref.displacedBy;\n    var isDisplaced = Boolean(displaced.visible[combineWith] || displaced.invisible[combineWith]);\n    if (didStartAfterCritical(combineWith, afterCritical)) {\n        return isDisplaced ? origin : negate(displacedBy.point);\n    }\n    return isDisplaced ? displacedBy.point : origin;\n};\nvar whenCombining = function(_ref) {\n    var afterCritical = _ref.afterCritical, impact = _ref.impact, draggables = _ref.draggables;\n    var combine = tryGetCombine(impact);\n    !combine ?  true ? invariant(false) : 0 : void 0;\n    var combineWith = combine.draggableId;\n    var center = draggables[combineWith].page.borderBox.center;\n    var displaceBy = getCombinedItemDisplacement({\n        displaced: impact.displaced,\n        afterCritical: afterCritical,\n        combineWith: combineWith,\n        displacedBy: impact.displacedBy\n    });\n    return add(center, displaceBy);\n};\nvar distanceFromStartToBorderBoxCenter = function distanceFromStartToBorderBoxCenter(axis, box) {\n    return box.margin[axis.start] + box.borderBox[axis.size] / 2;\n};\nvar distanceFromEndToBorderBoxCenter = function distanceFromEndToBorderBoxCenter(axis, box) {\n    return box.margin[axis.end] + box.borderBox[axis.size] / 2;\n};\nvar getCrossAxisBorderBoxCenter = function getCrossAxisBorderBoxCenter(axis, target, isMoving) {\n    return target[axis.crossAxisStart] + isMoving.margin[axis.crossAxisStart] + isMoving.borderBox[axis.crossAxisSize] / 2;\n};\nvar goAfter = function goAfter(_ref) {\n    var axis = _ref.axis, moveRelativeTo = _ref.moveRelativeTo, isMoving = _ref.isMoving;\n    return patch(axis.line, moveRelativeTo.marginBox[axis.end] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));\n};\nvar goBefore = function goBefore(_ref2) {\n    var axis = _ref2.axis, moveRelativeTo = _ref2.moveRelativeTo, isMoving = _ref2.isMoving;\n    return patch(axis.line, moveRelativeTo.marginBox[axis.start] - distanceFromEndToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveRelativeTo.marginBox, isMoving));\n};\nvar goIntoStart = function goIntoStart(_ref3) {\n    var axis = _ref3.axis, moveInto = _ref3.moveInto, isMoving = _ref3.isMoving;\n    return patch(axis.line, moveInto.contentBox[axis.start] + distanceFromStartToBorderBoxCenter(axis, isMoving), getCrossAxisBorderBoxCenter(axis, moveInto.contentBox, isMoving));\n};\nvar whenReordering = function(_ref) {\n    var impact = _ref.impact, draggable = _ref.draggable, draggables = _ref.draggables, droppable = _ref.droppable, afterCritical = _ref.afterCritical;\n    var insideDestination = getDraggablesInsideDroppable(droppable.descriptor.id, draggables);\n    var draggablePage = draggable.page;\n    var axis = droppable.axis;\n    if (!insideDestination.length) {\n        return goIntoStart({\n            axis: axis,\n            moveInto: droppable.page,\n            isMoving: draggablePage\n        });\n    }\n    var displaced = impact.displaced, displacedBy = impact.displacedBy;\n    var closestAfter = displaced.all[0];\n    if (closestAfter) {\n        var closest = draggables[closestAfter];\n        if (didStartAfterCritical(closestAfter, afterCritical)) {\n            return goBefore({\n                axis: axis,\n                moveRelativeTo: closest.page,\n                isMoving: draggablePage\n            });\n        }\n        var withDisplacement = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.offset)(closest.page, displacedBy.point);\n        return goBefore({\n            axis: axis,\n            moveRelativeTo: withDisplacement,\n            isMoving: draggablePage\n        });\n    }\n    var last = insideDestination[insideDestination.length - 1];\n    if (last.descriptor.id === draggable.descriptor.id) {\n        return draggablePage.borderBox.center;\n    }\n    if (didStartAfterCritical(last.descriptor.id, afterCritical)) {\n        var page = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.offset)(last.page, negate(afterCritical.displacedBy.point));\n        return goAfter({\n            axis: axis,\n            moveRelativeTo: page,\n            isMoving: draggablePage\n        });\n    }\n    return goAfter({\n        axis: axis,\n        moveRelativeTo: last.page,\n        isMoving: draggablePage\n    });\n};\nvar withDroppableDisplacement = function(droppable, point) {\n    var frame = droppable.frame;\n    if (!frame) {\n        return point;\n    }\n    return add(point, frame.scroll.diff.displacement);\n};\nvar getResultWithoutDroppableDisplacement = function getResultWithoutDroppableDisplacement(_ref) {\n    var impact = _ref.impact, draggable = _ref.draggable, droppable = _ref.droppable, draggables = _ref.draggables, afterCritical = _ref.afterCritical;\n    var original = draggable.page.borderBox.center;\n    var at = impact.at;\n    if (!droppable) {\n        return original;\n    }\n    if (!at) {\n        return original;\n    }\n    if (at.type === \"REORDER\") {\n        return whenReordering({\n            impact: impact,\n            draggable: draggable,\n            draggables: draggables,\n            droppable: droppable,\n            afterCritical: afterCritical\n        });\n    }\n    return whenCombining({\n        impact: impact,\n        draggables: draggables,\n        afterCritical: afterCritical\n    });\n};\nvar getPageBorderBoxCenterFromImpact = function(args) {\n    var withoutDisplacement = getResultWithoutDroppableDisplacement(args);\n    var droppable = args.droppable;\n    var withDisplacement = droppable ? withDroppableDisplacement(droppable, withoutDisplacement) : withoutDisplacement;\n    return withDisplacement;\n};\nvar scrollViewport = function(viewport, newScroll) {\n    var diff = subtract(newScroll, viewport.scroll.initial);\n    var displacement = negate(diff);\n    var frame = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getRect)({\n        top: newScroll.y,\n        bottom: newScroll.y + viewport.frame.height,\n        left: newScroll.x,\n        right: newScroll.x + viewport.frame.width\n    });\n    var updated = {\n        frame: frame,\n        scroll: {\n            initial: viewport.scroll.initial,\n            max: viewport.scroll.max,\n            current: newScroll,\n            diff: {\n                value: diff,\n                displacement: displacement\n            }\n        }\n    };\n    return updated;\n};\nfunction getDraggables(ids, draggables) {\n    return ids.map(function(id) {\n        return draggables[id];\n    });\n}\nfunction tryGetVisible(id, groups) {\n    for(var i = 0; i < groups.length; i++){\n        var displacement = groups[i].visible[id];\n        if (displacement) {\n            return displacement;\n        }\n    }\n    return null;\n}\nvar speculativelyIncrease = function(_ref) {\n    var impact = _ref.impact, viewport = _ref.viewport, destination = _ref.destination, draggables = _ref.draggables, maxScrollChange = _ref.maxScrollChange;\n    var scrolledViewport = scrollViewport(viewport, add(viewport.scroll.current, maxScrollChange));\n    var scrolledDroppable = destination.frame ? scrollDroppable(destination, add(destination.frame.scroll.current, maxScrollChange)) : destination;\n    var last = impact.displaced;\n    var withViewportScroll = getDisplacementGroups({\n        afterDragging: getDraggables(last.all, draggables),\n        destination: destination,\n        displacedBy: impact.displacedBy,\n        viewport: scrolledViewport.frame,\n        last: last,\n        forceShouldAnimate: false\n    });\n    var withDroppableScroll = getDisplacementGroups({\n        afterDragging: getDraggables(last.all, draggables),\n        destination: scrolledDroppable,\n        displacedBy: impact.displacedBy,\n        viewport: viewport.frame,\n        last: last,\n        forceShouldAnimate: false\n    });\n    var invisible = {};\n    var visible = {};\n    var groups = [\n        last,\n        withViewportScroll,\n        withDroppableScroll\n    ];\n    last.all.forEach(function(id) {\n        var displacement = tryGetVisible(id, groups);\n        if (displacement) {\n            visible[id] = displacement;\n            return;\n        }\n        invisible[id] = true;\n    });\n    var newImpact = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, impact, {\n        displaced: {\n            all: last.all,\n            invisible: invisible,\n            visible: visible\n        }\n    });\n    return newImpact;\n};\nvar withViewportDisplacement = function(viewport, point) {\n    return add(viewport.scroll.diff.displacement, point);\n};\nvar getClientFromPageBorderBoxCenter = function(_ref) {\n    var pageBorderBoxCenter = _ref.pageBorderBoxCenter, draggable = _ref.draggable, viewport = _ref.viewport;\n    var withoutPageScrollChange = withViewportDisplacement(viewport, pageBorderBoxCenter);\n    var offset = subtract(withoutPageScrollChange, draggable.page.borderBox.center);\n    return add(draggable.client.borderBox.center, offset);\n};\nvar isTotallyVisibleInNewLocation = function(_ref) {\n    var draggable = _ref.draggable, destination = _ref.destination, newPageBorderBoxCenter = _ref.newPageBorderBoxCenter, viewport = _ref.viewport, withDroppableDisplacement = _ref.withDroppableDisplacement, _ref$onlyOnMainAxis = _ref.onlyOnMainAxis, onlyOnMainAxis = _ref$onlyOnMainAxis === void 0 ? false : _ref$onlyOnMainAxis;\n    var changeNeeded = subtract(newPageBorderBoxCenter, draggable.page.borderBox.center);\n    var shifted = offsetByPosition(draggable.page.borderBox, changeNeeded);\n    var args = {\n        target: shifted,\n        destination: destination,\n        withDroppableDisplacement: withDroppableDisplacement,\n        viewport: viewport\n    };\n    return onlyOnMainAxis ? isTotallyVisibleOnAxis(args) : isTotallyVisible(args);\n};\nvar moveToNextPlace = function(_ref) {\n    var isMovingForward = _ref.isMovingForward, draggable = _ref.draggable, destination = _ref.destination, draggables = _ref.draggables, previousImpact = _ref.previousImpact, viewport = _ref.viewport, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, previousClientSelection = _ref.previousClientSelection, afterCritical = _ref.afterCritical;\n    if (!destination.isEnabled) {\n        return null;\n    }\n    var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);\n    var isInHomeList = isHomeOf(draggable, destination);\n    var impact = moveToNextCombine({\n        isMovingForward: isMovingForward,\n        draggable: draggable,\n        destination: destination,\n        insideDestination: insideDestination,\n        previousImpact: previousImpact\n    }) || moveToNextIndex({\n        isMovingForward: isMovingForward,\n        isInHomeList: isInHomeList,\n        draggable: draggable,\n        draggables: draggables,\n        destination: destination,\n        insideDestination: insideDestination,\n        previousImpact: previousImpact,\n        viewport: viewport,\n        afterCritical: afterCritical\n    });\n    if (!impact) {\n        return null;\n    }\n    var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({\n        impact: impact,\n        draggable: draggable,\n        droppable: destination,\n        draggables: draggables,\n        afterCritical: afterCritical\n    });\n    var isVisibleInNewLocation = isTotallyVisibleInNewLocation({\n        draggable: draggable,\n        destination: destination,\n        newPageBorderBoxCenter: pageBorderBoxCenter,\n        viewport: viewport.frame,\n        withDroppableDisplacement: false,\n        onlyOnMainAxis: true\n    });\n    if (isVisibleInNewLocation) {\n        var clientSelection = getClientFromPageBorderBoxCenter({\n            pageBorderBoxCenter: pageBorderBoxCenter,\n            draggable: draggable,\n            viewport: viewport\n        });\n        return {\n            clientSelection: clientSelection,\n            impact: impact,\n            scrollJumpRequest: null\n        };\n    }\n    var distance = subtract(pageBorderBoxCenter, previousPageBorderBoxCenter);\n    var cautious = speculativelyIncrease({\n        impact: impact,\n        viewport: viewport,\n        destination: destination,\n        draggables: draggables,\n        maxScrollChange: distance\n    });\n    return {\n        clientSelection: previousClientSelection,\n        impact: cautious,\n        scrollJumpRequest: distance\n    };\n};\nvar getKnownActive = function getKnownActive(droppable) {\n    var rect = droppable.subject.active;\n    !rect ?  true ? invariant(false, \"Cannot get clipped area from droppable\") : 0 : void 0;\n    return rect;\n};\nvar getBestCrossAxisDroppable = function(_ref) {\n    var isMovingForward = _ref.isMovingForward, pageBorderBoxCenter = _ref.pageBorderBoxCenter, source = _ref.source, droppables = _ref.droppables, viewport = _ref.viewport;\n    var active = source.subject.active;\n    if (!active) {\n        return null;\n    }\n    var axis = source.axis;\n    var isBetweenSourceClipped = isWithin(active[axis.start], active[axis.end]);\n    var candidates = toDroppableList(droppables).filter(function(droppable) {\n        return droppable !== source;\n    }).filter(function(droppable) {\n        return droppable.isEnabled;\n    }).filter(function(droppable) {\n        return Boolean(droppable.subject.active);\n    }).filter(function(droppable) {\n        return isPartiallyVisibleThroughFrame(viewport.frame)(getKnownActive(droppable));\n    }).filter(function(droppable) {\n        var activeOfTarget = getKnownActive(droppable);\n        if (isMovingForward) {\n            return active[axis.crossAxisEnd] < activeOfTarget[axis.crossAxisEnd];\n        }\n        return activeOfTarget[axis.crossAxisStart] < active[axis.crossAxisStart];\n    }).filter(function(droppable) {\n        var activeOfTarget = getKnownActive(droppable);\n        var isBetweenDestinationClipped = isWithin(activeOfTarget[axis.start], activeOfTarget[axis.end]);\n        return isBetweenSourceClipped(activeOfTarget[axis.start]) || isBetweenSourceClipped(activeOfTarget[axis.end]) || isBetweenDestinationClipped(active[axis.start]) || isBetweenDestinationClipped(active[axis.end]);\n    }).sort(function(a, b) {\n        var first = getKnownActive(a)[axis.crossAxisStart];\n        var second = getKnownActive(b)[axis.crossAxisStart];\n        if (isMovingForward) {\n            return first - second;\n        }\n        return second - first;\n    }).filter(function(droppable, index, array) {\n        return getKnownActive(droppable)[axis.crossAxisStart] === getKnownActive(array[0])[axis.crossAxisStart];\n    });\n    if (!candidates.length) {\n        return null;\n    }\n    if (candidates.length === 1) {\n        return candidates[0];\n    }\n    var contains = candidates.filter(function(droppable) {\n        var isWithinDroppable = isWithin(getKnownActive(droppable)[axis.start], getKnownActive(droppable)[axis.end]);\n        return isWithinDroppable(pageBorderBoxCenter[axis.line]);\n    });\n    if (contains.length === 1) {\n        return contains[0];\n    }\n    if (contains.length > 1) {\n        return contains.sort(function(a, b) {\n            return getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start];\n        })[0];\n    }\n    return candidates.sort(function(a, b) {\n        var first = closest(pageBorderBoxCenter, getCorners(getKnownActive(a)));\n        var second = closest(pageBorderBoxCenter, getCorners(getKnownActive(b)));\n        if (first !== second) {\n            return first - second;\n        }\n        return getKnownActive(a)[axis.start] - getKnownActive(b)[axis.start];\n    })[0];\n};\nvar getCurrentPageBorderBoxCenter = function getCurrentPageBorderBoxCenter(draggable, afterCritical) {\n    var original = draggable.page.borderBox.center;\n    return didStartAfterCritical(draggable.descriptor.id, afterCritical) ? subtract(original, afterCritical.displacedBy.point) : original;\n};\nvar getCurrentPageBorderBox = function getCurrentPageBorderBox(draggable, afterCritical) {\n    var original = draggable.page.borderBox;\n    return didStartAfterCritical(draggable.descriptor.id, afterCritical) ? offsetByPosition(original, negate(afterCritical.displacedBy.point)) : original;\n};\nvar getClosestDraggable = function(_ref) {\n    var pageBorderBoxCenter = _ref.pageBorderBoxCenter, viewport = _ref.viewport, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;\n    var sorted = insideDestination.filter(function(draggable) {\n        return isTotallyVisible({\n            target: getCurrentPageBorderBox(draggable, afterCritical),\n            destination: destination,\n            viewport: viewport.frame,\n            withDroppableDisplacement: true\n        });\n    }).sort(function(a, b) {\n        var distanceToA = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(a, afterCritical)));\n        var distanceToB = distance(pageBorderBoxCenter, withDroppableDisplacement(destination, getCurrentPageBorderBoxCenter(b, afterCritical)));\n        if (distanceToA < distanceToB) {\n            return -1;\n        }\n        if (distanceToB < distanceToA) {\n            return 1;\n        }\n        return a.descriptor.index - b.descriptor.index;\n    });\n    return sorted[0] || null;\n};\nvar getDisplacedBy = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function getDisplacedBy(axis, displaceBy) {\n    var displacement = displaceBy[axis.line];\n    return {\n        value: displacement,\n        point: patch(axis.line, displacement)\n    };\n});\nvar getRequiredGrowthForPlaceholder = function getRequiredGrowthForPlaceholder(droppable, placeholderSize, draggables) {\n    var axis = droppable.axis;\n    if (droppable.descriptor.mode === \"virtual\") {\n        return patch(axis.line, placeholderSize[axis.line]);\n    }\n    var availableSpace = droppable.subject.page.contentBox[axis.size];\n    var insideDroppable = getDraggablesInsideDroppable(droppable.descriptor.id, draggables);\n    var spaceUsed = insideDroppable.reduce(function(sum, dimension) {\n        return sum + dimension.client.marginBox[axis.size];\n    }, 0);\n    var requiredSpace = spaceUsed + placeholderSize[axis.line];\n    var needsToGrowBy = requiredSpace - availableSpace;\n    if (needsToGrowBy <= 0) {\n        return null;\n    }\n    return patch(axis.line, needsToGrowBy);\n};\nvar withMaxScroll = function withMaxScroll(frame, max) {\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, frame, {\n        scroll: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, frame.scroll, {\n            max: max\n        })\n    });\n};\nvar addPlaceholder = function addPlaceholder(droppable, draggable, draggables) {\n    var frame = droppable.frame;\n    !!isHomeOf(draggable, droppable) ?  true ? invariant(false, \"Should not add placeholder space to home list\") : 0 : void 0;\n    !!droppable.subject.withPlaceholder ?  true ? invariant(false, \"Cannot add placeholder size to a subject when it already has one\") : 0 : void 0;\n    var placeholderSize = getDisplacedBy(droppable.axis, draggable.displaceBy).point;\n    var requiredGrowth = getRequiredGrowthForPlaceholder(droppable, placeholderSize, draggables);\n    var added = {\n        placeholderSize: placeholderSize,\n        increasedBy: requiredGrowth,\n        oldFrameMaxScroll: droppable.frame ? droppable.frame.scroll.max : null\n    };\n    if (!frame) {\n        var _subject = getSubject({\n            page: droppable.subject.page,\n            withPlaceholder: added,\n            axis: droppable.axis,\n            frame: droppable.frame\n        });\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, droppable, {\n            subject: _subject\n        });\n    }\n    var maxScroll = requiredGrowth ? add(frame.scroll.max, requiredGrowth) : frame.scroll.max;\n    var newFrame = withMaxScroll(frame, maxScroll);\n    var subject = getSubject({\n        page: droppable.subject.page,\n        withPlaceholder: added,\n        axis: droppable.axis,\n        frame: newFrame\n    });\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, droppable, {\n        subject: subject,\n        frame: newFrame\n    });\n};\nvar removePlaceholder = function removePlaceholder(droppable) {\n    var added = droppable.subject.withPlaceholder;\n    !added ?  true ? invariant(false, \"Cannot remove placeholder form subject when there was none\") : 0 : void 0;\n    var frame = droppable.frame;\n    if (!frame) {\n        var _subject2 = getSubject({\n            page: droppable.subject.page,\n            axis: droppable.axis,\n            frame: null,\n            withPlaceholder: null\n        });\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, droppable, {\n            subject: _subject2\n        });\n    }\n    var oldMaxScroll = added.oldFrameMaxScroll;\n    !oldMaxScroll ?  true ? invariant(false, \"Expected droppable with frame to have old max frame scroll when removing placeholder\") : 0 : void 0;\n    var newFrame = withMaxScroll(frame, oldMaxScroll);\n    var subject = getSubject({\n        page: droppable.subject.page,\n        axis: droppable.axis,\n        frame: newFrame,\n        withPlaceholder: null\n    });\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, droppable, {\n        subject: subject,\n        frame: newFrame\n    });\n};\nvar moveToNewDroppable = function(_ref) {\n    var previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, moveRelativeTo = _ref.moveRelativeTo, insideDestination = _ref.insideDestination, draggable = _ref.draggable, draggables = _ref.draggables, destination = _ref.destination, viewport = _ref.viewport, afterCritical = _ref.afterCritical;\n    if (!moveRelativeTo) {\n        if (insideDestination.length) {\n            return null;\n        }\n        var proposed = {\n            displaced: emptyGroups,\n            displacedBy: noDisplacedBy,\n            at: {\n                type: \"REORDER\",\n                destination: {\n                    droppableId: destination.descriptor.id,\n                    index: 0\n                }\n            }\n        };\n        var proposedPageBorderBoxCenter = getPageBorderBoxCenterFromImpact({\n            impact: proposed,\n            draggable: draggable,\n            droppable: destination,\n            draggables: draggables,\n            afterCritical: afterCritical\n        });\n        var withPlaceholder = isHomeOf(draggable, destination) ? destination : addPlaceholder(destination, draggable, draggables);\n        var isVisibleInNewLocation = isTotallyVisibleInNewLocation({\n            draggable: draggable,\n            destination: withPlaceholder,\n            newPageBorderBoxCenter: proposedPageBorderBoxCenter,\n            viewport: viewport.frame,\n            withDroppableDisplacement: false,\n            onlyOnMainAxis: true\n        });\n        return isVisibleInNewLocation ? proposed : null;\n    }\n    var isGoingBeforeTarget = Boolean(previousPageBorderBoxCenter[destination.axis.line] <= moveRelativeTo.page.borderBox.center[destination.axis.line]);\n    var proposedIndex = function() {\n        var relativeTo = moveRelativeTo.descriptor.index;\n        if (moveRelativeTo.descriptor.id === draggable.descriptor.id) {\n            return relativeTo;\n        }\n        if (isGoingBeforeTarget) {\n            return relativeTo;\n        }\n        return relativeTo + 1;\n    }();\n    var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);\n    return calculateReorderImpact({\n        draggable: draggable,\n        insideDestination: insideDestination,\n        destination: destination,\n        viewport: viewport,\n        displacedBy: displacedBy,\n        last: emptyGroups,\n        index: proposedIndex\n    });\n};\nvar moveCrossAxis = function(_ref) {\n    var isMovingForward = _ref.isMovingForward, previousPageBorderBoxCenter = _ref.previousPageBorderBoxCenter, draggable = _ref.draggable, isOver = _ref.isOver, draggables = _ref.draggables, droppables = _ref.droppables, viewport = _ref.viewport, afterCritical = _ref.afterCritical;\n    var destination = getBestCrossAxisDroppable({\n        isMovingForward: isMovingForward,\n        pageBorderBoxCenter: previousPageBorderBoxCenter,\n        source: isOver,\n        droppables: droppables,\n        viewport: viewport\n    });\n    if (!destination) {\n        return null;\n    }\n    var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);\n    var moveRelativeTo = getClosestDraggable({\n        pageBorderBoxCenter: previousPageBorderBoxCenter,\n        viewport: viewport,\n        destination: destination,\n        insideDestination: insideDestination,\n        afterCritical: afterCritical\n    });\n    var impact = moveToNewDroppable({\n        previousPageBorderBoxCenter: previousPageBorderBoxCenter,\n        destination: destination,\n        draggable: draggable,\n        draggables: draggables,\n        moveRelativeTo: moveRelativeTo,\n        insideDestination: insideDestination,\n        viewport: viewport,\n        afterCritical: afterCritical\n    });\n    if (!impact) {\n        return null;\n    }\n    var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({\n        impact: impact,\n        draggable: draggable,\n        droppable: destination,\n        draggables: draggables,\n        afterCritical: afterCritical\n    });\n    var clientSelection = getClientFromPageBorderBoxCenter({\n        pageBorderBoxCenter: pageBorderBoxCenter,\n        draggable: draggable,\n        viewport: viewport\n    });\n    return {\n        clientSelection: clientSelection,\n        impact: impact,\n        scrollJumpRequest: null\n    };\n};\nvar whatIsDraggedOver = function(impact) {\n    var at = impact.at;\n    if (!at) {\n        return null;\n    }\n    if (at.type === \"REORDER\") {\n        return at.destination.droppableId;\n    }\n    return at.combine.droppableId;\n};\nvar getDroppableOver = function getDroppableOver(impact, droppables) {\n    var id = whatIsDraggedOver(impact);\n    return id ? droppables[id] : null;\n};\nvar moveInDirection = function(_ref) {\n    var state = _ref.state, type = _ref.type;\n    var isActuallyOver = getDroppableOver(state.impact, state.dimensions.droppables);\n    var isMainAxisMovementAllowed = Boolean(isActuallyOver);\n    var home = state.dimensions.droppables[state.critical.droppable.id];\n    var isOver = isActuallyOver || home;\n    var direction = isOver.axis.direction;\n    var isMovingOnMainAxis = direction === \"vertical\" && (type === \"MOVE_UP\" || type === \"MOVE_DOWN\") || direction === \"horizontal\" && (type === \"MOVE_LEFT\" || type === \"MOVE_RIGHT\");\n    if (isMovingOnMainAxis && !isMainAxisMovementAllowed) {\n        return null;\n    }\n    var isMovingForward = type === \"MOVE_DOWN\" || type === \"MOVE_RIGHT\";\n    var draggable = state.dimensions.draggables[state.critical.draggable.id];\n    var previousPageBorderBoxCenter = state.current.page.borderBoxCenter;\n    var _state$dimensions = state.dimensions, draggables = _state$dimensions.draggables, droppables = _state$dimensions.droppables;\n    return isMovingOnMainAxis ? moveToNextPlace({\n        isMovingForward: isMovingForward,\n        previousPageBorderBoxCenter: previousPageBorderBoxCenter,\n        draggable: draggable,\n        destination: isOver,\n        draggables: draggables,\n        viewport: state.viewport,\n        previousClientSelection: state.current.client.selection,\n        previousImpact: state.impact,\n        afterCritical: state.afterCritical\n    }) : moveCrossAxis({\n        isMovingForward: isMovingForward,\n        previousPageBorderBoxCenter: previousPageBorderBoxCenter,\n        draggable: draggable,\n        isOver: isOver,\n        draggables: draggables,\n        droppables: droppables,\n        viewport: state.viewport,\n        afterCritical: state.afterCritical\n    });\n};\nfunction isMovementAllowed(state) {\n    return state.phase === \"DRAGGING\" || state.phase === \"COLLECTING\";\n}\nfunction isPositionInFrame(frame) {\n    var isWithinVertical = isWithin(frame.top, frame.bottom);\n    var isWithinHorizontal = isWithin(frame.left, frame.right);\n    return function run(point) {\n        return isWithinVertical(point.y) && isWithinHorizontal(point.x);\n    };\n}\nfunction getHasOverlap(first, second) {\n    return first.left < second.right && first.right > second.left && first.top < second.bottom && first.bottom > second.top;\n}\nfunction getFurthestAway(_ref) {\n    var pageBorderBox = _ref.pageBorderBox, draggable = _ref.draggable, candidates = _ref.candidates;\n    var startCenter = draggable.page.borderBox.center;\n    var sorted = candidates.map(function(candidate) {\n        var axis = candidate.axis;\n        var target = patch(candidate.axis.line, pageBorderBox.center[axis.line], candidate.page.borderBox.center[axis.crossAxisLine]);\n        return {\n            id: candidate.descriptor.id,\n            distance: distance(startCenter, target)\n        };\n    }).sort(function(a, b) {\n        return b.distance - a.distance;\n    });\n    return sorted[0] ? sorted[0].id : null;\n}\nfunction getDroppableOver$1(_ref2) {\n    var pageBorderBox = _ref2.pageBorderBox, draggable = _ref2.draggable, droppables = _ref2.droppables;\n    var candidates = toDroppableList(droppables).filter(function(item) {\n        if (!item.isEnabled) {\n            return false;\n        }\n        var active = item.subject.active;\n        if (!active) {\n            return false;\n        }\n        if (!getHasOverlap(pageBorderBox, active)) {\n            return false;\n        }\n        if (isPositionInFrame(active)(pageBorderBox.center)) {\n            return true;\n        }\n        var axis = item.axis;\n        var childCenter = active.center[axis.crossAxisLine];\n        var crossAxisStart = pageBorderBox[axis.crossAxisStart];\n        var crossAxisEnd = pageBorderBox[axis.crossAxisEnd];\n        var isContained = isWithin(active[axis.crossAxisStart], active[axis.crossAxisEnd]);\n        var isStartContained = isContained(crossAxisStart);\n        var isEndContained = isContained(crossAxisEnd);\n        if (!isStartContained && !isEndContained) {\n            return true;\n        }\n        if (isStartContained) {\n            return crossAxisStart < childCenter;\n        }\n        return crossAxisEnd > childCenter;\n    });\n    if (!candidates.length) {\n        return null;\n    }\n    if (candidates.length === 1) {\n        return candidates[0].descriptor.id;\n    }\n    return getFurthestAway({\n        pageBorderBox: pageBorderBox,\n        draggable: draggable,\n        candidates: candidates\n    });\n}\nvar offsetRectByPosition = function offsetRectByPosition(rect, point) {\n    return (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getRect)(offsetByPosition(rect, point));\n};\nvar withDroppableScroll = function(droppable, area) {\n    var frame = droppable.frame;\n    if (!frame) {\n        return area;\n    }\n    return offsetRectByPosition(area, frame.scroll.diff.value);\n};\nfunction getIsDisplaced(_ref) {\n    var displaced = _ref.displaced, id = _ref.id;\n    return Boolean(displaced.visible[id] || displaced.invisible[id]);\n}\nfunction atIndex(_ref) {\n    var draggable = _ref.draggable, closest = _ref.closest, inHomeList = _ref.inHomeList;\n    if (!closest) {\n        return null;\n    }\n    if (!inHomeList) {\n        return closest.descriptor.index;\n    }\n    if (closest.descriptor.index > draggable.descriptor.index) {\n        return closest.descriptor.index - 1;\n    }\n    return closest.descriptor.index;\n}\nvar getReorderImpact = function(_ref2) {\n    var targetRect = _ref2.pageBorderBoxWithDroppableScroll, draggable = _ref2.draggable, destination = _ref2.destination, insideDestination = _ref2.insideDestination, last = _ref2.last, viewport = _ref2.viewport, afterCritical = _ref2.afterCritical;\n    var axis = destination.axis;\n    var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);\n    var displacement = displacedBy.value;\n    var targetStart = targetRect[axis.start];\n    var targetEnd = targetRect[axis.end];\n    var withoutDragging = removeDraggableFromList(draggable, insideDestination);\n    var closest = find(withoutDragging, function(child) {\n        var id = child.descriptor.id;\n        var childCenter = child.page.borderBox.center[axis.line];\n        var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);\n        var isDisplaced = getIsDisplaced({\n            displaced: last,\n            id: id\n        });\n        if (didStartAfterCritical$1) {\n            if (isDisplaced) {\n                return targetEnd <= childCenter;\n            }\n            return targetStart < childCenter - displacement;\n        }\n        if (isDisplaced) {\n            return targetEnd <= childCenter + displacement;\n        }\n        return targetStart < childCenter;\n    });\n    var newIndex = atIndex({\n        draggable: draggable,\n        closest: closest,\n        inHomeList: isHomeOf(draggable, destination)\n    });\n    return calculateReorderImpact({\n        draggable: draggable,\n        insideDestination: insideDestination,\n        destination: destination,\n        viewport: viewport,\n        last: last,\n        displacedBy: displacedBy,\n        index: newIndex\n    });\n};\nvar combineThresholdDivisor = 4;\nvar getCombineImpact = function(_ref) {\n    var draggable = _ref.draggable, targetRect = _ref.pageBorderBoxWithDroppableScroll, previousImpact = _ref.previousImpact, destination = _ref.destination, insideDestination = _ref.insideDestination, afterCritical = _ref.afterCritical;\n    if (!destination.isCombineEnabled) {\n        return null;\n    }\n    var axis = destination.axis;\n    var displacedBy = getDisplacedBy(destination.axis, draggable.displaceBy);\n    var displacement = displacedBy.value;\n    var targetStart = targetRect[axis.start];\n    var targetEnd = targetRect[axis.end];\n    var withoutDragging = removeDraggableFromList(draggable, insideDestination);\n    var combineWith = find(withoutDragging, function(child) {\n        var id = child.descriptor.id;\n        var childRect = child.page.borderBox;\n        var childSize = childRect[axis.size];\n        var threshold = childSize / combineThresholdDivisor;\n        var didStartAfterCritical$1 = didStartAfterCritical(id, afterCritical);\n        var isDisplaced = getIsDisplaced({\n            displaced: previousImpact.displaced,\n            id: id\n        });\n        if (didStartAfterCritical$1) {\n            if (isDisplaced) {\n                return targetEnd > childRect[axis.start] + threshold && targetEnd < childRect[axis.end] - threshold;\n            }\n            return targetStart > childRect[axis.start] - displacement + threshold && targetStart < childRect[axis.end] - displacement - threshold;\n        }\n        if (isDisplaced) {\n            return targetEnd > childRect[axis.start] + displacement + threshold && targetEnd < childRect[axis.end] + displacement - threshold;\n        }\n        return targetStart > childRect[axis.start] + threshold && targetStart < childRect[axis.end] - threshold;\n    });\n    if (!combineWith) {\n        return null;\n    }\n    var impact = {\n        displacedBy: displacedBy,\n        displaced: previousImpact.displaced,\n        at: {\n            type: \"COMBINE\",\n            combine: {\n                draggableId: combineWith.descriptor.id,\n                droppableId: destination.descriptor.id\n            }\n        }\n    };\n    return impact;\n};\nvar getDragImpact = function(_ref) {\n    var pageOffset = _ref.pageOffset, draggable = _ref.draggable, draggables = _ref.draggables, droppables = _ref.droppables, previousImpact = _ref.previousImpact, viewport = _ref.viewport, afterCritical = _ref.afterCritical;\n    var pageBorderBox = offsetRectByPosition(draggable.page.borderBox, pageOffset);\n    var destinationId = getDroppableOver$1({\n        pageBorderBox: pageBorderBox,\n        draggable: draggable,\n        droppables: droppables\n    });\n    if (!destinationId) {\n        return noImpact;\n    }\n    var destination = droppables[destinationId];\n    var insideDestination = getDraggablesInsideDroppable(destination.descriptor.id, draggables);\n    var pageBorderBoxWithDroppableScroll = withDroppableScroll(destination, pageBorderBox);\n    return getCombineImpact({\n        pageBorderBoxWithDroppableScroll: pageBorderBoxWithDroppableScroll,\n        draggable: draggable,\n        previousImpact: previousImpact,\n        destination: destination,\n        insideDestination: insideDestination,\n        afterCritical: afterCritical\n    }) || getReorderImpact({\n        pageBorderBoxWithDroppableScroll: pageBorderBoxWithDroppableScroll,\n        draggable: draggable,\n        destination: destination,\n        insideDestination: insideDestination,\n        last: previousImpact.displaced,\n        viewport: viewport,\n        afterCritical: afterCritical\n    });\n};\nvar patchDroppableMap = function(droppables, updated) {\n    var _extends2;\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, droppables, (_extends2 = {}, _extends2[updated.descriptor.id] = updated, _extends2));\n};\nvar clearUnusedPlaceholder = function clearUnusedPlaceholder(_ref) {\n    var previousImpact = _ref.previousImpact, impact = _ref.impact, droppables = _ref.droppables;\n    var last = whatIsDraggedOver(previousImpact);\n    var now = whatIsDraggedOver(impact);\n    if (!last) {\n        return droppables;\n    }\n    if (last === now) {\n        return droppables;\n    }\n    var lastDroppable = droppables[last];\n    if (!lastDroppable.subject.withPlaceholder) {\n        return droppables;\n    }\n    var updated = removePlaceholder(lastDroppable);\n    return patchDroppableMap(droppables, updated);\n};\nvar recomputePlaceholders = function(_ref2) {\n    var draggable = _ref2.draggable, draggables = _ref2.draggables, droppables = _ref2.droppables, previousImpact = _ref2.previousImpact, impact = _ref2.impact;\n    var cleaned = clearUnusedPlaceholder({\n        previousImpact: previousImpact,\n        impact: impact,\n        droppables: droppables\n    });\n    var isOver = whatIsDraggedOver(impact);\n    if (!isOver) {\n        return cleaned;\n    }\n    var droppable = droppables[isOver];\n    if (isHomeOf(draggable, droppable)) {\n        return cleaned;\n    }\n    if (droppable.subject.withPlaceholder) {\n        return cleaned;\n    }\n    var patched = addPlaceholder(droppable, draggable, draggables);\n    return patchDroppableMap(cleaned, patched);\n};\nvar update = function(_ref) {\n    var state = _ref.state, forcedClientSelection = _ref.clientSelection, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport, forcedImpact = _ref.impact, scrollJumpRequest = _ref.scrollJumpRequest;\n    var viewport = forcedViewport || state.viewport;\n    var dimensions = forcedDimensions || state.dimensions;\n    var clientSelection = forcedClientSelection || state.current.client.selection;\n    var offset = subtract(clientSelection, state.initial.client.selection);\n    var client = {\n        offset: offset,\n        selection: clientSelection,\n        borderBoxCenter: add(state.initial.client.borderBoxCenter, offset)\n    };\n    var page = {\n        selection: add(client.selection, viewport.scroll.current),\n        borderBoxCenter: add(client.borderBoxCenter, viewport.scroll.current),\n        offset: add(client.offset, viewport.scroll.diff.value)\n    };\n    var current = {\n        client: client,\n        page: page\n    };\n    if (state.phase === \"COLLECTING\") {\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            phase: \"COLLECTING\"\n        }, state, {\n            dimensions: dimensions,\n            viewport: viewport,\n            current: current\n        });\n    }\n    var draggable = dimensions.draggables[state.critical.draggable.id];\n    var newImpact = forcedImpact || getDragImpact({\n        pageOffset: page.offset,\n        draggable: draggable,\n        draggables: dimensions.draggables,\n        droppables: dimensions.droppables,\n        previousImpact: state.impact,\n        viewport: viewport,\n        afterCritical: state.afterCritical\n    });\n    var withUpdatedPlaceholders = recomputePlaceholders({\n        draggable: draggable,\n        impact: newImpact,\n        previousImpact: state.impact,\n        draggables: dimensions.draggables,\n        droppables: dimensions.droppables\n    });\n    var result = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, state, {\n        current: current,\n        dimensions: {\n            draggables: dimensions.draggables,\n            droppables: withUpdatedPlaceholders\n        },\n        impact: newImpact,\n        viewport: viewport,\n        scrollJumpRequest: scrollJumpRequest || null,\n        forceShouldAnimate: scrollJumpRequest ? false : null\n    });\n    return result;\n};\nfunction getDraggables$1(ids, draggables) {\n    return ids.map(function(id) {\n        return draggables[id];\n    });\n}\nvar recompute = function(_ref) {\n    var impact = _ref.impact, viewport = _ref.viewport, draggables = _ref.draggables, destination = _ref.destination, forceShouldAnimate = _ref.forceShouldAnimate;\n    var last = impact.displaced;\n    var afterDragging = getDraggables$1(last.all, draggables);\n    var displaced = getDisplacementGroups({\n        afterDragging: afterDragging,\n        destination: destination,\n        displacedBy: impact.displacedBy,\n        viewport: viewport.frame,\n        forceShouldAnimate: forceShouldAnimate,\n        last: last\n    });\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, impact, {\n        displaced: displaced\n    });\n};\nvar getClientBorderBoxCenter = function(_ref) {\n    var impact = _ref.impact, draggable = _ref.draggable, droppable = _ref.droppable, draggables = _ref.draggables, viewport = _ref.viewport, afterCritical = _ref.afterCritical;\n    var pageBorderBoxCenter = getPageBorderBoxCenterFromImpact({\n        impact: impact,\n        draggable: draggable,\n        draggables: draggables,\n        droppable: droppable,\n        afterCritical: afterCritical\n    });\n    return getClientFromPageBorderBoxCenter({\n        pageBorderBoxCenter: pageBorderBoxCenter,\n        draggable: draggable,\n        viewport: viewport\n    });\n};\nvar refreshSnap = function(_ref) {\n    var state = _ref.state, forcedDimensions = _ref.dimensions, forcedViewport = _ref.viewport;\n    !(state.movementMode === \"SNAP\") ?  true ? invariant(false) : 0 : void 0;\n    var needsVisibilityCheck = state.impact;\n    var viewport = forcedViewport || state.viewport;\n    var dimensions = forcedDimensions || state.dimensions;\n    var draggables = dimensions.draggables, droppables = dimensions.droppables;\n    var draggable = draggables[state.critical.draggable.id];\n    var isOver = whatIsDraggedOver(needsVisibilityCheck);\n    !isOver ?  true ? invariant(false, \"Must be over a destination in SNAP movement mode\") : 0 : void 0;\n    var destination = droppables[isOver];\n    var impact = recompute({\n        impact: needsVisibilityCheck,\n        viewport: viewport,\n        destination: destination,\n        draggables: draggables\n    });\n    var clientSelection = getClientBorderBoxCenter({\n        impact: impact,\n        draggable: draggable,\n        droppable: destination,\n        draggables: draggables,\n        viewport: viewport,\n        afterCritical: state.afterCritical\n    });\n    return update({\n        impact: impact,\n        clientSelection: clientSelection,\n        state: state,\n        dimensions: dimensions,\n        viewport: viewport\n    });\n};\nvar getHomeLocation = function(descriptor) {\n    return {\n        index: descriptor.index,\n        droppableId: descriptor.droppableId\n    };\n};\nvar getLiftEffect = function(_ref) {\n    var draggable = _ref.draggable, home = _ref.home, draggables = _ref.draggables, viewport = _ref.viewport;\n    var displacedBy = getDisplacedBy(home.axis, draggable.displaceBy);\n    var insideHome = getDraggablesInsideDroppable(home.descriptor.id, draggables);\n    var rawIndex = insideHome.indexOf(draggable);\n    !(rawIndex !== -1) ?  true ? invariant(false, \"Expected draggable to be inside home list\") : 0 : void 0;\n    var afterDragging = insideHome.slice(rawIndex + 1);\n    var effected = afterDragging.reduce(function(previous, item) {\n        previous[item.descriptor.id] = true;\n        return previous;\n    }, {});\n    var afterCritical = {\n        inVirtualList: home.descriptor.mode === \"virtual\",\n        displacedBy: displacedBy,\n        effected: effected\n    };\n    var displaced = getDisplacementGroups({\n        afterDragging: afterDragging,\n        destination: home,\n        displacedBy: displacedBy,\n        last: null,\n        viewport: viewport.frame,\n        forceShouldAnimate: false\n    });\n    var impact = {\n        displaced: displaced,\n        displacedBy: displacedBy,\n        at: {\n            type: \"REORDER\",\n            destination: getHomeLocation(draggable.descriptor)\n        }\n    };\n    return {\n        impact: impact,\n        afterCritical: afterCritical\n    };\n};\nvar patchDimensionMap = function(dimensions, updated) {\n    return {\n        draggables: dimensions.draggables,\n        droppables: patchDroppableMap(dimensions.droppables, updated)\n    };\n};\nvar start = function start(key) {\n    if (true) {\n        {\n            return;\n        }\n    }\n};\nvar finish = function finish(key) {\n    if (true) {\n        {\n            return;\n        }\n    }\n};\nvar offsetDraggable = function(_ref) {\n    var draggable = _ref.draggable, offset$1 = _ref.offset, initialWindowScroll = _ref.initialWindowScroll;\n    var client = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.offset)(draggable.client, offset$1);\n    var page = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.withScroll)(client, initialWindowScroll);\n    var moved = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, draggable, {\n        placeholder: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, draggable.placeholder, {\n            client: client\n        }),\n        client: client,\n        page: page\n    });\n    return moved;\n};\nvar getFrame = function(droppable) {\n    var frame = droppable.frame;\n    !frame ?  true ? invariant(false, \"Expected Droppable to have a frame\") : 0 : void 0;\n    return frame;\n};\nvar adjustAdditionsForScrollChanges = function(_ref) {\n    var additions = _ref.additions, updatedDroppables = _ref.updatedDroppables, viewport = _ref.viewport;\n    var windowScrollChange = viewport.scroll.diff.value;\n    return additions.map(function(draggable) {\n        var droppableId = draggable.descriptor.droppableId;\n        var modified = updatedDroppables[droppableId];\n        var frame = getFrame(modified);\n        var droppableScrollChange = frame.scroll.diff.value;\n        var totalChange = add(windowScrollChange, droppableScrollChange);\n        var moved = offsetDraggable({\n            draggable: draggable,\n            offset: totalChange,\n            initialWindowScroll: viewport.scroll.initial\n        });\n        return moved;\n    });\n};\nvar publishWhileDraggingInVirtual = function(_ref) {\n    var state = _ref.state, published = _ref.published;\n    start();\n    var withScrollChange = published.modified.map(function(update) {\n        var existing = state.dimensions.droppables[update.droppableId];\n        var scrolled = scrollDroppable(existing, update.scroll);\n        return scrolled;\n    });\n    var droppables = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, state.dimensions.droppables, {}, toDroppableMap(withScrollChange));\n    var updatedAdditions = toDraggableMap(adjustAdditionsForScrollChanges({\n        additions: published.additions,\n        updatedDroppables: droppables,\n        viewport: state.viewport\n    }));\n    var draggables = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, state.dimensions.draggables, {}, updatedAdditions);\n    published.removals.forEach(function(id) {\n        delete draggables[id];\n    });\n    var dimensions = {\n        droppables: droppables,\n        draggables: draggables\n    };\n    var wasOverId = whatIsDraggedOver(state.impact);\n    var wasOver = wasOverId ? dimensions.droppables[wasOverId] : null;\n    var draggable = dimensions.draggables[state.critical.draggable.id];\n    var home = dimensions.droppables[state.critical.droppable.id];\n    var _getLiftEffect = getLiftEffect({\n        draggable: draggable,\n        home: home,\n        draggables: draggables,\n        viewport: state.viewport\n    }), onLiftImpact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;\n    var previousImpact = wasOver && wasOver.isCombineEnabled ? state.impact : onLiftImpact;\n    var impact = getDragImpact({\n        pageOffset: state.current.page.offset,\n        draggable: dimensions.draggables[state.critical.draggable.id],\n        draggables: dimensions.draggables,\n        droppables: dimensions.droppables,\n        previousImpact: previousImpact,\n        viewport: state.viewport,\n        afterCritical: afterCritical\n    });\n    finish();\n    var draggingState = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n        phase: \"DRAGGING\"\n    }, state, {\n        phase: \"DRAGGING\",\n        impact: impact,\n        onLiftImpact: onLiftImpact,\n        dimensions: dimensions,\n        afterCritical: afterCritical,\n        forceShouldAnimate: false\n    });\n    if (state.phase === \"COLLECTING\") {\n        return draggingState;\n    }\n    var dropPending = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n        phase: \"DROP_PENDING\"\n    }, draggingState, {\n        phase: \"DROP_PENDING\",\n        reason: state.reason,\n        isWaiting: false\n    });\n    return dropPending;\n};\nvar isSnapping = function isSnapping(state) {\n    return state.movementMode === \"SNAP\";\n};\nvar postDroppableChange = function postDroppableChange(state, updated, isEnabledChanging) {\n    var dimensions = patchDimensionMap(state.dimensions, updated);\n    if (!isSnapping(state) || isEnabledChanging) {\n        return update({\n            state: state,\n            dimensions: dimensions\n        });\n    }\n    return refreshSnap({\n        state: state,\n        dimensions: dimensions\n    });\n};\nfunction removeScrollJumpRequest(state) {\n    if (state.isDragging && state.movementMode === \"SNAP\") {\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            phase: \"DRAGGING\"\n        }, state, {\n            scrollJumpRequest: null\n        });\n    }\n    return state;\n}\nvar idle = {\n    phase: \"IDLE\",\n    completed: null,\n    shouldFlush: false\n};\nvar reducer = function(state, action) {\n    if (state === void 0) {\n        state = idle;\n    }\n    if (action.type === \"FLUSH\") {\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, idle, {\n            shouldFlush: true\n        });\n    }\n    if (action.type === \"INITIAL_PUBLISH\") {\n        !(state.phase === \"IDLE\") ?  true ? invariant(false, \"INITIAL_PUBLISH must come after a IDLE phase\") : 0 : void 0;\n        var _action$payload = action.payload, critical = _action$payload.critical, clientSelection = _action$payload.clientSelection, viewport = _action$payload.viewport, dimensions = _action$payload.dimensions, movementMode = _action$payload.movementMode;\n        var draggable = dimensions.draggables[critical.draggable.id];\n        var home = dimensions.droppables[critical.droppable.id];\n        var client = {\n            selection: clientSelection,\n            borderBoxCenter: draggable.client.borderBox.center,\n            offset: origin\n        };\n        var initial = {\n            client: client,\n            page: {\n                selection: add(client.selection, viewport.scroll.initial),\n                borderBoxCenter: add(client.selection, viewport.scroll.initial),\n                offset: add(client.selection, viewport.scroll.diff.value)\n            }\n        };\n        var isWindowScrollAllowed = toDroppableList(dimensions.droppables).every(function(item) {\n            return !item.isFixedOnPage;\n        });\n        var _getLiftEffect = getLiftEffect({\n            draggable: draggable,\n            home: home,\n            draggables: dimensions.draggables,\n            viewport: viewport\n        }), impact = _getLiftEffect.impact, afterCritical = _getLiftEffect.afterCritical;\n        var result = {\n            phase: \"DRAGGING\",\n            isDragging: true,\n            critical: critical,\n            movementMode: movementMode,\n            dimensions: dimensions,\n            initial: initial,\n            current: initial,\n            isWindowScrollAllowed: isWindowScrollAllowed,\n            impact: impact,\n            afterCritical: afterCritical,\n            onLiftImpact: impact,\n            viewport: viewport,\n            scrollJumpRequest: null,\n            forceShouldAnimate: null\n        };\n        return result;\n    }\n    if (action.type === \"COLLECTION_STARTING\") {\n        if (state.phase === \"COLLECTING\" || state.phase === \"DROP_PENDING\") {\n            return state;\n        }\n        !(state.phase === \"DRAGGING\") ?  true ? invariant(false, \"Collection cannot start from phase \" + state.phase) : 0 : void 0;\n        var _result = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            phase: \"COLLECTING\"\n        }, state, {\n            phase: \"COLLECTING\"\n        });\n        return _result;\n    }\n    if (action.type === \"PUBLISH_WHILE_DRAGGING\") {\n        !(state.phase === \"COLLECTING\" || state.phase === \"DROP_PENDING\") ?  true ? invariant(false, \"Unexpected \" + action.type + \" received in phase \" + state.phase) : 0 : void 0;\n        return publishWhileDraggingInVirtual({\n            state: state,\n            published: action.payload\n        });\n    }\n    if (action.type === \"MOVE\") {\n        if (state.phase === \"DROP_PENDING\") {\n            return state;\n        }\n        !isMovementAllowed(state) ?  true ? invariant(false, action.type + \" not permitted in phase \" + state.phase) : 0 : void 0;\n        var _clientSelection = action.payload.client;\n        if (isEqual(_clientSelection, state.current.client.selection)) {\n            return state;\n        }\n        return update({\n            state: state,\n            clientSelection: _clientSelection,\n            impact: isSnapping(state) ? state.impact : null\n        });\n    }\n    if (action.type === \"UPDATE_DROPPABLE_SCROLL\") {\n        if (state.phase === \"DROP_PENDING\") {\n            return removeScrollJumpRequest(state);\n        }\n        if (state.phase === \"COLLECTING\") {\n            return removeScrollJumpRequest(state);\n        }\n        !isMovementAllowed(state) ?  true ? invariant(false, action.type + \" not permitted in phase \" + state.phase) : 0 : void 0;\n        var _action$payload2 = action.payload, id = _action$payload2.id, newScroll = _action$payload2.newScroll;\n        var target = state.dimensions.droppables[id];\n        if (!target) {\n            return state;\n        }\n        var scrolled = scrollDroppable(target, newScroll);\n        return postDroppableChange(state, scrolled, false);\n    }\n    if (action.type === \"UPDATE_DROPPABLE_IS_ENABLED\") {\n        if (state.phase === \"DROP_PENDING\") {\n            return state;\n        }\n        !isMovementAllowed(state) ?  true ? invariant(false, \"Attempting to move in an unsupported phase \" + state.phase) : 0 : void 0;\n        var _action$payload3 = action.payload, _id = _action$payload3.id, isEnabled = _action$payload3.isEnabled;\n        var _target = state.dimensions.droppables[_id];\n        !_target ?  true ? invariant(false, \"Cannot find Droppable[id: \" + _id + \"] to toggle its enabled state\") : 0 : void 0;\n        !(_target.isEnabled !== isEnabled) ?  true ? invariant(false, \"Trying to set droppable isEnabled to \" + String(isEnabled) + \"\\n      but it is already \" + String(_target.isEnabled)) : 0 : void 0;\n        var updated = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, _target, {\n            isEnabled: isEnabled\n        });\n        return postDroppableChange(state, updated, true);\n    }\n    if (action.type === \"UPDATE_DROPPABLE_IS_COMBINE_ENABLED\") {\n        if (state.phase === \"DROP_PENDING\") {\n            return state;\n        }\n        !isMovementAllowed(state) ?  true ? invariant(false, \"Attempting to move in an unsupported phase \" + state.phase) : 0 : void 0;\n        var _action$payload4 = action.payload, _id2 = _action$payload4.id, isCombineEnabled = _action$payload4.isCombineEnabled;\n        var _target2 = state.dimensions.droppables[_id2];\n        !_target2 ?  true ? invariant(false, \"Cannot find Droppable[id: \" + _id2 + \"] to toggle its isCombineEnabled state\") : 0 : void 0;\n        !(_target2.isCombineEnabled !== isCombineEnabled) ?  true ? invariant(false, \"Trying to set droppable isCombineEnabled to \" + String(isCombineEnabled) + \"\\n      but it is already \" + String(_target2.isCombineEnabled)) : 0 : void 0;\n        var _updated = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, _target2, {\n            isCombineEnabled: isCombineEnabled\n        });\n        return postDroppableChange(state, _updated, true);\n    }\n    if (action.type === \"MOVE_BY_WINDOW_SCROLL\") {\n        if (state.phase === \"DROP_PENDING\" || state.phase === \"DROP_ANIMATING\") {\n            return state;\n        }\n        !isMovementAllowed(state) ?  true ? invariant(false, \"Cannot move by window in phase \" + state.phase) : 0 : void 0;\n        !state.isWindowScrollAllowed ?  true ? invariant(false, \"Window scrolling is currently not supported for fixed lists\") : 0 : void 0;\n        var _newScroll = action.payload.newScroll;\n        if (isEqual(state.viewport.scroll.current, _newScroll)) {\n            return removeScrollJumpRequest(state);\n        }\n        var _viewport = scrollViewport(state.viewport, _newScroll);\n        if (isSnapping(state)) {\n            return refreshSnap({\n                state: state,\n                viewport: _viewport\n            });\n        }\n        return update({\n            state: state,\n            viewport: _viewport\n        });\n    }\n    if (action.type === \"UPDATE_VIEWPORT_MAX_SCROLL\") {\n        if (!isMovementAllowed(state)) {\n            return state;\n        }\n        var maxScroll = action.payload.maxScroll;\n        if (isEqual(maxScroll, state.viewport.scroll.max)) {\n            return state;\n        }\n        var withMaxScroll = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, state.viewport, {\n            scroll: (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, state.viewport.scroll, {\n                max: maxScroll\n            })\n        });\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            phase: \"DRAGGING\"\n        }, state, {\n            viewport: withMaxScroll\n        });\n    }\n    if (action.type === \"MOVE_UP\" || action.type === \"MOVE_DOWN\" || action.type === \"MOVE_LEFT\" || action.type === \"MOVE_RIGHT\") {\n        if (state.phase === \"COLLECTING\" || state.phase === \"DROP_PENDING\") {\n            return state;\n        }\n        !(state.phase === \"DRAGGING\") ?  true ? invariant(false, action.type + \" received while not in DRAGGING phase\") : 0 : void 0;\n        var _result2 = moveInDirection({\n            state: state,\n            type: action.type\n        });\n        if (!_result2) {\n            return state;\n        }\n        return update({\n            state: state,\n            impact: _result2.impact,\n            clientSelection: _result2.clientSelection,\n            scrollJumpRequest: _result2.scrollJumpRequest\n        });\n    }\n    if (action.type === \"DROP_PENDING\") {\n        var reason = action.payload.reason;\n        !(state.phase === \"COLLECTING\") ?  true ? invariant(false, \"Can only move into the DROP_PENDING phase from the COLLECTING phase\") : 0 : void 0;\n        var newState = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            phase: \"DROP_PENDING\"\n        }, state, {\n            phase: \"DROP_PENDING\",\n            isWaiting: true,\n            reason: reason\n        });\n        return newState;\n    }\n    if (action.type === \"DROP_ANIMATE\") {\n        var _action$payload5 = action.payload, completed = _action$payload5.completed, dropDuration = _action$payload5.dropDuration, newHomeClientOffset = _action$payload5.newHomeClientOffset;\n        !(state.phase === \"DRAGGING\" || state.phase === \"DROP_PENDING\") ?  true ? invariant(false, \"Cannot animate drop from phase \" + state.phase) : 0 : void 0;\n        var _result3 = {\n            phase: \"DROP_ANIMATING\",\n            completed: completed,\n            dropDuration: dropDuration,\n            newHomeClientOffset: newHomeClientOffset,\n            dimensions: state.dimensions\n        };\n        return _result3;\n    }\n    if (action.type === \"DROP_COMPLETE\") {\n        var _completed = action.payload.completed;\n        return {\n            phase: \"IDLE\",\n            completed: _completed,\n            shouldFlush: false\n        };\n    }\n    return state;\n};\nvar beforeInitialCapture = function beforeInitialCapture(args) {\n    return {\n        type: \"BEFORE_INITIAL_CAPTURE\",\n        payload: args\n    };\n};\nvar lift = function lift(args) {\n    return {\n        type: \"LIFT\",\n        payload: args\n    };\n};\nvar initialPublish = function initialPublish(args) {\n    return {\n        type: \"INITIAL_PUBLISH\",\n        payload: args\n    };\n};\nvar publishWhileDragging = function publishWhileDragging(args) {\n    return {\n        type: \"PUBLISH_WHILE_DRAGGING\",\n        payload: args\n    };\n};\nvar collectionStarting = function collectionStarting() {\n    return {\n        type: \"COLLECTION_STARTING\",\n        payload: null\n    };\n};\nvar updateDroppableScroll = function updateDroppableScroll(args) {\n    return {\n        type: \"UPDATE_DROPPABLE_SCROLL\",\n        payload: args\n    };\n};\nvar updateDroppableIsEnabled = function updateDroppableIsEnabled(args) {\n    return {\n        type: \"UPDATE_DROPPABLE_IS_ENABLED\",\n        payload: args\n    };\n};\nvar updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled(args) {\n    return {\n        type: \"UPDATE_DROPPABLE_IS_COMBINE_ENABLED\",\n        payload: args\n    };\n};\nvar move = function move(args) {\n    return {\n        type: \"MOVE\",\n        payload: args\n    };\n};\nvar moveByWindowScroll = function moveByWindowScroll(args) {\n    return {\n        type: \"MOVE_BY_WINDOW_SCROLL\",\n        payload: args\n    };\n};\nvar updateViewportMaxScroll = function updateViewportMaxScroll(args) {\n    return {\n        type: \"UPDATE_VIEWPORT_MAX_SCROLL\",\n        payload: args\n    };\n};\nvar moveUp = function moveUp() {\n    return {\n        type: \"MOVE_UP\",\n        payload: null\n    };\n};\nvar moveDown = function moveDown() {\n    return {\n        type: \"MOVE_DOWN\",\n        payload: null\n    };\n};\nvar moveRight = function moveRight() {\n    return {\n        type: \"MOVE_RIGHT\",\n        payload: null\n    };\n};\nvar moveLeft = function moveLeft() {\n    return {\n        type: \"MOVE_LEFT\",\n        payload: null\n    };\n};\nvar flush = function flush() {\n    return {\n        type: \"FLUSH\",\n        payload: null\n    };\n};\nvar animateDrop = function animateDrop(args) {\n    return {\n        type: \"DROP_ANIMATE\",\n        payload: args\n    };\n};\nvar completeDrop = function completeDrop(args) {\n    return {\n        type: \"DROP_COMPLETE\",\n        payload: args\n    };\n};\nvar drop = function drop(args) {\n    return {\n        type: \"DROP\",\n        payload: args\n    };\n};\nvar dropPending = function dropPending(args) {\n    return {\n        type: \"DROP_PENDING\",\n        payload: args\n    };\n};\nvar dropAnimationFinished = function dropAnimationFinished() {\n    return {\n        type: \"DROP_ANIMATION_FINISHED\",\n        payload: null\n    };\n};\nfunction checkIndexes(insideDestination) {\n    if (insideDestination.length <= 1) {\n        return;\n    }\n    var indexes = insideDestination.map(function(d) {\n        return d.descriptor.index;\n    });\n    var errors = {};\n    for(var i = 1; i < indexes.length; i++){\n        var current = indexes[i];\n        var previous = indexes[i - 1];\n        if (current !== previous + 1) {\n            errors[current] = true;\n        }\n    }\n    if (!Object.keys(errors).length) {\n        return;\n    }\n    var formatted = indexes.map(function(index) {\n        var hasError = Boolean(errors[index]);\n        return hasError ? \"[\\uD83D\\uDD25\" + index + \"]\" : \"\" + index;\n    }).join(\", \");\n     true ? warning(\"\\n    Detected non-consecutive <Draggable /> indexes.\\n\\n    (This can cause unexpected bugs)\\n\\n    \" + formatted + \"\\n  \") : 0;\n}\nfunction validateDimensions(critical, dimensions) {\n    if (true) {\n        var insideDestination = getDraggablesInsideDroppable(critical.droppable.id, dimensions.draggables);\n        checkIndexes(insideDestination);\n    }\n}\nvar lift$1 = function(marshal) {\n    return function(_ref) {\n        var getState = _ref.getState, dispatch = _ref.dispatch;\n        return function(next) {\n            return function(action) {\n                if (action.type !== \"LIFT\") {\n                    next(action);\n                    return;\n                }\n                var _action$payload = action.payload, id = _action$payload.id, clientSelection = _action$payload.clientSelection, movementMode = _action$payload.movementMode;\n                var initial = getState();\n                if (initial.phase === \"DROP_ANIMATING\") {\n                    dispatch(completeDrop({\n                        completed: initial.completed\n                    }));\n                }\n                !(getState().phase === \"IDLE\") ?  true ? invariant(false, \"Unexpected phase to start a drag\") : 0 : void 0;\n                dispatch(flush());\n                dispatch(beforeInitialCapture({\n                    draggableId: id,\n                    movementMode: movementMode\n                }));\n                var scrollOptions = {\n                    shouldPublishImmediately: movementMode === \"SNAP\"\n                };\n                var request = {\n                    draggableId: id,\n                    scrollOptions: scrollOptions\n                };\n                var _marshal$startPublish = marshal.startPublishing(request), critical = _marshal$startPublish.critical, dimensions = _marshal$startPublish.dimensions, viewport = _marshal$startPublish.viewport;\n                validateDimensions(critical, dimensions);\n                dispatch(initialPublish({\n                    critical: critical,\n                    dimensions: dimensions,\n                    clientSelection: clientSelection,\n                    movementMode: movementMode,\n                    viewport: viewport\n                }));\n            };\n        };\n    };\n};\nvar style = function(marshal) {\n    return function() {\n        return function(next) {\n            return function(action) {\n                if (action.type === \"INITIAL_PUBLISH\") {\n                    marshal.dragging();\n                }\n                if (action.type === \"DROP_ANIMATE\") {\n                    marshal.dropping(action.payload.completed.result.reason);\n                }\n                if (action.type === \"FLUSH\" || action.type === \"DROP_COMPLETE\") {\n                    marshal.resting();\n                }\n                next(action);\n            };\n        };\n    };\n};\nvar curves = {\n    outOfTheWay: \"cubic-bezier(0.2, 0, 0, 1)\",\n    drop: \"cubic-bezier(.2,1,.1,1)\"\n};\nvar combine = {\n    opacity: {\n        drop: 0,\n        combining: 0.7\n    },\n    scale: {\n        drop: 0.75\n    }\n};\nvar timings = {\n    outOfTheWay: 0.2,\n    minDropTime: 0.33,\n    maxDropTime: 0.55\n};\nvar outOfTheWayTiming = timings.outOfTheWay + \"s \" + curves.outOfTheWay;\nvar transitions = {\n    fluid: \"opacity \" + outOfTheWayTiming,\n    snap: \"transform \" + outOfTheWayTiming + \", opacity \" + outOfTheWayTiming,\n    drop: function drop(duration) {\n        var timing = duration + \"s \" + curves.drop;\n        return \"transform \" + timing + \", opacity \" + timing;\n    },\n    outOfTheWay: \"transform \" + outOfTheWayTiming,\n    placeholder: \"height \" + outOfTheWayTiming + \", width \" + outOfTheWayTiming + \", margin \" + outOfTheWayTiming\n};\nvar moveTo = function moveTo(offset) {\n    return isEqual(offset, origin) ? null : \"translate(\" + offset.x + \"px, \" + offset.y + \"px)\";\n};\nvar transforms = {\n    moveTo: moveTo,\n    drop: function drop(offset, isCombining) {\n        var translate = moveTo(offset);\n        if (!translate) {\n            return null;\n        }\n        if (!isCombining) {\n            return translate;\n        }\n        return translate + \" scale(\" + combine.scale.drop + \")\";\n    }\n};\nvar minDropTime = timings.minDropTime, maxDropTime = timings.maxDropTime;\nvar dropTimeRange = maxDropTime - minDropTime;\nvar maxDropTimeAtDistance = 1500;\nvar cancelDropModifier = 0.6;\nvar getDropDuration = function(_ref) {\n    var current = _ref.current, destination = _ref.destination, reason = _ref.reason;\n    var distance$1 = distance(current, destination);\n    if (distance$1 <= 0) {\n        return minDropTime;\n    }\n    if (distance$1 >= maxDropTimeAtDistance) {\n        return maxDropTime;\n    }\n    var percentage = distance$1 / maxDropTimeAtDistance;\n    var duration = minDropTime + dropTimeRange * percentage;\n    var withDuration = reason === \"CANCEL\" ? duration * cancelDropModifier : duration;\n    return Number(withDuration.toFixed(2));\n};\nvar getNewHomeClientOffset = function(_ref) {\n    var impact = _ref.impact, draggable = _ref.draggable, dimensions = _ref.dimensions, viewport = _ref.viewport, afterCritical = _ref.afterCritical;\n    var draggables = dimensions.draggables, droppables = dimensions.droppables;\n    var droppableId = whatIsDraggedOver(impact);\n    var destination = droppableId ? droppables[droppableId] : null;\n    var home = droppables[draggable.descriptor.droppableId];\n    var newClientCenter = getClientBorderBoxCenter({\n        impact: impact,\n        draggable: draggable,\n        draggables: draggables,\n        afterCritical: afterCritical,\n        droppable: destination || home,\n        viewport: viewport\n    });\n    var offset = subtract(newClientCenter, draggable.client.borderBox.center);\n    return offset;\n};\nvar getDropImpact = function(_ref) {\n    var draggables = _ref.draggables, reason = _ref.reason, lastImpact = _ref.lastImpact, home = _ref.home, viewport = _ref.viewport, onLiftImpact = _ref.onLiftImpact;\n    if (!lastImpact.at || reason !== \"DROP\") {\n        var recomputedHomeImpact = recompute({\n            draggables: draggables,\n            impact: onLiftImpact,\n            destination: home,\n            viewport: viewport,\n            forceShouldAnimate: true\n        });\n        return {\n            impact: recomputedHomeImpact,\n            didDropInsideDroppable: false\n        };\n    }\n    if (lastImpact.at.type === \"REORDER\") {\n        return {\n            impact: lastImpact,\n            didDropInsideDroppable: true\n        };\n    }\n    var withoutMovement = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, lastImpact, {\n        displaced: emptyGroups\n    });\n    return {\n        impact: withoutMovement,\n        didDropInsideDroppable: true\n    };\n};\nvar drop$1 = function(_ref) {\n    var getState = _ref.getState, dispatch = _ref.dispatch;\n    return function(next) {\n        return function(action) {\n            if (action.type !== \"DROP\") {\n                next(action);\n                return;\n            }\n            var state = getState();\n            var reason = action.payload.reason;\n            if (state.phase === \"COLLECTING\") {\n                dispatch(dropPending({\n                    reason: reason\n                }));\n                return;\n            }\n            if (state.phase === \"IDLE\") {\n                return;\n            }\n            var isWaitingForDrop = state.phase === \"DROP_PENDING\" && state.isWaiting;\n            !!isWaitingForDrop ?  true ? invariant(false, \"A DROP action occurred while DROP_PENDING and still waiting\") : 0 : void 0;\n            !(state.phase === \"DRAGGING\" || state.phase === \"DROP_PENDING\") ?  true ? invariant(false, \"Cannot drop in phase: \" + state.phase) : 0 : void 0;\n            var critical = state.critical;\n            var dimensions = state.dimensions;\n            var draggable = dimensions.draggables[state.critical.draggable.id];\n            var _getDropImpact = getDropImpact({\n                reason: reason,\n                lastImpact: state.impact,\n                afterCritical: state.afterCritical,\n                onLiftImpact: state.onLiftImpact,\n                home: state.dimensions.droppables[state.critical.droppable.id],\n                viewport: state.viewport,\n                draggables: state.dimensions.draggables\n            }), impact = _getDropImpact.impact, didDropInsideDroppable = _getDropImpact.didDropInsideDroppable;\n            var destination = didDropInsideDroppable ? tryGetDestination(impact) : null;\n            var combine = didDropInsideDroppable ? tryGetCombine(impact) : null;\n            var source = {\n                index: critical.draggable.index,\n                droppableId: critical.droppable.id\n            };\n            var result = {\n                draggableId: draggable.descriptor.id,\n                type: draggable.descriptor.type,\n                source: source,\n                reason: reason,\n                mode: state.movementMode,\n                destination: destination,\n                combine: combine\n            };\n            var newHomeClientOffset = getNewHomeClientOffset({\n                impact: impact,\n                draggable: draggable,\n                dimensions: dimensions,\n                viewport: state.viewport,\n                afterCritical: state.afterCritical\n            });\n            var completed = {\n                critical: state.critical,\n                afterCritical: state.afterCritical,\n                result: result,\n                impact: impact\n            };\n            var isAnimationRequired = !isEqual(state.current.client.offset, newHomeClientOffset) || Boolean(result.combine);\n            if (!isAnimationRequired) {\n                dispatch(completeDrop({\n                    completed: completed\n                }));\n                return;\n            }\n            var dropDuration = getDropDuration({\n                current: state.current.client.offset,\n                destination: newHomeClientOffset,\n                reason: reason\n            });\n            var args = {\n                newHomeClientOffset: newHomeClientOffset,\n                dropDuration: dropDuration,\n                completed: completed\n            };\n            dispatch(animateDrop(args));\n        };\n    };\n};\nvar getWindowScroll = function() {\n    return {\n        x: window.pageXOffset,\n        y: window.pageYOffset\n    };\n};\nfunction getWindowScrollBinding(update) {\n    return {\n        eventName: \"scroll\",\n        options: {\n            passive: true,\n            capture: false\n        },\n        fn: function fn(event) {\n            if (event.target !== window && event.target !== window.document) {\n                return;\n            }\n            update();\n        }\n    };\n}\nfunction getScrollListener(_ref) {\n    var onWindowScroll = _ref.onWindowScroll;\n    function updateScroll() {\n        onWindowScroll(getWindowScroll());\n    }\n    var scheduled = (0,raf_schd__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(updateScroll);\n    var binding = getWindowScrollBinding(scheduled);\n    var unbind = noop;\n    function isActive() {\n        return unbind !== noop;\n    }\n    function start() {\n        !!isActive() ?  true ? invariant(false, \"Cannot start scroll listener when already active\") : 0 : void 0;\n        unbind = bindEvents(window, [\n            binding\n        ]);\n    }\n    function stop() {\n        !isActive() ?  true ? invariant(false, \"Cannot stop scroll listener when not active\") : 0 : void 0;\n        scheduled.cancel();\n        unbind();\n        unbind = noop;\n    }\n    return {\n        start: start,\n        stop: stop,\n        isActive: isActive\n    };\n}\nvar shouldEnd = function shouldEnd(action) {\n    return action.type === \"DROP_COMPLETE\" || action.type === \"DROP_ANIMATE\" || action.type === \"FLUSH\";\n};\nvar scrollListener = function(store) {\n    var listener = getScrollListener({\n        onWindowScroll: function onWindowScroll(newScroll) {\n            store.dispatch(moveByWindowScroll({\n                newScroll: newScroll\n            }));\n        }\n    });\n    return function(next) {\n        return function(action) {\n            if (!listener.isActive() && action.type === \"INITIAL_PUBLISH\") {\n                listener.start();\n            }\n            if (listener.isActive() && shouldEnd(action)) {\n                listener.stop();\n            }\n            next(action);\n        };\n    };\n};\nvar getExpiringAnnounce = function(announce) {\n    var wasCalled = false;\n    var isExpired = false;\n    var timeoutId = setTimeout(function() {\n        isExpired = true;\n    });\n    var result = function result(message) {\n        if (wasCalled) {\n             true ? warning(\"Announcement already made. Not making a second announcement\") : 0;\n            return;\n        }\n        if (isExpired) {\n             true ? warning(\"\\n        Announcements cannot be made asynchronously.\\n        Default message has already been announced.\\n      \") : 0;\n            return;\n        }\n        wasCalled = true;\n        announce(message);\n        clearTimeout(timeoutId);\n    };\n    result.wasCalled = function() {\n        return wasCalled;\n    };\n    return result;\n};\nvar getAsyncMarshal = function() {\n    var entries = [];\n    var execute = function execute(timerId) {\n        var index = findIndex(entries, function(item) {\n            return item.timerId === timerId;\n        });\n        !(index !== -1) ?  true ? invariant(false, \"Could not find timer\") : 0 : void 0;\n        var _entries$splice = entries.splice(index, 1), entry = _entries$splice[0];\n        entry.callback();\n    };\n    var add = function add(fn) {\n        var timerId = setTimeout(function() {\n            return execute(timerId);\n        });\n        var entry = {\n            timerId: timerId,\n            callback: fn\n        };\n        entries.push(entry);\n    };\n    var flush = function flush() {\n        if (!entries.length) {\n            return;\n        }\n        var shallow = [].concat(entries);\n        entries.length = 0;\n        shallow.forEach(function(entry) {\n            clearTimeout(entry.timerId);\n            entry.callback();\n        });\n    };\n    return {\n        add: add,\n        flush: flush\n    };\n};\nvar areLocationsEqual = function areLocationsEqual(first, second) {\n    if (first == null && second == null) {\n        return true;\n    }\n    if (first == null || second == null) {\n        return false;\n    }\n    return first.droppableId === second.droppableId && first.index === second.index;\n};\nvar isCombineEqual = function isCombineEqual(first, second) {\n    if (first == null && second == null) {\n        return true;\n    }\n    if (first == null || second == null) {\n        return false;\n    }\n    return first.draggableId === second.draggableId && first.droppableId === second.droppableId;\n};\nvar isCriticalEqual = function isCriticalEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    var isDraggableEqual = first.draggable.id === second.draggable.id && first.draggable.droppableId === second.draggable.droppableId && first.draggable.type === second.draggable.type && first.draggable.index === second.draggable.index;\n    var isDroppableEqual = first.droppable.id === second.droppable.id && first.droppable.type === second.droppable.type;\n    return isDraggableEqual && isDroppableEqual;\n};\nvar withTimings = function withTimings(key, fn) {\n    start();\n    fn();\n    finish();\n};\nvar getDragStart = function getDragStart(critical, mode) {\n    return {\n        draggableId: critical.draggable.id,\n        type: critical.droppable.type,\n        source: {\n            droppableId: critical.droppable.id,\n            index: critical.draggable.index\n        },\n        mode: mode\n    };\n};\nvar execute = function execute(responder, data, announce, getDefaultMessage) {\n    if (!responder) {\n        announce(getDefaultMessage(data));\n        return;\n    }\n    var willExpire = getExpiringAnnounce(announce);\n    var provided = {\n        announce: willExpire\n    };\n    responder(data, provided);\n    if (!willExpire.wasCalled()) {\n        announce(getDefaultMessage(data));\n    }\n};\nvar getPublisher = function(getResponders, announce) {\n    var asyncMarshal = getAsyncMarshal();\n    var dragging = null;\n    var beforeCapture = function beforeCapture(draggableId, mode) {\n        !!dragging ?  true ? invariant(false, \"Cannot fire onBeforeCapture as a drag start has already been published\") : 0 : void 0;\n        withTimings(\"onBeforeCapture\", function() {\n            var fn = getResponders().onBeforeCapture;\n            if (fn) {\n                var before = {\n                    draggableId: draggableId,\n                    mode: mode\n                };\n                fn(before);\n            }\n        });\n    };\n    var beforeStart = function beforeStart(critical, mode) {\n        !!dragging ?  true ? invariant(false, \"Cannot fire onBeforeDragStart as a drag start has already been published\") : 0 : void 0;\n        withTimings(\"onBeforeDragStart\", function() {\n            var fn = getResponders().onBeforeDragStart;\n            if (fn) {\n                fn(getDragStart(critical, mode));\n            }\n        });\n    };\n    var start = function start(critical, mode) {\n        !!dragging ?  true ? invariant(false, \"Cannot fire onBeforeDragStart as a drag start has already been published\") : 0 : void 0;\n        var data = getDragStart(critical, mode);\n        dragging = {\n            mode: mode,\n            lastCritical: critical,\n            lastLocation: data.source,\n            lastCombine: null\n        };\n        asyncMarshal.add(function() {\n            withTimings(\"onDragStart\", function() {\n                return execute(getResponders().onDragStart, data, announce, preset.onDragStart);\n            });\n        });\n    };\n    var update = function update(critical, impact) {\n        var location = tryGetDestination(impact);\n        var combine = tryGetCombine(impact);\n        !dragging ?  true ? invariant(false, \"Cannot fire onDragMove when onDragStart has not been called\") : 0 : void 0;\n        var hasCriticalChanged = !isCriticalEqual(critical, dragging.lastCritical);\n        if (hasCriticalChanged) {\n            dragging.lastCritical = critical;\n        }\n        var hasLocationChanged = !areLocationsEqual(dragging.lastLocation, location);\n        if (hasLocationChanged) {\n            dragging.lastLocation = location;\n        }\n        var hasGroupingChanged = !isCombineEqual(dragging.lastCombine, combine);\n        if (hasGroupingChanged) {\n            dragging.lastCombine = combine;\n        }\n        if (!hasCriticalChanged && !hasLocationChanged && !hasGroupingChanged) {\n            return;\n        }\n        var data = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, getDragStart(critical, dragging.mode), {\n            combine: combine,\n            destination: location\n        });\n        asyncMarshal.add(function() {\n            withTimings(\"onDragUpdate\", function() {\n                return execute(getResponders().onDragUpdate, data, announce, preset.onDragUpdate);\n            });\n        });\n    };\n    var flush = function flush() {\n        !dragging ?  true ? invariant(false, \"Can only flush responders while dragging\") : 0 : void 0;\n        asyncMarshal.flush();\n    };\n    var drop = function drop(result) {\n        !dragging ?  true ? invariant(false, \"Cannot fire onDragEnd when there is no matching onDragStart\") : 0 : void 0;\n        dragging = null;\n        withTimings(\"onDragEnd\", function() {\n            return execute(getResponders().onDragEnd, result, announce, preset.onDragEnd);\n        });\n    };\n    var abort = function abort() {\n        if (!dragging) {\n            return;\n        }\n        var result = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, getDragStart(dragging.lastCritical, dragging.mode), {\n            combine: null,\n            destination: null,\n            reason: \"CANCEL\"\n        });\n        drop(result);\n    };\n    return {\n        beforeCapture: beforeCapture,\n        beforeStart: beforeStart,\n        start: start,\n        update: update,\n        flush: flush,\n        drop: drop,\n        abort: abort\n    };\n};\nvar responders = function(getResponders, announce) {\n    var publisher = getPublisher(getResponders, announce);\n    return function(store) {\n        return function(next) {\n            return function(action) {\n                if (action.type === \"BEFORE_INITIAL_CAPTURE\") {\n                    publisher.beforeCapture(action.payload.draggableId, action.payload.movementMode);\n                    return;\n                }\n                if (action.type === \"INITIAL_PUBLISH\") {\n                    var critical = action.payload.critical;\n                    publisher.beforeStart(critical, action.payload.movementMode);\n                    next(action);\n                    publisher.start(critical, action.payload.movementMode);\n                    return;\n                }\n                if (action.type === \"DROP_COMPLETE\") {\n                    var result = action.payload.completed.result;\n                    publisher.flush();\n                    next(action);\n                    publisher.drop(result);\n                    return;\n                }\n                next(action);\n                if (action.type === \"FLUSH\") {\n                    publisher.abort();\n                    return;\n                }\n                var state = store.getState();\n                if (state.phase === \"DRAGGING\") {\n                    publisher.update(state.critical, state.impact);\n                }\n            };\n        };\n    };\n};\nvar dropAnimationFinish = function(store) {\n    return function(next) {\n        return function(action) {\n            if (action.type !== \"DROP_ANIMATION_FINISHED\") {\n                next(action);\n                return;\n            }\n            var state = store.getState();\n            !(state.phase === \"DROP_ANIMATING\") ?  true ? invariant(false, \"Cannot finish a drop animating when no drop is occurring\") : 0 : void 0;\n            store.dispatch(completeDrop({\n                completed: state.completed\n            }));\n        };\n    };\n};\nvar dropAnimationFlushOnScroll = function(store) {\n    var unbind = null;\n    var frameId = null;\n    function clear() {\n        if (frameId) {\n            cancelAnimationFrame(frameId);\n            frameId = null;\n        }\n        if (unbind) {\n            unbind();\n            unbind = null;\n        }\n    }\n    return function(next) {\n        return function(action) {\n            if (action.type === \"FLUSH\" || action.type === \"DROP_COMPLETE\" || action.type === \"DROP_ANIMATION_FINISHED\") {\n                clear();\n            }\n            next(action);\n            if (action.type !== \"DROP_ANIMATE\") {\n                return;\n            }\n            var binding = {\n                eventName: \"scroll\",\n                options: {\n                    capture: true,\n                    passive: false,\n                    once: true\n                },\n                fn: function flushDropAnimation() {\n                    var state = store.getState();\n                    if (state.phase === \"DROP_ANIMATING\") {\n                        store.dispatch(dropAnimationFinished());\n                    }\n                }\n            };\n            frameId = requestAnimationFrame(function() {\n                frameId = null;\n                unbind = bindEvents(window, [\n                    binding\n                ]);\n            });\n        };\n    };\n};\nvar dimensionMarshalStopper = function(marshal) {\n    return function() {\n        return function(next) {\n            return function(action) {\n                if (action.type === \"DROP_COMPLETE\" || action.type === \"FLUSH\" || action.type === \"DROP_ANIMATE\") {\n                    marshal.stopPublishing();\n                }\n                next(action);\n            };\n        };\n    };\n};\nvar focus = function(marshal) {\n    var isWatching = false;\n    return function() {\n        return function(next) {\n            return function(action) {\n                if (action.type === \"INITIAL_PUBLISH\") {\n                    isWatching = true;\n                    marshal.tryRecordFocus(action.payload.critical.draggable.id);\n                    next(action);\n                    marshal.tryRestoreFocusRecorded();\n                    return;\n                }\n                next(action);\n                if (!isWatching) {\n                    return;\n                }\n                if (action.type === \"FLUSH\") {\n                    isWatching = false;\n                    marshal.tryRestoreFocusRecorded();\n                    return;\n                }\n                if (action.type === \"DROP_COMPLETE\") {\n                    isWatching = false;\n                    var result = action.payload.completed.result;\n                    if (result.combine) {\n                        marshal.tryShiftRecord(result.draggableId, result.combine.draggableId);\n                    }\n                    marshal.tryRestoreFocusRecorded();\n                }\n            };\n        };\n    };\n};\nvar shouldStop = function shouldStop(action) {\n    return action.type === \"DROP_COMPLETE\" || action.type === \"DROP_ANIMATE\" || action.type === \"FLUSH\";\n};\nvar autoScroll = function(autoScroller) {\n    return function(store) {\n        return function(next) {\n            return function(action) {\n                if (shouldStop(action)) {\n                    autoScroller.stop();\n                    next(action);\n                    return;\n                }\n                if (action.type === \"INITIAL_PUBLISH\") {\n                    next(action);\n                    var state = store.getState();\n                    !(state.phase === \"DRAGGING\") ?  true ? invariant(false, \"Expected phase to be DRAGGING after INITIAL_PUBLISH\") : 0 : void 0;\n                    autoScroller.start(state);\n                    return;\n                }\n                next(action);\n                autoScroller.scroll(store.getState());\n            };\n        };\n    };\n};\nvar pendingDrop = function(store) {\n    return function(next) {\n        return function(action) {\n            next(action);\n            if (action.type !== \"PUBLISH_WHILE_DRAGGING\") {\n                return;\n            }\n            var postActionState = store.getState();\n            if (postActionState.phase !== \"DROP_PENDING\") {\n                return;\n            }\n            if (postActionState.isWaiting) {\n                return;\n            }\n            store.dispatch(drop({\n                reason: postActionState.reason\n            }));\n        };\n    };\n};\nvar composeEnhancers =  false ? 0 : redux__WEBPACK_IMPORTED_MODULE_8__.compose;\nvar createStore = function(_ref) {\n    var dimensionMarshal = _ref.dimensionMarshal, focusMarshal = _ref.focusMarshal, styleMarshal = _ref.styleMarshal, getResponders = _ref.getResponders, announce = _ref.announce, autoScroller = _ref.autoScroller;\n    return (0,redux__WEBPACK_IMPORTED_MODULE_8__.createStore)(reducer, composeEnhancers((0,redux__WEBPACK_IMPORTED_MODULE_8__.applyMiddleware)(style(styleMarshal), dimensionMarshalStopper(dimensionMarshal), lift$1(dimensionMarshal), drop$1, dropAnimationFinish, dropAnimationFlushOnScroll, pendingDrop, autoScroll(autoScroller), scrollListener, focus(focusMarshal), responders(getResponders, announce))));\n};\nvar clean$1 = function clean() {\n    return {\n        additions: {},\n        removals: {},\n        modified: {}\n    };\n};\nfunction createPublisher(_ref) {\n    var registry = _ref.registry, callbacks = _ref.callbacks;\n    var staging = clean$1();\n    var frameId = null;\n    var collect = function collect() {\n        if (frameId) {\n            return;\n        }\n        callbacks.collectionStarting();\n        frameId = requestAnimationFrame(function() {\n            frameId = null;\n            start();\n            var _staging = staging, additions = _staging.additions, removals = _staging.removals, modified = _staging.modified;\n            var added = Object.keys(additions).map(function(id) {\n                return registry.draggable.getById(id).getDimension(origin);\n            }).sort(function(a, b) {\n                return a.descriptor.index - b.descriptor.index;\n            });\n            var updated = Object.keys(modified).map(function(id) {\n                var entry = registry.droppable.getById(id);\n                var scroll = entry.callbacks.getScrollWhileDragging();\n                return {\n                    droppableId: id,\n                    scroll: scroll\n                };\n            });\n            var result = {\n                additions: added,\n                removals: Object.keys(removals),\n                modified: updated\n            };\n            staging = clean$1();\n            finish();\n            callbacks.publish(result);\n        });\n    };\n    var add = function add(entry) {\n        var id = entry.descriptor.id;\n        staging.additions[id] = entry;\n        staging.modified[entry.descriptor.droppableId] = true;\n        if (staging.removals[id]) {\n            delete staging.removals[id];\n        }\n        collect();\n    };\n    var remove = function remove(entry) {\n        var descriptor = entry.descriptor;\n        staging.removals[descriptor.id] = true;\n        staging.modified[descriptor.droppableId] = true;\n        if (staging.additions[descriptor.id]) {\n            delete staging.additions[descriptor.id];\n        }\n        collect();\n    };\n    var stop = function stop() {\n        if (!frameId) {\n            return;\n        }\n        cancelAnimationFrame(frameId);\n        frameId = null;\n        staging = clean$1();\n    };\n    return {\n        add: add,\n        remove: remove,\n        stop: stop\n    };\n}\nvar getMaxScroll = function(_ref) {\n    var scrollHeight = _ref.scrollHeight, scrollWidth = _ref.scrollWidth, height = _ref.height, width = _ref.width;\n    var maxScroll = subtract({\n        x: scrollWidth,\n        y: scrollHeight\n    }, {\n        x: width,\n        y: height\n    });\n    var adjustedMaxScroll = {\n        x: Math.max(0, maxScroll.x),\n        y: Math.max(0, maxScroll.y)\n    };\n    return adjustedMaxScroll;\n};\nvar getDocumentElement = function() {\n    var doc = document.documentElement;\n    !doc ?  true ? invariant(false, \"Cannot find document.documentElement\") : 0 : void 0;\n    return doc;\n};\nvar getMaxWindowScroll = function() {\n    var doc = getDocumentElement();\n    var maxScroll = getMaxScroll({\n        scrollHeight: doc.scrollHeight,\n        scrollWidth: doc.scrollWidth,\n        width: doc.clientWidth,\n        height: doc.clientHeight\n    });\n    return maxScroll;\n};\nvar getViewport = function() {\n    var scroll = getWindowScroll();\n    var maxScroll = getMaxWindowScroll();\n    var top = scroll.y;\n    var left = scroll.x;\n    var doc = getDocumentElement();\n    var width = doc.clientWidth;\n    var height = doc.clientHeight;\n    var right = left + width;\n    var bottom = top + height;\n    var frame = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getRect)({\n        top: top,\n        left: left,\n        right: right,\n        bottom: bottom\n    });\n    var viewport = {\n        frame: frame,\n        scroll: {\n            initial: scroll,\n            current: scroll,\n            max: maxScroll,\n            diff: {\n                value: origin,\n                displacement: origin\n            }\n        }\n    };\n    return viewport;\n};\nvar getInitialPublish = function(_ref) {\n    var critical = _ref.critical, scrollOptions = _ref.scrollOptions, registry = _ref.registry;\n    start();\n    var viewport = getViewport();\n    var windowScroll = viewport.scroll.current;\n    var home = critical.droppable;\n    var droppables = registry.droppable.getAllByType(home.type).map(function(entry) {\n        return entry.callbacks.getDimensionAndWatchScroll(windowScroll, scrollOptions);\n    });\n    var draggables = registry.draggable.getAllByType(critical.draggable.type).map(function(entry) {\n        return entry.getDimension(windowScroll);\n    });\n    var dimensions = {\n        draggables: toDraggableMap(draggables),\n        droppables: toDroppableMap(droppables)\n    };\n    finish();\n    var result = {\n        dimensions: dimensions,\n        critical: critical,\n        viewport: viewport\n    };\n    return result;\n};\nfunction shouldPublishUpdate(registry, dragging, entry) {\n    if (entry.descriptor.id === dragging.id) {\n        return false;\n    }\n    if (entry.descriptor.type !== dragging.type) {\n        return false;\n    }\n    var home = registry.droppable.getById(entry.descriptor.droppableId);\n    if (home.descriptor.mode !== \"virtual\") {\n         true ? warning(\"\\n      You are attempting to add or remove a Draggable [id: \" + entry.descriptor.id + \"]\\n      while a drag is occurring. This is only supported for virtual lists.\\n\\n      See https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/virtual-lists.md\\n    \") : 0;\n        return false;\n    }\n    return true;\n}\nvar createDimensionMarshal = function(registry, callbacks) {\n    var collection = null;\n    var publisher = createPublisher({\n        callbacks: {\n            publish: callbacks.publishWhileDragging,\n            collectionStarting: callbacks.collectionStarting\n        },\n        registry: registry\n    });\n    var updateDroppableIsEnabled = function updateDroppableIsEnabled(id, isEnabled) {\n        !registry.droppable.exists(id) ?  true ? invariant(false, \"Cannot update is enabled flag of Droppable \" + id + \" as it is not registered\") : 0 : void 0;\n        if (!collection) {\n            return;\n        }\n        callbacks.updateDroppableIsEnabled({\n            id: id,\n            isEnabled: isEnabled\n        });\n    };\n    var updateDroppableIsCombineEnabled = function updateDroppableIsCombineEnabled(id, isCombineEnabled) {\n        if (!collection) {\n            return;\n        }\n        !registry.droppable.exists(id) ?  true ? invariant(false, \"Cannot update isCombineEnabled flag of Droppable \" + id + \" as it is not registered\") : 0 : void 0;\n        callbacks.updateDroppableIsCombineEnabled({\n            id: id,\n            isCombineEnabled: isCombineEnabled\n        });\n    };\n    var updateDroppableScroll = function updateDroppableScroll(id, newScroll) {\n        if (!collection) {\n            return;\n        }\n        !registry.droppable.exists(id) ?  true ? invariant(false, \"Cannot update the scroll on Droppable \" + id + \" as it is not registered\") : 0 : void 0;\n        callbacks.updateDroppableScroll({\n            id: id,\n            newScroll: newScroll\n        });\n    };\n    var scrollDroppable = function scrollDroppable(id, change) {\n        if (!collection) {\n            return;\n        }\n        registry.droppable.getById(id).callbacks.scroll(change);\n    };\n    var stopPublishing = function stopPublishing() {\n        if (!collection) {\n            return;\n        }\n        publisher.stop();\n        var home = collection.critical.droppable;\n        registry.droppable.getAllByType(home.type).forEach(function(entry) {\n            return entry.callbacks.dragStopped();\n        });\n        collection.unsubscribe();\n        collection = null;\n    };\n    var subscriber = function subscriber(event) {\n        !collection ?  true ? invariant(false, \"Should only be subscribed when a collection is occurring\") : 0 : void 0;\n        var dragging = collection.critical.draggable;\n        if (event.type === \"ADDITION\") {\n            if (shouldPublishUpdate(registry, dragging, event.value)) {\n                publisher.add(event.value);\n            }\n        }\n        if (event.type === \"REMOVAL\") {\n            if (shouldPublishUpdate(registry, dragging, event.value)) {\n                publisher.remove(event.value);\n            }\n        }\n    };\n    var startPublishing = function startPublishing(request) {\n        !!collection ?  true ? invariant(false, \"Cannot start capturing critical dimensions as there is already a collection\") : 0 : void 0;\n        var entry = registry.draggable.getById(request.draggableId);\n        var home = registry.droppable.getById(entry.descriptor.droppableId);\n        var critical = {\n            draggable: entry.descriptor,\n            droppable: home.descriptor\n        };\n        var unsubscribe = registry.subscribe(subscriber);\n        collection = {\n            critical: critical,\n            unsubscribe: unsubscribe\n        };\n        return getInitialPublish({\n            critical: critical,\n            registry: registry,\n            scrollOptions: request.scrollOptions\n        });\n    };\n    var marshal = {\n        updateDroppableIsEnabled: updateDroppableIsEnabled,\n        updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled,\n        scrollDroppable: scrollDroppable,\n        updateDroppableScroll: updateDroppableScroll,\n        startPublishing: startPublishing,\n        stopPublishing: stopPublishing\n    };\n    return marshal;\n};\nvar canStartDrag = function(state, id) {\n    if (state.phase === \"IDLE\") {\n        return true;\n    }\n    if (state.phase !== \"DROP_ANIMATING\") {\n        return false;\n    }\n    if (state.completed.result.draggableId === id) {\n        return false;\n    }\n    return state.completed.result.reason === \"DROP\";\n};\nvar scrollWindow = function(change) {\n    window.scrollBy(change.x, change.y);\n};\nvar getScrollableDroppables = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(droppables) {\n    return toDroppableList(droppables).filter(function(droppable) {\n        if (!droppable.isEnabled) {\n            return false;\n        }\n        if (!droppable.frame) {\n            return false;\n        }\n        return true;\n    });\n});\nvar getScrollableDroppableOver = function getScrollableDroppableOver(target, droppables) {\n    var maybe = find(getScrollableDroppables(droppables), function(droppable) {\n        !droppable.frame ?  true ? invariant(false, \"Invalid result\") : 0 : void 0;\n        return isPositionInFrame(droppable.frame.pageMarginBox)(target);\n    });\n    return maybe;\n};\nvar getBestScrollableDroppable = function(_ref) {\n    var center = _ref.center, destination = _ref.destination, droppables = _ref.droppables;\n    if (destination) {\n        var _dimension = droppables[destination];\n        if (!_dimension.frame) {\n            return null;\n        }\n        return _dimension;\n    }\n    var dimension = getScrollableDroppableOver(center, droppables);\n    return dimension;\n};\nvar config = {\n    startFromPercentage: 0.25,\n    maxScrollAtPercentage: 0.05,\n    maxPixelScroll: 28,\n    ease: function ease(percentage) {\n        return Math.pow(percentage, 2);\n    },\n    durationDampening: {\n        stopDampeningAt: 1200,\n        accelerateAt: 360\n    }\n};\nvar getDistanceThresholds = function(container, axis) {\n    var startScrollingFrom = container[axis.size] * config.startFromPercentage;\n    var maxScrollValueAt = container[axis.size] * config.maxScrollAtPercentage;\n    var thresholds = {\n        startScrollingFrom: startScrollingFrom,\n        maxScrollValueAt: maxScrollValueAt\n    };\n    return thresholds;\n};\nvar getPercentage = function(_ref) {\n    var startOfRange = _ref.startOfRange, endOfRange = _ref.endOfRange, current = _ref.current;\n    var range = endOfRange - startOfRange;\n    if (range === 0) {\n         true ? warning(\"\\n      Detected distance range of 0 in the fluid auto scroller\\n      This is unexpected and would cause a divide by 0 issue.\\n      Not allowing an auto scroll\\n    \") : 0;\n        return 0;\n    }\n    var currentInRange = current - startOfRange;\n    var percentage = currentInRange / range;\n    return percentage;\n};\nvar minScroll = 1;\nvar getValueFromDistance = function(distanceToEdge, thresholds) {\n    if (distanceToEdge > thresholds.startScrollingFrom) {\n        return 0;\n    }\n    if (distanceToEdge <= thresholds.maxScrollValueAt) {\n        return config.maxPixelScroll;\n    }\n    if (distanceToEdge === thresholds.startScrollingFrom) {\n        return minScroll;\n    }\n    var percentageFromMaxScrollValueAt = getPercentage({\n        startOfRange: thresholds.maxScrollValueAt,\n        endOfRange: thresholds.startScrollingFrom,\n        current: distanceToEdge\n    });\n    var percentageFromStartScrollingFrom = 1 - percentageFromMaxScrollValueAt;\n    var scroll = config.maxPixelScroll * config.ease(percentageFromStartScrollingFrom);\n    return Math.ceil(scroll);\n};\nvar accelerateAt = config.durationDampening.accelerateAt;\nvar stopAt = config.durationDampening.stopDampeningAt;\nvar dampenValueByTime = function(proposedScroll, dragStartTime) {\n    var startOfRange = dragStartTime;\n    var endOfRange = stopAt;\n    var now = Date.now();\n    var runTime = now - startOfRange;\n    if (runTime >= stopAt) {\n        return proposedScroll;\n    }\n    if (runTime < accelerateAt) {\n        return minScroll;\n    }\n    var betweenAccelerateAtAndStopAtPercentage = getPercentage({\n        startOfRange: accelerateAt,\n        endOfRange: endOfRange,\n        current: runTime\n    });\n    var scroll = proposedScroll * config.ease(betweenAccelerateAtAndStopAtPercentage);\n    return Math.ceil(scroll);\n};\nvar getValue = function(_ref) {\n    var distanceToEdge = _ref.distanceToEdge, thresholds = _ref.thresholds, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;\n    var scroll = getValueFromDistance(distanceToEdge, thresholds);\n    if (scroll === 0) {\n        return 0;\n    }\n    if (!shouldUseTimeDampening) {\n        return scroll;\n    }\n    return Math.max(dampenValueByTime(scroll, dragStartTime), minScroll);\n};\nvar getScrollOnAxis = function(_ref) {\n    var container = _ref.container, distanceToEdges = _ref.distanceToEdges, dragStartTime = _ref.dragStartTime, axis = _ref.axis, shouldUseTimeDampening = _ref.shouldUseTimeDampening;\n    var thresholds = getDistanceThresholds(container, axis);\n    var isCloserToEnd = distanceToEdges[axis.end] < distanceToEdges[axis.start];\n    if (isCloserToEnd) {\n        return getValue({\n            distanceToEdge: distanceToEdges[axis.end],\n            thresholds: thresholds,\n            dragStartTime: dragStartTime,\n            shouldUseTimeDampening: shouldUseTimeDampening\n        });\n    }\n    return -1 * getValue({\n        distanceToEdge: distanceToEdges[axis.start],\n        thresholds: thresholds,\n        dragStartTime: dragStartTime,\n        shouldUseTimeDampening: shouldUseTimeDampening\n    });\n};\nvar adjustForSizeLimits = function(_ref) {\n    var container = _ref.container, subject = _ref.subject, proposedScroll = _ref.proposedScroll;\n    var isTooBigVertically = subject.height > container.height;\n    var isTooBigHorizontally = subject.width > container.width;\n    if (!isTooBigHorizontally && !isTooBigVertically) {\n        return proposedScroll;\n    }\n    if (isTooBigHorizontally && isTooBigVertically) {\n        return null;\n    }\n    return {\n        x: isTooBigHorizontally ? 0 : proposedScroll.x,\n        y: isTooBigVertically ? 0 : proposedScroll.y\n    };\n};\nvar clean$2 = apply(function(value) {\n    return value === 0 ? 0 : value;\n});\nvar getScroll = function(_ref) {\n    var dragStartTime = _ref.dragStartTime, container = _ref.container, subject = _ref.subject, center = _ref.center, shouldUseTimeDampening = _ref.shouldUseTimeDampening;\n    var distanceToEdges = {\n        top: center.y - container.top,\n        right: container.right - center.x,\n        bottom: container.bottom - center.y,\n        left: center.x - container.left\n    };\n    var y = getScrollOnAxis({\n        container: container,\n        distanceToEdges: distanceToEdges,\n        dragStartTime: dragStartTime,\n        axis: vertical,\n        shouldUseTimeDampening: shouldUseTimeDampening\n    });\n    var x = getScrollOnAxis({\n        container: container,\n        distanceToEdges: distanceToEdges,\n        dragStartTime: dragStartTime,\n        axis: horizontal,\n        shouldUseTimeDampening: shouldUseTimeDampening\n    });\n    var required = clean$2({\n        x: x,\n        y: y\n    });\n    if (isEqual(required, origin)) {\n        return null;\n    }\n    var limited = adjustForSizeLimits({\n        container: container,\n        subject: subject,\n        proposedScroll: required\n    });\n    if (!limited) {\n        return null;\n    }\n    return isEqual(limited, origin) ? null : limited;\n};\nvar smallestSigned = apply(function(value) {\n    if (value === 0) {\n        return 0;\n    }\n    return value > 0 ? 1 : -1;\n});\nvar getOverlap = function() {\n    var getRemainder = function getRemainder(target, max) {\n        if (target < 0) {\n            return target;\n        }\n        if (target > max) {\n            return target - max;\n        }\n        return 0;\n    };\n    return function(_ref) {\n        var current = _ref.current, max = _ref.max, change = _ref.change;\n        var targetScroll = add(current, change);\n        var overlap = {\n            x: getRemainder(targetScroll.x, max.x),\n            y: getRemainder(targetScroll.y, max.y)\n        };\n        if (isEqual(overlap, origin)) {\n            return null;\n        }\n        return overlap;\n    };\n}();\nvar canPartiallyScroll = function canPartiallyScroll(_ref2) {\n    var rawMax = _ref2.max, current = _ref2.current, change = _ref2.change;\n    var max = {\n        x: Math.max(current.x, rawMax.x),\n        y: Math.max(current.y, rawMax.y)\n    };\n    var smallestChange = smallestSigned(change);\n    var overlap = getOverlap({\n        max: max,\n        current: current,\n        change: smallestChange\n    });\n    if (!overlap) {\n        return true;\n    }\n    if (smallestChange.x !== 0 && overlap.x === 0) {\n        return true;\n    }\n    if (smallestChange.y !== 0 && overlap.y === 0) {\n        return true;\n    }\n    return false;\n};\nvar canScrollWindow = function canScrollWindow(viewport, change) {\n    return canPartiallyScroll({\n        current: viewport.scroll.current,\n        max: viewport.scroll.max,\n        change: change\n    });\n};\nvar getWindowOverlap = function getWindowOverlap(viewport, change) {\n    if (!canScrollWindow(viewport, change)) {\n        return null;\n    }\n    var max = viewport.scroll.max;\n    var current = viewport.scroll.current;\n    return getOverlap({\n        current: current,\n        max: max,\n        change: change\n    });\n};\nvar canScrollDroppable = function canScrollDroppable(droppable, change) {\n    var frame = droppable.frame;\n    if (!frame) {\n        return false;\n    }\n    return canPartiallyScroll({\n        current: frame.scroll.current,\n        max: frame.scroll.max,\n        change: change\n    });\n};\nvar getDroppableOverlap = function getDroppableOverlap(droppable, change) {\n    var frame = droppable.frame;\n    if (!frame) {\n        return null;\n    }\n    if (!canScrollDroppable(droppable, change)) {\n        return null;\n    }\n    return getOverlap({\n        current: frame.scroll.current,\n        max: frame.scroll.max,\n        change: change\n    });\n};\nvar getWindowScrollChange = function(_ref) {\n    var viewport = _ref.viewport, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;\n    var scroll = getScroll({\n        dragStartTime: dragStartTime,\n        container: viewport.frame,\n        subject: subject,\n        center: center,\n        shouldUseTimeDampening: shouldUseTimeDampening\n    });\n    return scroll && canScrollWindow(viewport, scroll) ? scroll : null;\n};\nvar getDroppableScrollChange = function(_ref) {\n    var droppable = _ref.droppable, subject = _ref.subject, center = _ref.center, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening;\n    var frame = droppable.frame;\n    if (!frame) {\n        return null;\n    }\n    var scroll = getScroll({\n        dragStartTime: dragStartTime,\n        container: frame.pageMarginBox,\n        subject: subject,\n        center: center,\n        shouldUseTimeDampening: shouldUseTimeDampening\n    });\n    return scroll && canScrollDroppable(droppable, scroll) ? scroll : null;\n};\nvar scroll$1 = function(_ref) {\n    var state = _ref.state, dragStartTime = _ref.dragStartTime, shouldUseTimeDampening = _ref.shouldUseTimeDampening, scrollWindow = _ref.scrollWindow, scrollDroppable = _ref.scrollDroppable;\n    var center = state.current.page.borderBoxCenter;\n    var draggable = state.dimensions.draggables[state.critical.draggable.id];\n    var subject = draggable.page.marginBox;\n    if (state.isWindowScrollAllowed) {\n        var viewport = state.viewport;\n        var _change = getWindowScrollChange({\n            dragStartTime: dragStartTime,\n            viewport: viewport,\n            subject: subject,\n            center: center,\n            shouldUseTimeDampening: shouldUseTimeDampening\n        });\n        if (_change) {\n            scrollWindow(_change);\n            return;\n        }\n    }\n    var droppable = getBestScrollableDroppable({\n        center: center,\n        destination: whatIsDraggedOver(state.impact),\n        droppables: state.dimensions.droppables\n    });\n    if (!droppable) {\n        return;\n    }\n    var change = getDroppableScrollChange({\n        dragStartTime: dragStartTime,\n        droppable: droppable,\n        subject: subject,\n        center: center,\n        shouldUseTimeDampening: shouldUseTimeDampening\n    });\n    if (change) {\n        scrollDroppable(droppable.descriptor.id, change);\n    }\n};\nvar createFluidScroller = function(_ref) {\n    var scrollWindow = _ref.scrollWindow, scrollDroppable = _ref.scrollDroppable;\n    var scheduleWindowScroll = (0,raf_schd__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(scrollWindow);\n    var scheduleDroppableScroll = (0,raf_schd__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(scrollDroppable);\n    var dragging = null;\n    var tryScroll = function tryScroll(state) {\n        !dragging ?  true ? invariant(false, \"Cannot fluid scroll if not dragging\") : 0 : void 0;\n        var _dragging = dragging, shouldUseTimeDampening = _dragging.shouldUseTimeDampening, dragStartTime = _dragging.dragStartTime;\n        scroll$1({\n            state: state,\n            scrollWindow: scheduleWindowScroll,\n            scrollDroppable: scheduleDroppableScroll,\n            dragStartTime: dragStartTime,\n            shouldUseTimeDampening: shouldUseTimeDampening\n        });\n    };\n    var start$1 = function start$1(state) {\n        start();\n        !!dragging ?  true ? invariant(false, \"Cannot start auto scrolling when already started\") : 0 : void 0;\n        var dragStartTime = Date.now();\n        var wasScrollNeeded = false;\n        var fakeScrollCallback = function fakeScrollCallback() {\n            wasScrollNeeded = true;\n        };\n        scroll$1({\n            state: state,\n            dragStartTime: 0,\n            shouldUseTimeDampening: false,\n            scrollWindow: fakeScrollCallback,\n            scrollDroppable: fakeScrollCallback\n        });\n        dragging = {\n            dragStartTime: dragStartTime,\n            shouldUseTimeDampening: wasScrollNeeded\n        };\n        finish();\n        if (wasScrollNeeded) {\n            tryScroll(state);\n        }\n    };\n    var stop = function stop() {\n        if (!dragging) {\n            return;\n        }\n        scheduleWindowScroll.cancel();\n        scheduleDroppableScroll.cancel();\n        dragging = null;\n    };\n    return {\n        start: start$1,\n        stop: stop,\n        scroll: tryScroll\n    };\n};\nvar createJumpScroller = function(_ref) {\n    var move = _ref.move, scrollDroppable = _ref.scrollDroppable, scrollWindow = _ref.scrollWindow;\n    var moveByOffset = function moveByOffset(state, offset) {\n        var client = add(state.current.client.selection, offset);\n        move({\n            client: client\n        });\n    };\n    var scrollDroppableAsMuchAsItCan = function scrollDroppableAsMuchAsItCan(droppable, change) {\n        if (!canScrollDroppable(droppable, change)) {\n            return change;\n        }\n        var overlap = getDroppableOverlap(droppable, change);\n        if (!overlap) {\n            scrollDroppable(droppable.descriptor.id, change);\n            return null;\n        }\n        var whatTheDroppableCanScroll = subtract(change, overlap);\n        scrollDroppable(droppable.descriptor.id, whatTheDroppableCanScroll);\n        var remainder = subtract(change, whatTheDroppableCanScroll);\n        return remainder;\n    };\n    var scrollWindowAsMuchAsItCan = function scrollWindowAsMuchAsItCan(isWindowScrollAllowed, viewport, change) {\n        if (!isWindowScrollAllowed) {\n            return change;\n        }\n        if (!canScrollWindow(viewport, change)) {\n            return change;\n        }\n        var overlap = getWindowOverlap(viewport, change);\n        if (!overlap) {\n            scrollWindow(change);\n            return null;\n        }\n        var whatTheWindowCanScroll = subtract(change, overlap);\n        scrollWindow(whatTheWindowCanScroll);\n        var remainder = subtract(change, whatTheWindowCanScroll);\n        return remainder;\n    };\n    var jumpScroller = function jumpScroller(state) {\n        var request = state.scrollJumpRequest;\n        if (!request) {\n            return;\n        }\n        var destination = whatIsDraggedOver(state.impact);\n        !destination ?  true ? invariant(false, \"Cannot perform a jump scroll when there is no destination\") : 0 : void 0;\n        var droppableRemainder = scrollDroppableAsMuchAsItCan(state.dimensions.droppables[destination], request);\n        if (!droppableRemainder) {\n            return;\n        }\n        var viewport = state.viewport;\n        var windowRemainder = scrollWindowAsMuchAsItCan(state.isWindowScrollAllowed, viewport, droppableRemainder);\n        if (!windowRemainder) {\n            return;\n        }\n        moveByOffset(state, windowRemainder);\n    };\n    return jumpScroller;\n};\nvar createAutoScroller = function(_ref) {\n    var scrollDroppable = _ref.scrollDroppable, scrollWindow = _ref.scrollWindow, move = _ref.move;\n    var fluidScroller = createFluidScroller({\n        scrollWindow: scrollWindow,\n        scrollDroppable: scrollDroppable\n    });\n    var jumpScroll = createJumpScroller({\n        move: move,\n        scrollWindow: scrollWindow,\n        scrollDroppable: scrollDroppable\n    });\n    var scroll = function scroll(state) {\n        if (state.phase !== \"DRAGGING\") {\n            return;\n        }\n        if (state.movementMode === \"FLUID\") {\n            fluidScroller.scroll(state);\n            return;\n        }\n        if (!state.scrollJumpRequest) {\n            return;\n        }\n        jumpScroll(state);\n    };\n    var scroller = {\n        scroll: scroll,\n        start: fluidScroller.start,\n        stop: fluidScroller.stop\n    };\n    return scroller;\n};\nvar prefix$1 = \"data-rbd\";\nvar dragHandle = function() {\n    var base = prefix$1 + \"-drag-handle\";\n    return {\n        base: base,\n        draggableId: base + \"-draggable-id\",\n        contextId: base + \"-context-id\"\n    };\n}();\nvar draggable = function() {\n    var base = prefix$1 + \"-draggable\";\n    return {\n        base: base,\n        contextId: base + \"-context-id\",\n        id: base + \"-id\"\n    };\n}();\nvar droppable = function() {\n    var base = prefix$1 + \"-droppable\";\n    return {\n        base: base,\n        contextId: base + \"-context-id\",\n        id: base + \"-id\"\n    };\n}();\nvar scrollContainer = {\n    contextId: prefix$1 + \"-scroll-container-context-id\"\n};\nvar makeGetSelector = function makeGetSelector(context) {\n    return function(attribute) {\n        return \"[\" + attribute + '=\"' + context + '\"]';\n    };\n};\nvar getStyles = function getStyles(rules, property) {\n    return rules.map(function(rule) {\n        var value = rule.styles[property];\n        if (!value) {\n            return \"\";\n        }\n        return rule.selector + \" { \" + value + \" }\";\n    }).join(\" \");\n};\nvar noPointerEvents = \"pointer-events: none;\";\nvar getStyles$1 = function(contextId) {\n    var getSelector = makeGetSelector(contextId);\n    var dragHandle$1 = function() {\n        var grabCursor = \"\\n      cursor: -webkit-grab;\\n      cursor: grab;\\n    \";\n        return {\n            selector: getSelector(dragHandle.contextId),\n            styles: {\n                always: \"\\n          -webkit-touch-callout: none;\\n          -webkit-tap-highlight-color: rgba(0,0,0,0);\\n          touch-action: manipulation;\\n        \",\n                resting: grabCursor,\n                dragging: noPointerEvents,\n                dropAnimating: grabCursor\n            }\n        };\n    }();\n    var draggable$1 = function() {\n        var transition = \"\\n      transition: \" + transitions.outOfTheWay + \";\\n    \";\n        return {\n            selector: getSelector(draggable.contextId),\n            styles: {\n                dragging: transition,\n                dropAnimating: transition,\n                userCancel: transition\n            }\n        };\n    }();\n    var droppable$1 = {\n        selector: getSelector(droppable.contextId),\n        styles: {\n            always: \"overflow-anchor: none;\"\n        }\n    };\n    var body = {\n        selector: \"body\",\n        styles: {\n            dragging: \"\\n        cursor: grabbing;\\n        cursor: -webkit-grabbing;\\n        user-select: none;\\n        -webkit-user-select: none;\\n        -moz-user-select: none;\\n        -ms-user-select: none;\\n        overflow-anchor: none;\\n      \"\n        }\n    };\n    var rules = [\n        draggable$1,\n        dragHandle$1,\n        droppable$1,\n        body\n    ];\n    return {\n        always: getStyles(rules, \"always\"),\n        resting: getStyles(rules, \"resting\"),\n        dragging: getStyles(rules, \"dragging\"),\n        dropAnimating: getStyles(rules, \"dropAnimating\"),\n        userCancel: getStyles(rules, \"userCancel\")\n    };\n};\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nvar getHead = function getHead() {\n    var head = document.querySelector(\"head\");\n    !head ?  true ? invariant(false, \"Cannot find the head to append a style to\") : 0 : void 0;\n    return head;\n};\nvar createStyleEl = function createStyleEl(nonce) {\n    var el = document.createElement(\"style\");\n    if (nonce) {\n        el.setAttribute(\"nonce\", nonce);\n    }\n    el.type = \"text/css\";\n    return el;\n};\nfunction useStyleMarshal(contextId, nonce) {\n    var styles = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return getStyles$1(contextId);\n    }, [\n        contextId\n    ]);\n    var alwaysRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var dynamicRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var setDynamicStyle = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)((0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(proposed) {\n        var el = dynamicRef.current;\n        !el ?  true ? invariant(false, \"Cannot set dynamic style element if it is not set\") : 0 : void 0;\n        el.textContent = proposed;\n    }), []);\n    var setAlwaysStyle = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(proposed) {\n        var el = alwaysRef.current;\n        !el ?  true ? invariant(false, \"Cannot set dynamic style element if it is not set\") : 0 : void 0;\n        el.textContent = proposed;\n    }, []);\n    useIsomorphicLayoutEffect(function() {\n        !(!alwaysRef.current && !dynamicRef.current) ?  true ? invariant(false, \"style elements already mounted\") : 0 : void 0;\n        var always = createStyleEl(nonce);\n        var dynamic = createStyleEl(nonce);\n        alwaysRef.current = always;\n        dynamicRef.current = dynamic;\n        always.setAttribute(prefix$1 + \"-always\", contextId);\n        dynamic.setAttribute(prefix$1 + \"-dynamic\", contextId);\n        getHead().appendChild(always);\n        getHead().appendChild(dynamic);\n        setAlwaysStyle(styles.always);\n        setDynamicStyle(styles.resting);\n        return function() {\n            var remove = function remove(ref) {\n                var current = ref.current;\n                !current ?  true ? invariant(false, \"Cannot unmount ref as it is not set\") : 0 : void 0;\n                getHead().removeChild(current);\n                ref.current = null;\n            };\n            remove(alwaysRef);\n            remove(dynamicRef);\n        };\n    }, [\n        nonce,\n        setAlwaysStyle,\n        setDynamicStyle,\n        styles.always,\n        styles.resting,\n        contextId\n    ]);\n    var dragging = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        return setDynamicStyle(styles.dragging);\n    }, [\n        setDynamicStyle,\n        styles.dragging\n    ]);\n    var dropping = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(reason) {\n        if (reason === \"DROP\") {\n            setDynamicStyle(styles.dropAnimating);\n            return;\n        }\n        setDynamicStyle(styles.userCancel);\n    }, [\n        setDynamicStyle,\n        styles.dropAnimating,\n        styles.userCancel\n    ]);\n    var resting = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        if (!dynamicRef.current) {\n            return;\n        }\n        setDynamicStyle(styles.resting);\n    }, [\n        setDynamicStyle,\n        styles.resting\n    ]);\n    var marshal = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            dragging: dragging,\n            dropping: dropping,\n            resting: resting\n        };\n    }, [\n        dragging,\n        dropping,\n        resting\n    ]);\n    return marshal;\n}\nvar getWindowFromEl = function(el) {\n    return el && el.ownerDocument ? el.ownerDocument.defaultView : window;\n};\nfunction isHtmlElement(el) {\n    return el instanceof getWindowFromEl(el).HTMLElement;\n}\nfunction findDragHandle(contextId, draggableId) {\n    var selector = \"[\" + dragHandle.contextId + '=\"' + contextId + '\"]';\n    var possible = toArray(document.querySelectorAll(selector));\n    if (!possible.length) {\n         true ? warning('Unable to find any drag handles in the context \"' + contextId + '\"') : 0;\n        return null;\n    }\n    var handle = find(possible, function(el) {\n        return el.getAttribute(dragHandle.draggableId) === draggableId;\n    });\n    if (!handle) {\n         true ? warning('Unable to find drag handle with id \"' + draggableId + '\" as no handle with a matching id was found') : 0;\n        return null;\n    }\n    if (!isHtmlElement(handle)) {\n         true ? warning(\"drag handle needs to be a HTMLElement\") : 0;\n        return null;\n    }\n    return handle;\n}\nfunction useFocusMarshal(contextId) {\n    var entriesRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    var recordRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var restoreFocusFrameRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var isMountedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    var register = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function register(id, focus) {\n        var entry = {\n            id: id,\n            focus: focus\n        };\n        entriesRef.current[id] = entry;\n        return function unregister() {\n            var entries = entriesRef.current;\n            var current = entries[id];\n            if (current !== entry) {\n                delete entries[id];\n            }\n        };\n    }, []);\n    var tryGiveFocus = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function tryGiveFocus(tryGiveFocusTo) {\n        var handle = findDragHandle(contextId, tryGiveFocusTo);\n        if (handle && handle !== document.activeElement) {\n            handle.focus();\n        }\n    }, [\n        contextId\n    ]);\n    var tryShiftRecord = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function tryShiftRecord(previous, redirectTo) {\n        if (recordRef.current === previous) {\n            recordRef.current = redirectTo;\n        }\n    }, []);\n    var tryRestoreFocusRecorded = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function tryRestoreFocusRecorded() {\n        if (restoreFocusFrameRef.current) {\n            return;\n        }\n        if (!isMountedRef.current) {\n            return;\n        }\n        restoreFocusFrameRef.current = requestAnimationFrame(function() {\n            restoreFocusFrameRef.current = null;\n            var record = recordRef.current;\n            if (record) {\n                tryGiveFocus(record);\n            }\n        });\n    }, [\n        tryGiveFocus\n    ]);\n    var tryRecordFocus = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function tryRecordFocus(id) {\n        recordRef.current = null;\n        var focused = document.activeElement;\n        if (!focused) {\n            return;\n        }\n        if (focused.getAttribute(dragHandle.draggableId) !== id) {\n            return;\n        }\n        recordRef.current = id;\n    }, []);\n    useIsomorphicLayoutEffect(function() {\n        isMountedRef.current = true;\n        return function clearFrameOnUnmount() {\n            isMountedRef.current = false;\n            var frameId = restoreFocusFrameRef.current;\n            if (frameId) {\n                cancelAnimationFrame(frameId);\n            }\n        };\n    }, []);\n    var marshal = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            register: register,\n            tryRecordFocus: tryRecordFocus,\n            tryRestoreFocusRecorded: tryRestoreFocusRecorded,\n            tryShiftRecord: tryShiftRecord\n        };\n    }, [\n        register,\n        tryRecordFocus,\n        tryRestoreFocusRecorded,\n        tryShiftRecord\n    ]);\n    return marshal;\n}\nfunction createRegistry() {\n    var entries = {\n        draggables: {},\n        droppables: {}\n    };\n    var subscribers = [];\n    function subscribe(cb) {\n        subscribers.push(cb);\n        return function unsubscribe() {\n            var index = subscribers.indexOf(cb);\n            if (index === -1) {\n                return;\n            }\n            subscribers.splice(index, 1);\n        };\n    }\n    function notify(event) {\n        if (subscribers.length) {\n            subscribers.forEach(function(cb) {\n                return cb(event);\n            });\n        }\n    }\n    function findDraggableById(id) {\n        return entries.draggables[id] || null;\n    }\n    function getDraggableById(id) {\n        var entry = findDraggableById(id);\n        !entry ?  true ? invariant(false, \"Cannot find draggable entry with id [\" + id + \"]\") : 0 : void 0;\n        return entry;\n    }\n    var draggableAPI = {\n        register: function register(entry) {\n            entries.draggables[entry.descriptor.id] = entry;\n            notify({\n                type: \"ADDITION\",\n                value: entry\n            });\n        },\n        update: function update(entry, last) {\n            var current = entries.draggables[last.descriptor.id];\n            if (!current) {\n                return;\n            }\n            if (current.uniqueId !== entry.uniqueId) {\n                return;\n            }\n            delete entries.draggables[last.descriptor.id];\n            entries.draggables[entry.descriptor.id] = entry;\n        },\n        unregister: function unregister(entry) {\n            var draggableId = entry.descriptor.id;\n            var current = findDraggableById(draggableId);\n            if (!current) {\n                return;\n            }\n            if (entry.uniqueId !== current.uniqueId) {\n                return;\n            }\n            delete entries.draggables[draggableId];\n            notify({\n                type: \"REMOVAL\",\n                value: entry\n            });\n        },\n        getById: getDraggableById,\n        findById: findDraggableById,\n        exists: function exists(id) {\n            return Boolean(findDraggableById(id));\n        },\n        getAllByType: function getAllByType(type) {\n            return values(entries.draggables).filter(function(entry) {\n                return entry.descriptor.type === type;\n            });\n        }\n    };\n    function findDroppableById(id) {\n        return entries.droppables[id] || null;\n    }\n    function getDroppableById(id) {\n        var entry = findDroppableById(id);\n        !entry ?  true ? invariant(false, \"Cannot find droppable entry with id [\" + id + \"]\") : 0 : void 0;\n        return entry;\n    }\n    var droppableAPI = {\n        register: function register(entry) {\n            entries.droppables[entry.descriptor.id] = entry;\n        },\n        unregister: function unregister(entry) {\n            var current = findDroppableById(entry.descriptor.id);\n            if (!current) {\n                return;\n            }\n            if (entry.uniqueId !== current.uniqueId) {\n                return;\n            }\n            delete entries.droppables[entry.descriptor.id];\n        },\n        getById: getDroppableById,\n        findById: findDroppableById,\n        exists: function exists(id) {\n            return Boolean(findDroppableById(id));\n        },\n        getAllByType: function getAllByType(type) {\n            return values(entries.droppables).filter(function(entry) {\n                return entry.descriptor.type === type;\n            });\n        }\n    };\n    function clean() {\n        entries.draggables = {};\n        entries.droppables = {};\n        subscribers.length = 0;\n    }\n    return {\n        draggable: draggableAPI,\n        droppable: droppableAPI,\n        subscribe: subscribe,\n        clean: clean\n    };\n}\nfunction useRegistry() {\n    var registry = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(createRegistry, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        return function unmount() {\n            requestAnimationFrame(registry.clean);\n        };\n    }, [\n        registry\n    ]);\n    return registry;\n}\nvar StoreContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);\nvar getBodyElement = function() {\n    var body = document.body;\n    !body ?  true ? invariant(false, \"Cannot find document.body\") : 0 : void 0;\n    return body;\n};\nvar visuallyHidden = {\n    position: \"absolute\",\n    width: \"1px\",\n    height: \"1px\",\n    margin: \"-1px\",\n    border: \"0\",\n    padding: \"0\",\n    overflow: \"hidden\",\n    clip: \"rect(0 0 0 0)\",\n    \"clip-path\": \"inset(100%)\"\n};\nvar getId = function getId(contextId) {\n    return \"rbd-announcement-\" + contextId;\n};\nfunction useAnnouncer(contextId) {\n    var id = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return getId(contextId);\n    }, [\n        contextId\n    ]);\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function setup() {\n        var el = document.createElement(\"div\");\n        ref.current = el;\n        el.id = id;\n        el.setAttribute(\"aria-live\", \"assertive\");\n        el.setAttribute(\"aria-atomic\", \"true\");\n        (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(el.style, visuallyHidden);\n        getBodyElement().appendChild(el);\n        return function cleanup() {\n            setTimeout(function remove() {\n                var body = getBodyElement();\n                if (body.contains(el)) {\n                    body.removeChild(el);\n                }\n                if (el === ref.current) {\n                    ref.current = null;\n                }\n            });\n        };\n    }, [\n        id\n    ]);\n    var announce = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(message) {\n        var el = ref.current;\n        if (el) {\n            el.textContent = message;\n            return;\n        }\n         true ? warning('\\n      A screen reader message was trying to be announced but it was unable to do so.\\n      This can occur if you unmount your <DragDropContext /> in your onDragEnd.\\n      Consider calling provided.announce() before the unmount so that the instruction will\\n      not be lost for users relying on a screen reader.\\n\\n      Message not passed to screen reader:\\n\\n      \"' + message + '\"\\n    ') : 0;\n    }, []);\n    return announce;\n}\nvar count = 0;\nvar defaults = {\n    separator: \"::\"\n};\nfunction reset() {\n    count = 0;\n}\nfunction useUniqueId(prefix, options) {\n    if (options === void 0) {\n        options = defaults;\n    }\n    return (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return \"\" + prefix + options.separator + count++;\n    }, [\n        options.separator,\n        prefix\n    ]);\n}\nfunction getElementId(_ref) {\n    var contextId = _ref.contextId, uniqueId = _ref.uniqueId;\n    return \"rbd-hidden-text-\" + contextId + \"-\" + uniqueId;\n}\nfunction useHiddenTextElement(_ref2) {\n    var contextId = _ref2.contextId, text = _ref2.text;\n    var uniqueId = useUniqueId(\"hidden-text\", {\n        separator: \"-\"\n    });\n    var id = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return getElementId({\n            contextId: contextId,\n            uniqueId: uniqueId\n        });\n    }, [\n        uniqueId,\n        contextId\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function mount() {\n        var el = document.createElement(\"div\");\n        el.id = id;\n        el.textContent = text;\n        el.style.display = \"none\";\n        getBodyElement().appendChild(el);\n        return function unmount() {\n            var body = getBodyElement();\n            if (body.contains(el)) {\n                body.removeChild(el);\n            }\n        };\n    }, [\n        id,\n        text\n    ]);\n    return id;\n}\nvar AppContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);\nvar peerDependencies = {\n    react: \"^16.8.5 || ^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^16.8.5 || ^17.0.0 || ^18.0.0\"\n};\nvar semver = /(\\d+)\\.(\\d+)\\.(\\d+)/;\nvar getVersion = function getVersion(value) {\n    var result = semver.exec(value);\n    !(result != null) ?  true ? invariant(false, \"Unable to parse React version \" + value) : 0 : void 0;\n    var major = Number(result[1]);\n    var minor = Number(result[2]);\n    var patch = Number(result[3]);\n    return {\n        major: major,\n        minor: minor,\n        patch: patch,\n        raw: value\n    };\n};\nvar isSatisfied = function isSatisfied(expected, actual) {\n    if (actual.major > expected.major) {\n        return true;\n    }\n    if (actual.major < expected.major) {\n        return false;\n    }\n    if (actual.minor > expected.minor) {\n        return true;\n    }\n    if (actual.minor < expected.minor) {\n        return false;\n    }\n    return actual.patch >= expected.patch;\n};\nvar checkReactVersion = function(peerDepValue, actualValue) {\n    var peerDep = getVersion(peerDepValue);\n    var actual = getVersion(actualValue);\n    if (isSatisfied(peerDep, actual)) {\n        return;\n    }\n     true ? warning(\"\\n    React version: [\" + actual.raw + \"]\\n    does not satisfy expected peer dependency version: [\" + peerDep.raw + \"]\\n\\n    This can result in run time bugs, and even fatal crashes\\n  \") : 0;\n};\nvar suffix = \"\\n  We expect a html5 doctype: <!doctype html>\\n  This is to ensure consistent browser layout and measurement\\n\\n  More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/doctype.md\\n\";\nvar checkDoctype = function(doc) {\n    var doctype = doc.doctype;\n    if (!doctype) {\n         true ? warning(\"\\n      No <!doctype html> found.\\n\\n      \" + suffix + \"\\n    \") : 0;\n        return;\n    }\n    if (doctype.name.toLowerCase() !== \"html\") {\n         true ? warning(\"\\n      Unexpected <!doctype> found: (\" + doctype.name + \")\\n\\n      \" + suffix + \"\\n    \") : 0;\n    }\n    if (doctype.publicId !== \"\") {\n         true ? warning(\"\\n      Unexpected <!doctype> publicId found: (\" + doctype.publicId + \")\\n      A html5 doctype does not have a publicId\\n\\n      \" + suffix + \"\\n    \") : 0;\n    }\n};\nfunction useDev(useHook) {\n    if (true) {\n        useHook();\n    }\n}\nfunction useDevSetupWarning(fn, inputs) {\n    useDev(function() {\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n            try {\n                fn();\n            } catch (e) {\n                error(\"\\n          A setup problem was encountered.\\n\\n          > \" + e.message + \"\\n        \");\n            }\n        }, inputs);\n    });\n}\nfunction useStartupValidation() {\n    useDevSetupWarning(function() {\n        checkReactVersion(peerDependencies.react, (react__WEBPACK_IMPORTED_MODULE_0___default().version));\n        checkDoctype(document);\n    }, []);\n}\nfunction usePrevious(current) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(current);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        ref.current = current;\n    });\n    return ref;\n}\nfunction create() {\n    var lock = null;\n    function isClaimed() {\n        return Boolean(lock);\n    }\n    function isActive(value) {\n        return value === lock;\n    }\n    function claim(abandon) {\n        !!lock ?  true ? invariant(false, \"Cannot claim lock as it is already claimed\") : 0 : void 0;\n        var newLock = {\n            abandon: abandon\n        };\n        lock = newLock;\n        return newLock;\n    }\n    function release() {\n        !lock ?  true ? invariant(false, \"Cannot release lock when there is no lock\") : 0 : void 0;\n        lock = null;\n    }\n    function tryAbandon() {\n        if (lock) {\n            lock.abandon();\n            release();\n        }\n    }\n    return {\n        isClaimed: isClaimed,\n        isActive: isActive,\n        claim: claim,\n        release: release,\n        tryAbandon: tryAbandon\n    };\n}\nvar tab = 9;\nvar enter = 13;\nvar escape = 27;\nvar space = 32;\nvar pageUp = 33;\nvar pageDown = 34;\nvar end = 35;\nvar home = 36;\nvar arrowLeft = 37;\nvar arrowUp = 38;\nvar arrowRight = 39;\nvar arrowDown = 40;\nvar _preventedKeys;\nvar preventedKeys = (_preventedKeys = {}, _preventedKeys[enter] = true, _preventedKeys[tab] = true, _preventedKeys);\nvar preventStandardKeyEvents = function(event) {\n    if (preventedKeys[event.keyCode]) {\n        event.preventDefault();\n    }\n};\nvar supportedEventName = function() {\n    var base = \"visibilitychange\";\n    if (typeof document === \"undefined\") {\n        return base;\n    }\n    var candidates = [\n        base,\n        \"ms\" + base,\n        \"webkit\" + base,\n        \"moz\" + base,\n        \"o\" + base\n    ];\n    var supported = find(candidates, function(eventName) {\n        return \"on\" + eventName in document;\n    });\n    return supported || base;\n}();\nvar primaryButton = 0;\nvar sloppyClickThreshold = 5;\nfunction isSloppyClickThresholdExceeded(original, current) {\n    return Math.abs(current.x - original.x) >= sloppyClickThreshold || Math.abs(current.y - original.y) >= sloppyClickThreshold;\n}\nvar idle$1 = {\n    type: \"IDLE\"\n};\nfunction getCaptureBindings(_ref) {\n    var cancel = _ref.cancel, completed = _ref.completed, getPhase = _ref.getPhase, setPhase = _ref.setPhase;\n    return [\n        {\n            eventName: \"mousemove\",\n            fn: function fn(event) {\n                var button = event.button, clientX = event.clientX, clientY = event.clientY;\n                if (button !== primaryButton) {\n                    return;\n                }\n                var point = {\n                    x: clientX,\n                    y: clientY\n                };\n                var phase = getPhase();\n                if (phase.type === \"DRAGGING\") {\n                    event.preventDefault();\n                    phase.actions.move(point);\n                    return;\n                }\n                !(phase.type === \"PENDING\") ?  true ? invariant(false, \"Cannot be IDLE\") : 0 : void 0;\n                var pending = phase.point;\n                if (!isSloppyClickThresholdExceeded(pending, point)) {\n                    return;\n                }\n                event.preventDefault();\n                var actions = phase.actions.fluidLift(point);\n                setPhase({\n                    type: \"DRAGGING\",\n                    actions: actions\n                });\n            }\n        },\n        {\n            eventName: \"mouseup\",\n            fn: function fn(event) {\n                var phase = getPhase();\n                if (phase.type !== \"DRAGGING\") {\n                    cancel();\n                    return;\n                }\n                event.preventDefault();\n                phase.actions.drop({\n                    shouldBlockNextClick: true\n                });\n                completed();\n            }\n        },\n        {\n            eventName: \"mousedown\",\n            fn: function fn(event) {\n                if (getPhase().type === \"DRAGGING\") {\n                    event.preventDefault();\n                }\n                cancel();\n            }\n        },\n        {\n            eventName: \"keydown\",\n            fn: function fn(event) {\n                var phase = getPhase();\n                if (phase.type === \"PENDING\") {\n                    cancel();\n                    return;\n                }\n                if (event.keyCode === escape) {\n                    event.preventDefault();\n                    cancel();\n                    return;\n                }\n                preventStandardKeyEvents(event);\n            }\n        },\n        {\n            eventName: \"resize\",\n            fn: cancel\n        },\n        {\n            eventName: \"scroll\",\n            options: {\n                passive: true,\n                capture: false\n            },\n            fn: function fn() {\n                if (getPhase().type === \"PENDING\") {\n                    cancel();\n                }\n            }\n        },\n        {\n            eventName: \"webkitmouseforcedown\",\n            fn: function fn(event) {\n                var phase = getPhase();\n                !(phase.type !== \"IDLE\") ?  true ? invariant(false, \"Unexpected phase\") : 0 : void 0;\n                if (phase.actions.shouldRespectForcePress()) {\n                    cancel();\n                    return;\n                }\n                event.preventDefault();\n            }\n        },\n        {\n            eventName: supportedEventName,\n            fn: cancel\n        }\n    ];\n}\nfunction useMouseSensor(api) {\n    var phaseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(idle$1);\n    var unbindEventsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(noop);\n    var startCaptureBinding = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            eventName: \"mousedown\",\n            fn: function onMouseDown(event) {\n                if (event.defaultPrevented) {\n                    return;\n                }\n                if (event.button !== primaryButton) {\n                    return;\n                }\n                if (event.ctrlKey || event.metaKey || event.shiftKey || event.altKey) {\n                    return;\n                }\n                var draggableId = api.findClosestDraggableId(event);\n                if (!draggableId) {\n                    return;\n                }\n                var actions = api.tryGetLock(draggableId, stop, {\n                    sourceEvent: event\n                });\n                if (!actions) {\n                    return;\n                }\n                event.preventDefault();\n                var point = {\n                    x: event.clientX,\n                    y: event.clientY\n                };\n                unbindEventsRef.current();\n                startPendingDrag(actions, point);\n            }\n        };\n    }, [\n        api\n    ]);\n    var preventForcePressBinding = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            eventName: \"webkitmouseforcewillbegin\",\n            fn: function fn(event) {\n                if (event.defaultPrevented) {\n                    return;\n                }\n                var id = api.findClosestDraggableId(event);\n                if (!id) {\n                    return;\n                }\n                var options = api.findOptionsForDraggable(id);\n                if (!options) {\n                    return;\n                }\n                if (options.shouldRespectForcePress) {\n                    return;\n                }\n                if (!api.canGetLock(id)) {\n                    return;\n                }\n                event.preventDefault();\n            }\n        };\n    }, [\n        api\n    ]);\n    var listenForCapture = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function listenForCapture() {\n        var options = {\n            passive: false,\n            capture: true\n        };\n        unbindEventsRef.current = bindEvents(window, [\n            preventForcePressBinding,\n            startCaptureBinding\n        ], options);\n    }, [\n        preventForcePressBinding,\n        startCaptureBinding\n    ]);\n    var stop = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var current = phaseRef.current;\n        if (current.type === \"IDLE\") {\n            return;\n        }\n        phaseRef.current = idle$1;\n        unbindEventsRef.current();\n        listenForCapture();\n    }, [\n        listenForCapture\n    ]);\n    var cancel = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var phase = phaseRef.current;\n        stop();\n        if (phase.type === \"DRAGGING\") {\n            phase.actions.cancel({\n                shouldBlockNextClick: true\n            });\n        }\n        if (phase.type === \"PENDING\") {\n            phase.actions.abort();\n        }\n    }, [\n        stop\n    ]);\n    var bindCapturingEvents = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function bindCapturingEvents() {\n        var options = {\n            capture: true,\n            passive: false\n        };\n        var bindings = getCaptureBindings({\n            cancel: cancel,\n            completed: stop,\n            getPhase: function getPhase() {\n                return phaseRef.current;\n            },\n            setPhase: function setPhase(phase) {\n                phaseRef.current = phase;\n            }\n        });\n        unbindEventsRef.current = bindEvents(window, bindings, options);\n    }, [\n        cancel,\n        stop\n    ]);\n    var startPendingDrag = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function startPendingDrag(actions, point) {\n        !(phaseRef.current.type === \"IDLE\") ?  true ? invariant(false, \"Expected to move from IDLE to PENDING drag\") : 0 : void 0;\n        phaseRef.current = {\n            type: \"PENDING\",\n            point: point,\n            actions: actions\n        };\n        bindCapturingEvents();\n    }, [\n        bindCapturingEvents\n    ]);\n    useIsomorphicLayoutEffect(function mount() {\n        listenForCapture();\n        return function unmount() {\n            unbindEventsRef.current();\n        };\n    }, [\n        listenForCapture\n    ]);\n}\nvar _scrollJumpKeys;\nfunction noop$1() {}\nvar scrollJumpKeys = (_scrollJumpKeys = {}, _scrollJumpKeys[pageDown] = true, _scrollJumpKeys[pageUp] = true, _scrollJumpKeys[home] = true, _scrollJumpKeys[end] = true, _scrollJumpKeys);\nfunction getDraggingBindings(actions, stop) {\n    function cancel() {\n        stop();\n        actions.cancel();\n    }\n    function drop() {\n        stop();\n        actions.drop();\n    }\n    return [\n        {\n            eventName: \"keydown\",\n            fn: function fn(event) {\n                if (event.keyCode === escape) {\n                    event.preventDefault();\n                    cancel();\n                    return;\n                }\n                if (event.keyCode === space) {\n                    event.preventDefault();\n                    drop();\n                    return;\n                }\n                if (event.keyCode === arrowDown) {\n                    event.preventDefault();\n                    actions.moveDown();\n                    return;\n                }\n                if (event.keyCode === arrowUp) {\n                    event.preventDefault();\n                    actions.moveUp();\n                    return;\n                }\n                if (event.keyCode === arrowRight) {\n                    event.preventDefault();\n                    actions.moveRight();\n                    return;\n                }\n                if (event.keyCode === arrowLeft) {\n                    event.preventDefault();\n                    actions.moveLeft();\n                    return;\n                }\n                if (scrollJumpKeys[event.keyCode]) {\n                    event.preventDefault();\n                    return;\n                }\n                preventStandardKeyEvents(event);\n            }\n        },\n        {\n            eventName: \"mousedown\",\n            fn: cancel\n        },\n        {\n            eventName: \"mouseup\",\n            fn: cancel\n        },\n        {\n            eventName: \"click\",\n            fn: cancel\n        },\n        {\n            eventName: \"touchstart\",\n            fn: cancel\n        },\n        {\n            eventName: \"resize\",\n            fn: cancel\n        },\n        {\n            eventName: \"wheel\",\n            fn: cancel,\n            options: {\n                passive: true\n            }\n        },\n        {\n            eventName: supportedEventName,\n            fn: cancel\n        }\n    ];\n}\nfunction useKeyboardSensor(api) {\n    var unbindEventsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(noop$1);\n    var startCaptureBinding = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            eventName: \"keydown\",\n            fn: function onKeyDown(event) {\n                if (event.defaultPrevented) {\n                    return;\n                }\n                if (event.keyCode !== space) {\n                    return;\n                }\n                var draggableId = api.findClosestDraggableId(event);\n                if (!draggableId) {\n                    return;\n                }\n                var preDrag = api.tryGetLock(draggableId, stop, {\n                    sourceEvent: event\n                });\n                if (!preDrag) {\n                    return;\n                }\n                event.preventDefault();\n                var isCapturing = true;\n                var actions = preDrag.snapLift();\n                unbindEventsRef.current();\n                function stop() {\n                    !isCapturing ?  true ? invariant(false, \"Cannot stop capturing a keyboard drag when not capturing\") : 0 : void 0;\n                    isCapturing = false;\n                    unbindEventsRef.current();\n                    listenForCapture();\n                }\n                unbindEventsRef.current = bindEvents(window, getDraggingBindings(actions, stop), {\n                    capture: true,\n                    passive: false\n                });\n            }\n        };\n    }, [\n        api\n    ]);\n    var listenForCapture = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function tryStartCapture() {\n        var options = {\n            passive: false,\n            capture: true\n        };\n        unbindEventsRef.current = bindEvents(window, [\n            startCaptureBinding\n        ], options);\n    }, [\n        startCaptureBinding\n    ]);\n    useIsomorphicLayoutEffect(function mount() {\n        listenForCapture();\n        return function unmount() {\n            unbindEventsRef.current();\n        };\n    }, [\n        listenForCapture\n    ]);\n}\nvar idle$2 = {\n    type: \"IDLE\"\n};\nvar timeForLongPress = 120;\nvar forcePressThreshold = 0.15;\nfunction getWindowBindings(_ref) {\n    var cancel = _ref.cancel, getPhase = _ref.getPhase;\n    return [\n        {\n            eventName: \"orientationchange\",\n            fn: cancel\n        },\n        {\n            eventName: \"resize\",\n            fn: cancel\n        },\n        {\n            eventName: \"contextmenu\",\n            fn: function fn(event) {\n                event.preventDefault();\n            }\n        },\n        {\n            eventName: \"keydown\",\n            fn: function fn(event) {\n                if (getPhase().type !== \"DRAGGING\") {\n                    cancel();\n                    return;\n                }\n                if (event.keyCode === escape) {\n                    event.preventDefault();\n                }\n                cancel();\n            }\n        },\n        {\n            eventName: supportedEventName,\n            fn: cancel\n        }\n    ];\n}\nfunction getHandleBindings(_ref2) {\n    var cancel = _ref2.cancel, completed = _ref2.completed, getPhase = _ref2.getPhase;\n    return [\n        {\n            eventName: \"touchmove\",\n            options: {\n                capture: false\n            },\n            fn: function fn(event) {\n                var phase = getPhase();\n                if (phase.type !== \"DRAGGING\") {\n                    cancel();\n                    return;\n                }\n                phase.hasMoved = true;\n                var _event$touches$ = event.touches[0], clientX = _event$touches$.clientX, clientY = _event$touches$.clientY;\n                var point = {\n                    x: clientX,\n                    y: clientY\n                };\n                event.preventDefault();\n                phase.actions.move(point);\n            }\n        },\n        {\n            eventName: \"touchend\",\n            fn: function fn(event) {\n                var phase = getPhase();\n                if (phase.type !== \"DRAGGING\") {\n                    cancel();\n                    return;\n                }\n                event.preventDefault();\n                phase.actions.drop({\n                    shouldBlockNextClick: true\n                });\n                completed();\n            }\n        },\n        {\n            eventName: \"touchcancel\",\n            fn: function fn(event) {\n                if (getPhase().type !== \"DRAGGING\") {\n                    cancel();\n                    return;\n                }\n                event.preventDefault();\n                cancel();\n            }\n        },\n        {\n            eventName: \"touchforcechange\",\n            fn: function fn(event) {\n                var phase = getPhase();\n                !(phase.type !== \"IDLE\") ?  true ? invariant(false) : 0 : void 0;\n                var touch = event.touches[0];\n                if (!touch) {\n                    return;\n                }\n                var isForcePress = touch.force >= forcePressThreshold;\n                if (!isForcePress) {\n                    return;\n                }\n                var shouldRespect = phase.actions.shouldRespectForcePress();\n                if (phase.type === \"PENDING\") {\n                    if (shouldRespect) {\n                        cancel();\n                    }\n                    return;\n                }\n                if (shouldRespect) {\n                    if (phase.hasMoved) {\n                        event.preventDefault();\n                        return;\n                    }\n                    cancel();\n                    return;\n                }\n                event.preventDefault();\n            }\n        },\n        {\n            eventName: supportedEventName,\n            fn: cancel\n        }\n    ];\n}\nfunction useTouchSensor(api) {\n    var phaseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(idle$2);\n    var unbindEventsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(noop);\n    var getPhase = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function getPhase() {\n        return phaseRef.current;\n    }, []);\n    var setPhase = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function setPhase(phase) {\n        phaseRef.current = phase;\n    }, []);\n    var startCaptureBinding = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            eventName: \"touchstart\",\n            fn: function onTouchStart(event) {\n                if (event.defaultPrevented) {\n                    return;\n                }\n                var draggableId = api.findClosestDraggableId(event);\n                if (!draggableId) {\n                    return;\n                }\n                var actions = api.tryGetLock(draggableId, stop, {\n                    sourceEvent: event\n                });\n                if (!actions) {\n                    return;\n                }\n                var touch = event.touches[0];\n                var clientX = touch.clientX, clientY = touch.clientY;\n                var point = {\n                    x: clientX,\n                    y: clientY\n                };\n                unbindEventsRef.current();\n                startPendingDrag(actions, point);\n            }\n        };\n    }, [\n        api\n    ]);\n    var listenForCapture = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function listenForCapture() {\n        var options = {\n            capture: true,\n            passive: false\n        };\n        unbindEventsRef.current = bindEvents(window, [\n            startCaptureBinding\n        ], options);\n    }, [\n        startCaptureBinding\n    ]);\n    var stop = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var current = phaseRef.current;\n        if (current.type === \"IDLE\") {\n            return;\n        }\n        if (current.type === \"PENDING\") {\n            clearTimeout(current.longPressTimerId);\n        }\n        setPhase(idle$2);\n        unbindEventsRef.current();\n        listenForCapture();\n    }, [\n        listenForCapture,\n        setPhase\n    ]);\n    var cancel = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var phase = phaseRef.current;\n        stop();\n        if (phase.type === \"DRAGGING\") {\n            phase.actions.cancel({\n                shouldBlockNextClick: true\n            });\n        }\n        if (phase.type === \"PENDING\") {\n            phase.actions.abort();\n        }\n    }, [\n        stop\n    ]);\n    var bindCapturingEvents = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function bindCapturingEvents() {\n        var options = {\n            capture: true,\n            passive: false\n        };\n        var args = {\n            cancel: cancel,\n            completed: stop,\n            getPhase: getPhase\n        };\n        var unbindTarget = bindEvents(window, getHandleBindings(args), options);\n        var unbindWindow = bindEvents(window, getWindowBindings(args), options);\n        unbindEventsRef.current = function unbindAll() {\n            unbindTarget();\n            unbindWindow();\n        };\n    }, [\n        cancel,\n        getPhase,\n        stop\n    ]);\n    var startDragging = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function startDragging() {\n        var phase = getPhase();\n        !(phase.type === \"PENDING\") ?  true ? invariant(false, \"Cannot start dragging from phase \" + phase.type) : 0 : void 0;\n        var actions = phase.actions.fluidLift(phase.point);\n        setPhase({\n            type: \"DRAGGING\",\n            actions: actions,\n            hasMoved: false\n        });\n    }, [\n        getPhase,\n        setPhase\n    ]);\n    var startPendingDrag = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function startPendingDrag(actions, point) {\n        !(getPhase().type === \"IDLE\") ?  true ? invariant(false, \"Expected to move from IDLE to PENDING drag\") : 0 : void 0;\n        var longPressTimerId = setTimeout(startDragging, timeForLongPress);\n        setPhase({\n            type: \"PENDING\",\n            point: point,\n            actions: actions,\n            longPressTimerId: longPressTimerId\n        });\n        bindCapturingEvents();\n    }, [\n        bindCapturingEvents,\n        getPhase,\n        setPhase,\n        startDragging\n    ]);\n    useIsomorphicLayoutEffect(function mount() {\n        listenForCapture();\n        return function unmount() {\n            unbindEventsRef.current();\n            var phase = getPhase();\n            if (phase.type === \"PENDING\") {\n                clearTimeout(phase.longPressTimerId);\n                setPhase(idle$2);\n            }\n        };\n    }, [\n        getPhase,\n        listenForCapture,\n        setPhase\n    ]);\n    useIsomorphicLayoutEffect(function webkitHack() {\n        var unbind = bindEvents(window, [\n            {\n                eventName: \"touchmove\",\n                fn: function fn() {},\n                options: {\n                    capture: false,\n                    passive: false\n                }\n            }\n        ]);\n        return unbind;\n    }, []);\n}\nfunction useValidateSensorHooks(sensorHooks) {\n    useDev(function() {\n        var previousRef = usePrevious(sensorHooks);\n        useDevSetupWarning(function() {\n            !(previousRef.current.length === sensorHooks.length) ?  true ? invariant(false, \"Cannot change the amount of sensor hooks after mounting\") : 0 : void 0;\n        });\n    });\n}\nvar interactiveTagNames = {\n    input: true,\n    button: true,\n    textarea: true,\n    select: true,\n    option: true,\n    optgroup: true,\n    video: true,\n    audio: true\n};\nfunction isAnInteractiveElement(parent, current) {\n    if (current == null) {\n        return false;\n    }\n    var hasAnInteractiveTag = Boolean(interactiveTagNames[current.tagName.toLowerCase()]);\n    if (hasAnInteractiveTag) {\n        return true;\n    }\n    var attribute = current.getAttribute(\"contenteditable\");\n    if (attribute === \"true\" || attribute === \"\") {\n        return true;\n    }\n    if (current === parent) {\n        return false;\n    }\n    return isAnInteractiveElement(parent, current.parentElement);\n}\nfunction isEventInInteractiveElement(draggable, event) {\n    var target = event.target;\n    if (!isHtmlElement(target)) {\n        return false;\n    }\n    return isAnInteractiveElement(draggable, target);\n}\nvar getBorderBoxCenterPosition = function(el) {\n    return (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getRect)(el.getBoundingClientRect()).center;\n};\nfunction isElement(el) {\n    return el instanceof getWindowFromEl(el).Element;\n}\nvar supportedMatchesName = function() {\n    var base = \"matches\";\n    if (typeof document === \"undefined\") {\n        return base;\n    }\n    var candidates = [\n        base,\n        \"msMatchesSelector\",\n        \"webkitMatchesSelector\"\n    ];\n    var value = find(candidates, function(name) {\n        return name in Element.prototype;\n    });\n    return value || base;\n}();\nfunction closestPonyfill(el, selector) {\n    if (el == null) {\n        return null;\n    }\n    if (el[supportedMatchesName](selector)) {\n        return el;\n    }\n    return closestPonyfill(el.parentElement, selector);\n}\nfunction closest$1(el, selector) {\n    if (el.closest) {\n        return el.closest(selector);\n    }\n    return closestPonyfill(el, selector);\n}\nfunction getSelector(contextId) {\n    return \"[\" + dragHandle.contextId + '=\"' + contextId + '\"]';\n}\nfunction findClosestDragHandleFromEvent(contextId, event) {\n    var target = event.target;\n    if (!isElement(target)) {\n         true ? warning(\"event.target must be a Element\") : 0;\n        return null;\n    }\n    var selector = getSelector(contextId);\n    var handle = closest$1(target, selector);\n    if (!handle) {\n        return null;\n    }\n    if (!isHtmlElement(handle)) {\n         true ? warning(\"drag handle must be a HTMLElement\") : 0;\n        return null;\n    }\n    return handle;\n}\nfunction tryGetClosestDraggableIdFromEvent(contextId, event) {\n    var handle = findClosestDragHandleFromEvent(contextId, event);\n    if (!handle) {\n        return null;\n    }\n    return handle.getAttribute(dragHandle.draggableId);\n}\nfunction findDraggable(contextId, draggableId) {\n    var selector = \"[\" + draggable.contextId + '=\"' + contextId + '\"]';\n    var possible = toArray(document.querySelectorAll(selector));\n    var draggable$1 = find(possible, function(el) {\n        return el.getAttribute(draggable.id) === draggableId;\n    });\n    if (!draggable$1) {\n        return null;\n    }\n    if (!isHtmlElement(draggable$1)) {\n         true ? warning(\"Draggable element is not a HTMLElement\") : 0;\n        return null;\n    }\n    return draggable$1;\n}\nfunction preventDefault(event) {\n    event.preventDefault();\n}\nfunction _isActive(_ref) {\n    var expected = _ref.expected, phase = _ref.phase, isLockActive = _ref.isLockActive, shouldWarn = _ref.shouldWarn;\n    if (!isLockActive()) {\n        if (shouldWarn) {\n             true ? warning(\"\\n        Cannot perform action.\\n        The sensor no longer has an action lock.\\n\\n        Tips:\\n\\n        - Throw away your action handlers when forceStop() is called\\n        - Check actions.isActive() if you really need to\\n      \") : 0;\n        }\n        return false;\n    }\n    if (expected !== phase) {\n        if (shouldWarn) {\n             true ? warning(\"\\n        Cannot perform action.\\n        The actions you used belong to an outdated phase\\n\\n        Current phase: \" + expected + \"\\n        You called an action from outdated phase: \" + phase + \"\\n\\n        Tips:\\n\\n        - Do not use preDragActions actions after calling preDragActions.lift()\\n      \") : 0;\n        }\n        return false;\n    }\n    return true;\n}\nfunction canStart(_ref2) {\n    var lockAPI = _ref2.lockAPI, store = _ref2.store, registry = _ref2.registry, draggableId = _ref2.draggableId;\n    if (lockAPI.isClaimed()) {\n        return false;\n    }\n    var entry = registry.draggable.findById(draggableId);\n    if (!entry) {\n         true ? warning(\"Unable to find draggable with id: \" + draggableId) : 0;\n        return false;\n    }\n    if (!entry.options.isEnabled) {\n        return false;\n    }\n    if (!canStartDrag(store.getState(), draggableId)) {\n        return false;\n    }\n    return true;\n}\nfunction tryStart(_ref3) {\n    var lockAPI = _ref3.lockAPI, contextId = _ref3.contextId, store = _ref3.store, registry = _ref3.registry, draggableId = _ref3.draggableId, forceSensorStop = _ref3.forceSensorStop, sourceEvent = _ref3.sourceEvent;\n    var shouldStart = canStart({\n        lockAPI: lockAPI,\n        store: store,\n        registry: registry,\n        draggableId: draggableId\n    });\n    if (!shouldStart) {\n        return null;\n    }\n    var entry = registry.draggable.getById(draggableId);\n    var el = findDraggable(contextId, entry.descriptor.id);\n    if (!el) {\n         true ? warning(\"Unable to find draggable element with id: \" + draggableId) : 0;\n        return null;\n    }\n    if (sourceEvent && !entry.options.canDragInteractiveElements && isEventInInteractiveElement(el, sourceEvent)) {\n        return null;\n    }\n    var lock = lockAPI.claim(forceSensorStop || noop);\n    var phase = \"PRE_DRAG\";\n    function getShouldRespectForcePress() {\n        return entry.options.shouldRespectForcePress;\n    }\n    function isLockActive() {\n        return lockAPI.isActive(lock);\n    }\n    function tryDispatch(expected, getAction) {\n        if (_isActive({\n            expected: expected,\n            phase: phase,\n            isLockActive: isLockActive,\n            shouldWarn: true\n        })) {\n            store.dispatch(getAction());\n        }\n    }\n    var tryDispatchWhenDragging = tryDispatch.bind(null, \"DRAGGING\");\n    function lift$1(args) {\n        function completed() {\n            lockAPI.release();\n            phase = \"COMPLETED\";\n        }\n        if (phase !== \"PRE_DRAG\") {\n            completed();\n            !(phase === \"PRE_DRAG\") ?  true ? invariant(false, \"Cannot lift in phase \" + phase) : 0 : void 0;\n        }\n        store.dispatch(lift(args.liftActionArgs));\n        phase = \"DRAGGING\";\n        function finish(reason, options) {\n            if (options === void 0) {\n                options = {\n                    shouldBlockNextClick: false\n                };\n            }\n            args.cleanup();\n            if (options.shouldBlockNextClick) {\n                var unbind = bindEvents(window, [\n                    {\n                        eventName: \"click\",\n                        fn: preventDefault,\n                        options: {\n                            once: true,\n                            passive: false,\n                            capture: true\n                        }\n                    }\n                ]);\n                setTimeout(unbind);\n            }\n            completed();\n            store.dispatch(drop({\n                reason: reason\n            }));\n        }\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            isActive: function isActive() {\n                return _isActive({\n                    expected: \"DRAGGING\",\n                    phase: phase,\n                    isLockActive: isLockActive,\n                    shouldWarn: false\n                });\n            },\n            shouldRespectForcePress: getShouldRespectForcePress,\n            drop: function drop(options) {\n                return finish(\"DROP\", options);\n            },\n            cancel: function cancel(options) {\n                return finish(\"CANCEL\", options);\n            }\n        }, args.actions);\n    }\n    function fluidLift(clientSelection) {\n        var move$1 = (0,raf_schd__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(function(client) {\n            tryDispatchWhenDragging(function() {\n                return move({\n                    client: client\n                });\n            });\n        });\n        var api = lift$1({\n            liftActionArgs: {\n                id: draggableId,\n                clientSelection: clientSelection,\n                movementMode: \"FLUID\"\n            },\n            cleanup: function cleanup() {\n                return move$1.cancel();\n            },\n            actions: {\n                move: move$1\n            }\n        });\n        return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, api, {\n            move: move$1\n        });\n    }\n    function snapLift() {\n        var actions = {\n            moveUp: function moveUp$1() {\n                return tryDispatchWhenDragging(moveUp);\n            },\n            moveRight: function moveRight$1() {\n                return tryDispatchWhenDragging(moveRight);\n            },\n            moveDown: function moveDown$1() {\n                return tryDispatchWhenDragging(moveDown);\n            },\n            moveLeft: function moveLeft$1() {\n                return tryDispatchWhenDragging(moveLeft);\n            }\n        };\n        return lift$1({\n            liftActionArgs: {\n                id: draggableId,\n                clientSelection: getBorderBoxCenterPosition(el),\n                movementMode: \"SNAP\"\n            },\n            cleanup: noop,\n            actions: actions\n        });\n    }\n    function abortPreDrag() {\n        var shouldRelease = _isActive({\n            expected: \"PRE_DRAG\",\n            phase: phase,\n            isLockActive: isLockActive,\n            shouldWarn: true\n        });\n        if (shouldRelease) {\n            lockAPI.release();\n        }\n    }\n    var preDrag = {\n        isActive: function isActive() {\n            return _isActive({\n                expected: \"PRE_DRAG\",\n                phase: phase,\n                isLockActive: isLockActive,\n                shouldWarn: false\n            });\n        },\n        shouldRespectForcePress: getShouldRespectForcePress,\n        fluidLift: fluidLift,\n        snapLift: snapLift,\n        abort: abortPreDrag\n    };\n    return preDrag;\n}\nvar defaultSensors = [\n    useMouseSensor,\n    useKeyboardSensor,\n    useTouchSensor\n];\nfunction useSensorMarshal(_ref4) {\n    var contextId = _ref4.contextId, store = _ref4.store, registry = _ref4.registry, customSensors = _ref4.customSensors, enableDefaultSensors = _ref4.enableDefaultSensors;\n    var useSensors = [].concat(enableDefaultSensors ? defaultSensors : [], customSensors || []);\n    var lockAPI = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function() {\n        return create();\n    })[0];\n    var tryAbandonLock = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function tryAbandonLock(previous, current) {\n        if (previous.isDragging && !current.isDragging) {\n            lockAPI.tryAbandon();\n        }\n    }, [\n        lockAPI\n    ]);\n    useIsomorphicLayoutEffect(function listenToStore() {\n        var previous = store.getState();\n        var unsubscribe = store.subscribe(function() {\n            var current = store.getState();\n            tryAbandonLock(previous, current);\n            previous = current;\n        });\n        return unsubscribe;\n    }, [\n        lockAPI,\n        store,\n        tryAbandonLock\n    ]);\n    useIsomorphicLayoutEffect(function() {\n        return lockAPI.tryAbandon;\n    }, [\n        lockAPI.tryAbandon\n    ]);\n    var canGetLock = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(draggableId) {\n        return canStart({\n            lockAPI: lockAPI,\n            registry: registry,\n            store: store,\n            draggableId: draggableId\n        });\n    }, [\n        lockAPI,\n        registry,\n        store\n    ]);\n    var tryGetLock = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(draggableId, forceStop, options) {\n        return tryStart({\n            lockAPI: lockAPI,\n            registry: registry,\n            contextId: contextId,\n            store: store,\n            draggableId: draggableId,\n            forceSensorStop: forceStop,\n            sourceEvent: options && options.sourceEvent ? options.sourceEvent : null\n        });\n    }, [\n        contextId,\n        lockAPI,\n        registry,\n        store\n    ]);\n    var findClosestDraggableId = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(event) {\n        return tryGetClosestDraggableIdFromEvent(contextId, event);\n    }, [\n        contextId\n    ]);\n    var findOptionsForDraggable = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(id) {\n        var entry = registry.draggable.findById(id);\n        return entry ? entry.options : null;\n    }, [\n        registry.draggable\n    ]);\n    var tryReleaseLock = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function tryReleaseLock() {\n        if (!lockAPI.isClaimed()) {\n            return;\n        }\n        lockAPI.tryAbandon();\n        if (store.getState().phase !== \"IDLE\") {\n            store.dispatch(flush());\n        }\n    }, [\n        lockAPI,\n        store\n    ]);\n    var isLockClaimed = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(lockAPI.isClaimed, [\n        lockAPI\n    ]);\n    var api = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            canGetLock: canGetLock,\n            tryGetLock: tryGetLock,\n            findClosestDraggableId: findClosestDraggableId,\n            findOptionsForDraggable: findOptionsForDraggable,\n            tryReleaseLock: tryReleaseLock,\n            isLockClaimed: isLockClaimed\n        };\n    }, [\n        canGetLock,\n        tryGetLock,\n        findClosestDraggableId,\n        findOptionsForDraggable,\n        tryReleaseLock,\n        isLockClaimed\n    ]);\n    useValidateSensorHooks(useSensors);\n    for(var i = 0; i < useSensors.length; i++){\n        useSensors[i](api);\n    }\n}\nvar createResponders = function createResponders(props) {\n    return {\n        onBeforeCapture: props.onBeforeCapture,\n        onBeforeDragStart: props.onBeforeDragStart,\n        onDragStart: props.onDragStart,\n        onDragEnd: props.onDragEnd,\n        onDragUpdate: props.onDragUpdate\n    };\n};\nfunction getStore(lazyRef) {\n    !lazyRef.current ?  true ? invariant(false, \"Could not find store from lazy ref\") : 0 : void 0;\n    return lazyRef.current;\n}\nfunction App(props) {\n    var contextId = props.contextId, setCallbacks = props.setCallbacks, sensors = props.sensors, nonce = props.nonce, dragHandleUsageInstructions = props.dragHandleUsageInstructions;\n    var lazyStoreRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    useStartupValidation();\n    var lastPropsRef = usePrevious(props);\n    var getResponders = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        return createResponders(lastPropsRef.current);\n    }, [\n        lastPropsRef\n    ]);\n    var announce = useAnnouncer(contextId);\n    var dragHandleUsageInstructionsId = useHiddenTextElement({\n        contextId: contextId,\n        text: dragHandleUsageInstructions\n    });\n    var styleMarshal = useStyleMarshal(contextId, nonce);\n    var lazyDispatch = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(action) {\n        getStore(lazyStoreRef).dispatch(action);\n    }, []);\n    var marshalCallbacks = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return (0,redux__WEBPACK_IMPORTED_MODULE_8__.bindActionCreators)({\n            publishWhileDragging: publishWhileDragging,\n            updateDroppableScroll: updateDroppableScroll,\n            updateDroppableIsEnabled: updateDroppableIsEnabled,\n            updateDroppableIsCombineEnabled: updateDroppableIsCombineEnabled,\n            collectionStarting: collectionStarting\n        }, lazyDispatch);\n    }, [\n        lazyDispatch\n    ]);\n    var registry = useRegistry();\n    var dimensionMarshal = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return createDimensionMarshal(registry, marshalCallbacks);\n    }, [\n        registry,\n        marshalCallbacks\n    ]);\n    var autoScroller = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return createAutoScroller((0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({\n            scrollWindow: scrollWindow,\n            scrollDroppable: dimensionMarshal.scrollDroppable\n        }, (0,redux__WEBPACK_IMPORTED_MODULE_8__.bindActionCreators)({\n            move: move\n        }, lazyDispatch)));\n    }, [\n        dimensionMarshal.scrollDroppable,\n        lazyDispatch\n    ]);\n    var focusMarshal = useFocusMarshal(contextId);\n    var store = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return createStore({\n            announce: announce,\n            autoScroller: autoScroller,\n            dimensionMarshal: dimensionMarshal,\n            focusMarshal: focusMarshal,\n            getResponders: getResponders,\n            styleMarshal: styleMarshal\n        });\n    }, [\n        announce,\n        autoScroller,\n        dimensionMarshal,\n        focusMarshal,\n        getResponders,\n        styleMarshal\n    ]);\n    if (true) {\n        if (lazyStoreRef.current && lazyStoreRef.current !== store) {\n             true ? warning(\"unexpected store change\") : 0;\n        }\n    }\n    lazyStoreRef.current = store;\n    var tryResetStore = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var current = getStore(lazyStoreRef);\n        var state = current.getState();\n        if (state.phase !== \"IDLE\") {\n            current.dispatch(flush());\n        }\n    }, []);\n    var isDragging = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var state = getStore(lazyStoreRef).getState();\n        return state.isDragging || state.phase === \"DROP_ANIMATING\";\n    }, []);\n    var appCallbacks = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            isDragging: isDragging,\n            tryAbort: tryResetStore\n        };\n    }, [\n        isDragging,\n        tryResetStore\n    ]);\n    setCallbacks(appCallbacks);\n    var getCanLift = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(id) {\n        return canStartDrag(getStore(lazyStoreRef).getState(), id);\n    }, []);\n    var getIsMovementAllowed = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        return isMovementAllowed(getStore(lazyStoreRef).getState());\n    }, []);\n    var appContext = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            marshal: dimensionMarshal,\n            focus: focusMarshal,\n            contextId: contextId,\n            canLift: getCanLift,\n            isMovementAllowed: getIsMovementAllowed,\n            dragHandleUsageInstructionsId: dragHandleUsageInstructionsId,\n            registry: registry\n        };\n    }, [\n        contextId,\n        dimensionMarshal,\n        dragHandleUsageInstructionsId,\n        focusMarshal,\n        getCanLift,\n        getIsMovementAllowed,\n        registry\n    ]);\n    useSensorMarshal({\n        contextId: contextId,\n        store: store,\n        registry: registry,\n        customSensors: sensors,\n        enableDefaultSensors: props.enableDefaultSensors !== false\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        return tryResetStore;\n    }, [\n        tryResetStore\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AppContext.Provider, {\n        value: appContext\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_redux__WEBPACK_IMPORTED_MODULE_3__.Provider, {\n        context: StoreContext,\n        store: store\n    }, props.children));\n}\nvar count$1 = 0;\nfunction reset$1() {\n    count$1 = 0;\n}\nfunction useInstanceCount() {\n    return (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return \"\" + count$1++;\n    }, []);\n}\nfunction resetServerContext() {\n    reset$1();\n    reset();\n}\nfunction DragDropContext(props) {\n    var contextId = useInstanceCount();\n    var dragHandleUsageInstructions = props.dragHandleUsageInstructions || preset.dragHandleUsageInstructions;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ErrorBoundary, null, function(setCallbacks) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(App, {\n            nonce: props.nonce,\n            contextId: contextId,\n            setCallbacks: setCallbacks,\n            dragHandleUsageInstructions: dragHandleUsageInstructions,\n            enableDefaultSensors: props.enableDefaultSensors,\n            sensors: props.sensors,\n            onBeforeCapture: props.onBeforeCapture,\n            onBeforeDragStart: props.onBeforeDragStart,\n            onDragStart: props.onDragStart,\n            onDragUpdate: props.onDragUpdate,\n            onDragEnd: props.onDragEnd\n        }, props.children);\n    });\n}\nvar isEqual$1 = function isEqual(base) {\n    return function(value) {\n        return base === value;\n    };\n};\nvar isScroll = isEqual$1(\"scroll\");\nvar isAuto = isEqual$1(\"auto\");\nvar isVisible$1 = isEqual$1(\"visible\");\nvar isEither = function isEither(overflow, fn) {\n    return fn(overflow.overflowX) || fn(overflow.overflowY);\n};\nvar isBoth = function isBoth(overflow, fn) {\n    return fn(overflow.overflowX) && fn(overflow.overflowY);\n};\nvar isElementScrollable = function isElementScrollable(el) {\n    var style = window.getComputedStyle(el);\n    var overflow = {\n        overflowX: style.overflowX,\n        overflowY: style.overflowY\n    };\n    return isEither(overflow, isScroll) || isEither(overflow, isAuto);\n};\nvar isBodyScrollable = function isBodyScrollable() {\n    if (false) {}\n    var body = getBodyElement();\n    var html = document.documentElement;\n    !html ?  true ? invariant(false) : 0 : void 0;\n    if (!isElementScrollable(body)) {\n        return false;\n    }\n    var htmlStyle = window.getComputedStyle(html);\n    var htmlOverflow = {\n        overflowX: htmlStyle.overflowX,\n        overflowY: htmlStyle.overflowY\n    };\n    if (isBoth(htmlOverflow, isVisible$1)) {\n        return false;\n    }\n     true ? warning(\"\\n    We have detected that your <body> element might be a scroll container.\\n    We have found no reliable way of detecting whether the <body> element is a scroll container.\\n    Under most circumstances a <body> scroll bar will be on the <html> element (document.documentElement)\\n\\n    Because we cannot determine if the <body> is a scroll container, and generally it is not one,\\n    we will be treating the <body> as *not* a scroll container\\n\\n    More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/how-we-detect-scroll-containers.md\\n  \") : 0;\n    return false;\n};\nvar getClosestScrollable = function getClosestScrollable(el) {\n    if (el == null) {\n        return null;\n    }\n    if (el === document.body) {\n        return isBodyScrollable() ? el : null;\n    }\n    if (el === document.documentElement) {\n        return null;\n    }\n    if (!isElementScrollable(el)) {\n        return getClosestScrollable(el.parentElement);\n    }\n    return el;\n};\nvar checkForNestedScrollContainers = function(scrollable) {\n    if (!scrollable) {\n        return;\n    }\n    var anotherScrollParent = getClosestScrollable(scrollable.parentElement);\n    if (!anotherScrollParent) {\n        return;\n    }\n     true ? warning(\"\\n    Droppable: unsupported nested scroll container detected.\\n    A Droppable can only have one scroll parent (which can be itself)\\n    Nested scroll containers are currently not supported.\\n\\n    We hope to support nested scroll containers soon: https://github.com/atlassian/react-beautiful-dnd/issues/131\\n  \") : 0;\n};\nvar getScroll$1 = function(el) {\n    return {\n        x: el.scrollLeft,\n        y: el.scrollTop\n    };\n};\nvar getIsFixed = function getIsFixed(el) {\n    if (!el) {\n        return false;\n    }\n    var style = window.getComputedStyle(el);\n    if (style.position === \"fixed\") {\n        return true;\n    }\n    return getIsFixed(el.parentElement);\n};\nvar getEnv = function(start) {\n    var closestScrollable = getClosestScrollable(start);\n    var isFixedOnPage = getIsFixed(start);\n    return {\n        closestScrollable: closestScrollable,\n        isFixedOnPage: isFixedOnPage\n    };\n};\nvar getDroppableDimension = function(_ref) {\n    var descriptor = _ref.descriptor, isEnabled = _ref.isEnabled, isCombineEnabled = _ref.isCombineEnabled, isFixedOnPage = _ref.isFixedOnPage, direction = _ref.direction, client = _ref.client, page = _ref.page, closest = _ref.closest;\n    var frame = function() {\n        if (!closest) {\n            return null;\n        }\n        var scrollSize = closest.scrollSize, frameClient = closest.client;\n        var maxScroll = getMaxScroll({\n            scrollHeight: scrollSize.scrollHeight,\n            scrollWidth: scrollSize.scrollWidth,\n            height: frameClient.paddingBox.height,\n            width: frameClient.paddingBox.width\n        });\n        return {\n            pageMarginBox: closest.page.marginBox,\n            frameClient: frameClient,\n            scrollSize: scrollSize,\n            shouldClipSubject: closest.shouldClipSubject,\n            scroll: {\n                initial: closest.scroll,\n                current: closest.scroll,\n                max: maxScroll,\n                diff: {\n                    value: origin,\n                    displacement: origin\n                }\n            }\n        };\n    }();\n    var axis = direction === \"vertical\" ? vertical : horizontal;\n    var subject = getSubject({\n        page: page,\n        withPlaceholder: null,\n        axis: axis,\n        frame: frame\n    });\n    var dimension = {\n        descriptor: descriptor,\n        isCombineEnabled: isCombineEnabled,\n        isFixedOnPage: isFixedOnPage,\n        axis: axis,\n        isEnabled: isEnabled,\n        client: client,\n        page: page,\n        frame: frame,\n        subject: subject\n    };\n    return dimension;\n};\nvar getClient = function getClient(targetRef, closestScrollable) {\n    var base = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getBox)(targetRef);\n    if (!closestScrollable) {\n        return base;\n    }\n    if (targetRef !== closestScrollable) {\n        return base;\n    }\n    var top = base.paddingBox.top - closestScrollable.scrollTop;\n    var left = base.paddingBox.left - closestScrollable.scrollLeft;\n    var bottom = top + closestScrollable.scrollHeight;\n    var right = left + closestScrollable.scrollWidth;\n    var paddingBox = {\n        top: top,\n        right: right,\n        bottom: bottom,\n        left: left\n    };\n    var borderBox = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.expand)(paddingBox, base.border);\n    var client = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.createBox)({\n        borderBox: borderBox,\n        margin: base.margin,\n        border: base.border,\n        padding: base.padding\n    });\n    return client;\n};\nvar getDimension = function(_ref) {\n    var ref = _ref.ref, descriptor = _ref.descriptor, env = _ref.env, windowScroll = _ref.windowScroll, direction = _ref.direction, isDropDisabled = _ref.isDropDisabled, isCombineEnabled = _ref.isCombineEnabled, shouldClipSubject = _ref.shouldClipSubject;\n    var closestScrollable = env.closestScrollable;\n    var client = getClient(ref, closestScrollable);\n    var page = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.withScroll)(client, windowScroll);\n    var closest = function() {\n        if (!closestScrollable) {\n            return null;\n        }\n        var frameClient = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.getBox)(closestScrollable);\n        var scrollSize = {\n            scrollHeight: closestScrollable.scrollHeight,\n            scrollWidth: closestScrollable.scrollWidth\n        };\n        return {\n            client: frameClient,\n            page: (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.withScroll)(frameClient, windowScroll),\n            scroll: getScroll$1(closestScrollable),\n            scrollSize: scrollSize,\n            shouldClipSubject: shouldClipSubject\n        };\n    }();\n    var dimension = getDroppableDimension({\n        descriptor: descriptor,\n        isEnabled: !isDropDisabled,\n        isCombineEnabled: isCombineEnabled,\n        isFixedOnPage: env.isFixedOnPage,\n        direction: direction,\n        client: client,\n        page: page,\n        closest: closest\n    });\n    return dimension;\n};\nvar immediate = {\n    passive: false\n};\nvar delayed = {\n    passive: true\n};\nvar getListenerOptions = function(options) {\n    return options.shouldPublishImmediately ? immediate : delayed;\n};\nfunction useRequiredContext(Context) {\n    var result = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Context);\n    !result ?  true ? invariant(false, \"Could not find required context\") : 0 : void 0;\n    return result;\n}\nvar getClosestScrollableFromDrag = function getClosestScrollableFromDrag(dragging) {\n    return dragging && dragging.env.closestScrollable || null;\n};\nfunction useDroppablePublisher(args) {\n    var whileDraggingRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var appContext = useRequiredContext(AppContext);\n    var uniqueId = useUniqueId(\"droppable\");\n    var registry = appContext.registry, marshal = appContext.marshal;\n    var previousRef = usePrevious(args);\n    var descriptor = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            id: args.droppableId,\n            type: args.type,\n            mode: args.mode\n        };\n    }, [\n        args.droppableId,\n        args.mode,\n        args.type\n    ]);\n    var publishedDescriptorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(descriptor);\n    var memoizedUpdateScroll = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(x, y) {\n            !whileDraggingRef.current ?  true ? invariant(false, \"Can only update scroll when dragging\") : 0 : void 0;\n            var scroll = {\n                x: x,\n                y: y\n            };\n            marshal.updateDroppableScroll(descriptor.id, scroll);\n        });\n    }, [\n        descriptor.id,\n        marshal\n    ]);\n    var getClosestScroll = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var dragging = whileDraggingRef.current;\n        if (!dragging || !dragging.env.closestScrollable) {\n            return origin;\n        }\n        return getScroll$1(dragging.env.closestScrollable);\n    }, []);\n    var updateScroll = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var scroll = getClosestScroll();\n        memoizedUpdateScroll(scroll.x, scroll.y);\n    }, [\n        getClosestScroll,\n        memoizedUpdateScroll\n    ]);\n    var scheduleScrollUpdate = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return (0,raf_schd__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(updateScroll);\n    }, [\n        updateScroll\n    ]);\n    var onClosestScroll = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var dragging = whileDraggingRef.current;\n        var closest = getClosestScrollableFromDrag(dragging);\n        !(dragging && closest) ?  true ? invariant(false, \"Could not find scroll options while scrolling\") : 0 : void 0;\n        var options = dragging.scrollOptions;\n        if (options.shouldPublishImmediately) {\n            updateScroll();\n            return;\n        }\n        scheduleScrollUpdate();\n    }, [\n        scheduleScrollUpdate,\n        updateScroll\n    ]);\n    var getDimensionAndWatchScroll = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(windowScroll, options) {\n        !!whileDraggingRef.current ?  true ? invariant(false, \"Cannot collect a droppable while a drag is occurring\") : 0 : void 0;\n        var previous = previousRef.current;\n        var ref = previous.getDroppableRef();\n        !ref ?  true ? invariant(false, \"Cannot collect without a droppable ref\") : 0 : void 0;\n        var env = getEnv(ref);\n        var dragging = {\n            ref: ref,\n            descriptor: descriptor,\n            env: env,\n            scrollOptions: options\n        };\n        whileDraggingRef.current = dragging;\n        var dimension = getDimension({\n            ref: ref,\n            descriptor: descriptor,\n            env: env,\n            windowScroll: windowScroll,\n            direction: previous.direction,\n            isDropDisabled: previous.isDropDisabled,\n            isCombineEnabled: previous.isCombineEnabled,\n            shouldClipSubject: !previous.ignoreContainerClipping\n        });\n        var scrollable = env.closestScrollable;\n        if (scrollable) {\n            scrollable.setAttribute(scrollContainer.contextId, appContext.contextId);\n            scrollable.addEventListener(\"scroll\", onClosestScroll, getListenerOptions(dragging.scrollOptions));\n            if (true) {\n                checkForNestedScrollContainers(scrollable);\n            }\n        }\n        return dimension;\n    }, [\n        appContext.contextId,\n        descriptor,\n        onClosestScroll,\n        previousRef\n    ]);\n    var getScrollWhileDragging = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var dragging = whileDraggingRef.current;\n        var closest = getClosestScrollableFromDrag(dragging);\n        !(dragging && closest) ?  true ? invariant(false, \"Can only recollect Droppable client for Droppables that have a scroll container\") : 0 : void 0;\n        return getScroll$1(closest);\n    }, []);\n    var dragStopped = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        var dragging = whileDraggingRef.current;\n        !dragging ?  true ? invariant(false, \"Cannot stop drag when no active drag\") : 0 : void 0;\n        var closest = getClosestScrollableFromDrag(dragging);\n        whileDraggingRef.current = null;\n        if (!closest) {\n            return;\n        }\n        scheduleScrollUpdate.cancel();\n        closest.removeAttribute(scrollContainer.contextId);\n        closest.removeEventListener(\"scroll\", onClosestScroll, getListenerOptions(dragging.scrollOptions));\n    }, [\n        onClosestScroll,\n        scheduleScrollUpdate\n    ]);\n    var scroll = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(change) {\n        var dragging = whileDraggingRef.current;\n        !dragging ?  true ? invariant(false, \"Cannot scroll when there is no drag\") : 0 : void 0;\n        var closest = getClosestScrollableFromDrag(dragging);\n        !closest ?  true ? invariant(false, \"Cannot scroll a droppable with no closest scrollable\") : 0 : void 0;\n        closest.scrollTop += change.y;\n        closest.scrollLeft += change.x;\n    }, []);\n    var callbacks = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            getDimensionAndWatchScroll: getDimensionAndWatchScroll,\n            getScrollWhileDragging: getScrollWhileDragging,\n            dragStopped: dragStopped,\n            scroll: scroll\n        };\n    }, [\n        dragStopped,\n        getDimensionAndWatchScroll,\n        getScrollWhileDragging,\n        scroll\n    ]);\n    var entry = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            uniqueId: uniqueId,\n            descriptor: descriptor,\n            callbacks: callbacks\n        };\n    }, [\n        callbacks,\n        descriptor,\n        uniqueId\n    ]);\n    useIsomorphicLayoutEffect(function() {\n        publishedDescriptorRef.current = entry.descriptor;\n        registry.droppable.register(entry);\n        return function() {\n            if (whileDraggingRef.current) {\n                 true ? warning(\"Unsupported: changing the droppableId or type of a Droppable during a drag\") : 0;\n                dragStopped();\n            }\n            registry.droppable.unregister(entry);\n        };\n    }, [\n        callbacks,\n        descriptor,\n        dragStopped,\n        entry,\n        marshal,\n        registry.droppable\n    ]);\n    useIsomorphicLayoutEffect(function() {\n        if (!whileDraggingRef.current) {\n            return;\n        }\n        marshal.updateDroppableIsEnabled(publishedDescriptorRef.current.id, !args.isDropDisabled);\n    }, [\n        args.isDropDisabled,\n        marshal\n    ]);\n    useIsomorphicLayoutEffect(function() {\n        if (!whileDraggingRef.current) {\n            return;\n        }\n        marshal.updateDroppableIsCombineEnabled(publishedDescriptorRef.current.id, args.isCombineEnabled);\n    }, [\n        args.isCombineEnabled,\n        marshal\n    ]);\n}\nfunction noop$2() {}\nvar empty = {\n    width: 0,\n    height: 0,\n    margin: noSpacing\n};\nvar getSize = function getSize(_ref) {\n    var isAnimatingOpenOnMount = _ref.isAnimatingOpenOnMount, placeholder = _ref.placeholder, animate = _ref.animate;\n    if (isAnimatingOpenOnMount) {\n        return empty;\n    }\n    if (animate === \"close\") {\n        return empty;\n    }\n    return {\n        height: placeholder.client.borderBox.height,\n        width: placeholder.client.borderBox.width,\n        margin: placeholder.client.margin\n    };\n};\nvar getStyle = function getStyle(_ref2) {\n    var isAnimatingOpenOnMount = _ref2.isAnimatingOpenOnMount, placeholder = _ref2.placeholder, animate = _ref2.animate;\n    var size = getSize({\n        isAnimatingOpenOnMount: isAnimatingOpenOnMount,\n        placeholder: placeholder,\n        animate: animate\n    });\n    return {\n        display: placeholder.display,\n        boxSizing: \"border-box\",\n        width: size.width,\n        height: size.height,\n        marginTop: size.margin.top,\n        marginRight: size.margin.right,\n        marginBottom: size.margin.bottom,\n        marginLeft: size.margin.left,\n        flexShrink: \"0\",\n        flexGrow: \"0\",\n        pointerEvents: \"none\",\n        transition: animate !== \"none\" ? transitions.placeholder : null\n    };\n};\nfunction Placeholder(props) {\n    var animateOpenTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var tryClearAnimateOpenTimer = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        if (!animateOpenTimerRef.current) {\n            return;\n        }\n        clearTimeout(animateOpenTimerRef.current);\n        animateOpenTimerRef.current = null;\n    }, []);\n    var animate = props.animate, onTransitionEnd = props.onTransitionEnd, onClose = props.onClose, contextId = props.contextId;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.animate === \"open\"), isAnimatingOpenOnMount = _useState[0], setIsAnimatingOpenOnMount = _useState[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (!isAnimatingOpenOnMount) {\n            return noop$2;\n        }\n        if (animate !== \"open\") {\n            tryClearAnimateOpenTimer();\n            setIsAnimatingOpenOnMount(false);\n            return noop$2;\n        }\n        if (animateOpenTimerRef.current) {\n            return noop$2;\n        }\n        animateOpenTimerRef.current = setTimeout(function() {\n            animateOpenTimerRef.current = null;\n            setIsAnimatingOpenOnMount(false);\n        });\n        return tryClearAnimateOpenTimer;\n    }, [\n        animate,\n        isAnimatingOpenOnMount,\n        tryClearAnimateOpenTimer\n    ]);\n    var onSizeChangeEnd = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(event) {\n        if (event.propertyName !== \"height\") {\n            return;\n        }\n        onTransitionEnd();\n        if (animate === \"close\") {\n            onClose();\n        }\n    }, [\n        animate,\n        onClose,\n        onTransitionEnd\n    ]);\n    var style = getStyle({\n        isAnimatingOpenOnMount: isAnimatingOpenOnMount,\n        animate: props.animate,\n        placeholder: props.placeholder\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(props.placeholder.tagName, {\n        style: style,\n        \"data-rbd-placeholder-context-id\": contextId,\n        onTransitionEnd: onSizeChangeEnd,\n        ref: props.innerRef\n    });\n}\nvar Placeholder$1 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().memo(Placeholder);\nvar DroppableContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);\nfunction checkIsValidInnerRef(el) {\n    !(el && isHtmlElement(el)) ?  true ? invariant(false, \"\\n    provided.innerRef has not been provided with a HTMLElement.\\n\\n    You can find a guide on using the innerRef callback functions at:\\n    https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/using-inner-ref.md\\n  \") : 0 : void 0;\n}\nfunction isBoolean(value) {\n    return typeof value === \"boolean\";\n}\nfunction runChecks(args, checks) {\n    checks.forEach(function(check) {\n        return check(args);\n    });\n}\nvar shared = [\n    function required(_ref) {\n        var props = _ref.props;\n        !props.droppableId ?  true ? invariant(false, \"A Droppable requires a droppableId prop\") : 0 : void 0;\n        !(typeof props.droppableId === \"string\") ?  true ? invariant(false, \"A Droppable requires a [string] droppableId. Provided: [\" + typeof props.droppableId + \"]\") : 0 : void 0;\n    },\n    function _boolean(_ref2) {\n        var props = _ref2.props;\n        !isBoolean(props.isDropDisabled) ?  true ? invariant(false, \"isDropDisabled must be a boolean\") : 0 : void 0;\n        !isBoolean(props.isCombineEnabled) ?  true ? invariant(false, \"isCombineEnabled must be a boolean\") : 0 : void 0;\n        !isBoolean(props.ignoreContainerClipping) ?  true ? invariant(false, \"ignoreContainerClipping must be a boolean\") : 0 : void 0;\n    },\n    function ref(_ref3) {\n        var getDroppableRef = _ref3.getDroppableRef;\n        checkIsValidInnerRef(getDroppableRef());\n    }\n];\nvar standard = [\n    function placeholder(_ref4) {\n        var props = _ref4.props, getPlaceholderRef = _ref4.getPlaceholderRef;\n        if (!props.placeholder) {\n            return;\n        }\n        var ref = getPlaceholderRef();\n        if (ref) {\n            return;\n        }\n         true ? warning('\\n      Droppable setup issue [droppableId: \"' + props.droppableId + '\"]:\\n      DroppableProvided > placeholder could not be found.\\n\\n      Please be sure to add the {provided.placeholder} React Node as a child of your Droppable.\\n      More information: https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/droppable.md\\n    ') : 0;\n    }\n];\nvar virtual = [\n    function hasClone(_ref5) {\n        var props = _ref5.props;\n        !props.renderClone ?  true ? invariant(false, \"Must provide a clone render function (renderClone) for virtual lists\") : 0 : void 0;\n    },\n    function hasNoPlaceholder(_ref6) {\n        var getPlaceholderRef = _ref6.getPlaceholderRef;\n        !!getPlaceholderRef() ?  true ? invariant(false, \"Expected virtual list to not have a placeholder\") : 0 : void 0;\n    }\n];\nfunction useValidation(args) {\n    useDevSetupWarning(function() {\n        runChecks(args, shared);\n        if (args.props.mode === \"standard\") {\n            runChecks(args, standard);\n        }\n        if (args.props.mode === \"virtual\") {\n            runChecks(args, virtual);\n        }\n    });\n}\nvar AnimateInOut = function(_React$PureComponent) {\n    (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(AnimateInOut, _React$PureComponent);\n    function AnimateInOut() {\n        var _this;\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _React$PureComponent.call.apply(_React$PureComponent, [\n            this\n        ].concat(args)) || this;\n        _this.state = {\n            isVisible: Boolean(_this.props.on),\n            data: _this.props.on,\n            animate: _this.props.shouldAnimate && _this.props.on ? \"open\" : \"none\"\n        };\n        _this.onClose = function() {\n            if (_this.state.animate !== \"close\") {\n                return;\n            }\n            _this.setState({\n                isVisible: false\n            });\n        };\n        return _this;\n    }\n    AnimateInOut.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n        if (!props.shouldAnimate) {\n            return {\n                isVisible: Boolean(props.on),\n                data: props.on,\n                animate: \"none\"\n            };\n        }\n        if (props.on) {\n            return {\n                isVisible: true,\n                data: props.on,\n                animate: \"open\"\n            };\n        }\n        if (state.isVisible) {\n            return {\n                isVisible: true,\n                data: state.data,\n                animate: \"close\"\n            };\n        }\n        return {\n            isVisible: false,\n            animate: \"close\",\n            data: null\n        };\n    };\n    var _proto = AnimateInOut.prototype;\n    _proto.render = function render() {\n        if (!this.state.isVisible) {\n            return null;\n        }\n        var provided = {\n            onClose: this.onClose,\n            data: this.state.data,\n            animate: this.state.animate\n        };\n        return this.props.children(provided);\n    };\n    return AnimateInOut;\n}((react__WEBPACK_IMPORTED_MODULE_0___default().PureComponent));\nvar zIndexOptions = {\n    dragging: 5000,\n    dropAnimating: 4500\n};\nvar getDraggingTransition = function getDraggingTransition(shouldAnimateDragMovement, dropping) {\n    if (dropping) {\n        return transitions.drop(dropping.duration);\n    }\n    if (shouldAnimateDragMovement) {\n        return transitions.snap;\n    }\n    return transitions.fluid;\n};\nvar getDraggingOpacity = function getDraggingOpacity(isCombining, isDropAnimating) {\n    if (!isCombining) {\n        return null;\n    }\n    return isDropAnimating ? combine.opacity.drop : combine.opacity.combining;\n};\nvar getShouldDraggingAnimate = function getShouldDraggingAnimate(dragging) {\n    if (dragging.forceShouldAnimate != null) {\n        return dragging.forceShouldAnimate;\n    }\n    return dragging.mode === \"SNAP\";\n};\nfunction getDraggingStyle(dragging) {\n    var dimension = dragging.dimension;\n    var box = dimension.client;\n    var offset = dragging.offset, combineWith = dragging.combineWith, dropping = dragging.dropping;\n    var isCombining = Boolean(combineWith);\n    var shouldAnimate = getShouldDraggingAnimate(dragging);\n    var isDropAnimating = Boolean(dropping);\n    var transform = isDropAnimating ? transforms.drop(offset, isCombining) : transforms.moveTo(offset);\n    var style = {\n        position: \"fixed\",\n        top: box.marginBox.top,\n        left: box.marginBox.left,\n        boxSizing: \"border-box\",\n        width: box.borderBox.width,\n        height: box.borderBox.height,\n        transition: getDraggingTransition(shouldAnimate, dropping),\n        transform: transform,\n        opacity: getDraggingOpacity(isCombining, isDropAnimating),\n        zIndex: isDropAnimating ? zIndexOptions.dropAnimating : zIndexOptions.dragging,\n        pointerEvents: \"none\"\n    };\n    return style;\n}\nfunction getSecondaryStyle(secondary) {\n    return {\n        transform: transforms.moveTo(secondary.offset),\n        transition: secondary.shouldAnimateDisplacement ? null : \"none\"\n    };\n}\nfunction getStyle$1(mapped) {\n    return mapped.type === \"DRAGGING\" ? getDraggingStyle(mapped) : getSecondaryStyle(mapped);\n}\nfunction getDimension$1(descriptor, el, windowScroll) {\n    if (windowScroll === void 0) {\n        windowScroll = origin;\n    }\n    var computedStyles = window.getComputedStyle(el);\n    var borderBox = el.getBoundingClientRect();\n    var client = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.calculateBox)(borderBox, computedStyles);\n    var page = (0,css_box_model__WEBPACK_IMPORTED_MODULE_5__.withScroll)(client, windowScroll);\n    var placeholder = {\n        client: client,\n        tagName: el.tagName.toLowerCase(),\n        display: computedStyles.display\n    };\n    var displaceBy = {\n        x: client.marginBox.width,\n        y: client.marginBox.height\n    };\n    var dimension = {\n        descriptor: descriptor,\n        placeholder: placeholder,\n        displaceBy: displaceBy,\n        client: client,\n        page: page\n    };\n    return dimension;\n}\nfunction useDraggablePublisher(args) {\n    var uniqueId = useUniqueId(\"draggable\");\n    var descriptor = args.descriptor, registry = args.registry, getDraggableRef = args.getDraggableRef, canDragInteractiveElements = args.canDragInteractiveElements, shouldRespectForcePress = args.shouldRespectForcePress, isEnabled = args.isEnabled;\n    var options = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            canDragInteractiveElements: canDragInteractiveElements,\n            shouldRespectForcePress: shouldRespectForcePress,\n            isEnabled: isEnabled\n        };\n    }, [\n        canDragInteractiveElements,\n        isEnabled,\n        shouldRespectForcePress\n    ]);\n    var getDimension = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(windowScroll) {\n        var el = getDraggableRef();\n        !el ?  true ? invariant(false, \"Cannot get dimension when no ref is set\") : 0 : void 0;\n        return getDimension$1(descriptor, el, windowScroll);\n    }, [\n        descriptor,\n        getDraggableRef\n    ]);\n    var entry = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            uniqueId: uniqueId,\n            descriptor: descriptor,\n            options: options,\n            getDimension: getDimension\n        };\n    }, [\n        descriptor,\n        getDimension,\n        options,\n        uniqueId\n    ]);\n    var publishedRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(entry);\n    var isFirstPublishRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    useIsomorphicLayoutEffect(function() {\n        registry.draggable.register(publishedRef.current);\n        return function() {\n            return registry.draggable.unregister(publishedRef.current);\n        };\n    }, [\n        registry.draggable\n    ]);\n    useIsomorphicLayoutEffect(function() {\n        if (isFirstPublishRef.current) {\n            isFirstPublishRef.current = false;\n            return;\n        }\n        var last = publishedRef.current;\n        publishedRef.current = entry;\n        registry.draggable.update(entry, last);\n    }, [\n        entry,\n        registry.draggable\n    ]);\n}\nfunction useValidation$1(props, contextId, getRef) {\n    useDevSetupWarning(function() {\n        function prefix(id) {\n            return \"Draggable[id: \" + id + \"]: \";\n        }\n        var id = props.draggableId;\n        !id ?  true ? invariant(false, \"Draggable requires a draggableId\") : 0 : void 0;\n        !(typeof id === \"string\") ?  true ? invariant(false, \"Draggable requires a [string] draggableId.\\n      Provided: [type: \" + typeof id + \"] (value: \" + id + \")\") : 0 : void 0;\n        !isInteger(props.index) ?  true ? invariant(false, prefix(id) + \" requires an integer index prop\") : 0 : void 0;\n        if (props.mapped.type === \"DRAGGING\") {\n            return;\n        }\n        checkIsValidInnerRef(getRef());\n        if (props.isEnabled) {\n            !findDragHandle(contextId, id) ?  true ? invariant(false, prefix(id) + \" Unable to find drag handle\") : 0 : void 0;\n        }\n    });\n}\nfunction useClonePropValidation(isClone) {\n    useDev(function() {\n        var initialRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(isClone);\n        useDevSetupWarning(function() {\n            !(isClone === initialRef.current) ?  true ? invariant(false, \"Draggable isClone prop value changed during component life\") : 0 : void 0;\n        }, [\n            isClone\n        ]);\n    });\n}\nfunction preventHtml5Dnd(event) {\n    event.preventDefault();\n}\nfunction Draggable(props) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var setRef = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(el) {\n        ref.current = el;\n    }, []);\n    var getRef = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        return ref.current;\n    }, []);\n    var _useRequiredContext = useRequiredContext(AppContext), contextId = _useRequiredContext.contextId, dragHandleUsageInstructionsId = _useRequiredContext.dragHandleUsageInstructionsId, registry = _useRequiredContext.registry;\n    var _useRequiredContext2 = useRequiredContext(DroppableContext), type = _useRequiredContext2.type, droppableId = _useRequiredContext2.droppableId;\n    var descriptor = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            id: props.draggableId,\n            index: props.index,\n            type: type,\n            droppableId: droppableId\n        };\n    }, [\n        props.draggableId,\n        props.index,\n        type,\n        droppableId\n    ]);\n    var children = props.children, draggableId = props.draggableId, isEnabled = props.isEnabled, shouldRespectForcePress = props.shouldRespectForcePress, canDragInteractiveElements = props.canDragInteractiveElements, isClone = props.isClone, mapped = props.mapped, dropAnimationFinishedAction = props.dropAnimationFinished;\n    useValidation$1(props, contextId, getRef);\n    useClonePropValidation(isClone);\n    if (!isClone) {\n        var forPublisher = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n            return {\n                descriptor: descriptor,\n                registry: registry,\n                getDraggableRef: getRef,\n                canDragInteractiveElements: canDragInteractiveElements,\n                shouldRespectForcePress: shouldRespectForcePress,\n                isEnabled: isEnabled\n            };\n        }, [\n            descriptor,\n            registry,\n            getRef,\n            canDragInteractiveElements,\n            shouldRespectForcePress,\n            isEnabled\n        ]);\n        useDraggablePublisher(forPublisher);\n    }\n    var dragHandleProps = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return isEnabled ? {\n            tabIndex: 0,\n            role: \"button\",\n            \"aria-describedby\": dragHandleUsageInstructionsId,\n            \"data-rbd-drag-handle-draggable-id\": draggableId,\n            \"data-rbd-drag-handle-context-id\": contextId,\n            draggable: false,\n            onDragStart: preventHtml5Dnd\n        } : null;\n    }, [\n        contextId,\n        dragHandleUsageInstructionsId,\n        draggableId,\n        isEnabled\n    ]);\n    var onMoveEnd = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(event) {\n        if (mapped.type !== \"DRAGGING\") {\n            return;\n        }\n        if (!mapped.dropping) {\n            return;\n        }\n        if (event.propertyName !== \"transform\") {\n            return;\n        }\n        dropAnimationFinishedAction();\n    }, [\n        dropAnimationFinishedAction,\n        mapped\n    ]);\n    var provided = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        var style = getStyle$1(mapped);\n        var onTransitionEnd = mapped.type === \"DRAGGING\" && mapped.dropping ? onMoveEnd : null;\n        var result = {\n            innerRef: setRef,\n            draggableProps: {\n                \"data-rbd-draggable-context-id\": contextId,\n                \"data-rbd-draggable-id\": draggableId,\n                style: style,\n                onTransitionEnd: onTransitionEnd\n            },\n            dragHandleProps: dragHandleProps\n        };\n        return result;\n    }, [\n        contextId,\n        dragHandleProps,\n        draggableId,\n        mapped,\n        onMoveEnd,\n        setRef\n    ]);\n    var rubric = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            draggableId: descriptor.id,\n            type: descriptor.type,\n            source: {\n                index: descriptor.index,\n                droppableId: descriptor.droppableId\n            }\n        };\n    }, [\n        descriptor.droppableId,\n        descriptor.id,\n        descriptor.index,\n        descriptor.type\n    ]);\n    return children(provided, mapped.snapshot, rubric);\n}\nvar isStrictEqual = function(a, b) {\n    return a === b;\n};\nvar whatIsDraggedOverFromResult = function(result) {\n    var combine = result.combine, destination = result.destination;\n    if (destination) {\n        return destination.droppableId;\n    }\n    if (combine) {\n        return combine.droppableId;\n    }\n    return null;\n};\nvar getCombineWithFromResult = function getCombineWithFromResult(result) {\n    return result.combine ? result.combine.draggableId : null;\n};\nvar getCombineWithFromImpact = function getCombineWithFromImpact(impact) {\n    return impact.at && impact.at.type === \"COMBINE\" ? impact.at.combine.draggableId : null;\n};\nfunction getDraggableSelector() {\n    var memoizedOffset = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(x, y) {\n        return {\n            x: x,\n            y: y\n        };\n    });\n    var getMemoizedSnapshot = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(mode, isClone, draggingOver, combineWith, dropping) {\n        return {\n            isDragging: true,\n            isClone: isClone,\n            isDropAnimating: Boolean(dropping),\n            dropAnimation: dropping,\n            mode: mode,\n            draggingOver: draggingOver,\n            combineWith: combineWith,\n            combineTargetFor: null\n        };\n    });\n    var getMemoizedProps = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(offset, mode, dimension, isClone, draggingOver, combineWith, forceShouldAnimate) {\n        return {\n            mapped: {\n                type: \"DRAGGING\",\n                dropping: null,\n                draggingOver: draggingOver,\n                combineWith: combineWith,\n                mode: mode,\n                offset: offset,\n                dimension: dimension,\n                forceShouldAnimate: forceShouldAnimate,\n                snapshot: getMemoizedSnapshot(mode, isClone, draggingOver, combineWith, null)\n            }\n        };\n    });\n    var selector = function selector(state, ownProps) {\n        if (state.isDragging) {\n            if (state.critical.draggable.id !== ownProps.draggableId) {\n                return null;\n            }\n            var offset = state.current.client.offset;\n            var dimension = state.dimensions.draggables[ownProps.draggableId];\n            var draggingOver = whatIsDraggedOver(state.impact);\n            var combineWith = getCombineWithFromImpact(state.impact);\n            var forceShouldAnimate = state.forceShouldAnimate;\n            return getMemoizedProps(memoizedOffset(offset.x, offset.y), state.movementMode, dimension, ownProps.isClone, draggingOver, combineWith, forceShouldAnimate);\n        }\n        if (state.phase === \"DROP_ANIMATING\") {\n            var completed = state.completed;\n            if (completed.result.draggableId !== ownProps.draggableId) {\n                return null;\n            }\n            var isClone = ownProps.isClone;\n            var _dimension = state.dimensions.draggables[ownProps.draggableId];\n            var result = completed.result;\n            var mode = result.mode;\n            var _draggingOver = whatIsDraggedOverFromResult(result);\n            var _combineWith = getCombineWithFromResult(result);\n            var duration = state.dropDuration;\n            var dropping = {\n                duration: duration,\n                curve: curves.drop,\n                moveTo: state.newHomeClientOffset,\n                opacity: _combineWith ? combine.opacity.drop : null,\n                scale: _combineWith ? combine.scale.drop : null\n            };\n            return {\n                mapped: {\n                    type: \"DRAGGING\",\n                    offset: state.newHomeClientOffset,\n                    dimension: _dimension,\n                    dropping: dropping,\n                    draggingOver: _draggingOver,\n                    combineWith: _combineWith,\n                    mode: mode,\n                    forceShouldAnimate: null,\n                    snapshot: getMemoizedSnapshot(mode, isClone, _draggingOver, _combineWith, dropping)\n                }\n            };\n        }\n        return null;\n    };\n    return selector;\n}\nfunction getSecondarySnapshot(combineTargetFor) {\n    return {\n        isDragging: false,\n        isDropAnimating: false,\n        isClone: false,\n        dropAnimation: null,\n        mode: null,\n        draggingOver: null,\n        combineTargetFor: combineTargetFor,\n        combineWith: null\n    };\n}\nvar atRest = {\n    mapped: {\n        type: \"SECONDARY\",\n        offset: origin,\n        combineTargetFor: null,\n        shouldAnimateDisplacement: true,\n        snapshot: getSecondarySnapshot(null)\n    }\n};\nfunction getSecondarySelector() {\n    var memoizedOffset = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(x, y) {\n        return {\n            x: x,\n            y: y\n        };\n    });\n    var getMemoizedSnapshot = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(getSecondarySnapshot);\n    var getMemoizedProps = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(offset, combineTargetFor, shouldAnimateDisplacement) {\n        if (combineTargetFor === void 0) {\n            combineTargetFor = null;\n        }\n        return {\n            mapped: {\n                type: \"SECONDARY\",\n                offset: offset,\n                combineTargetFor: combineTargetFor,\n                shouldAnimateDisplacement: shouldAnimateDisplacement,\n                snapshot: getMemoizedSnapshot(combineTargetFor)\n            }\n        };\n    });\n    var getFallback = function getFallback(combineTargetFor) {\n        return combineTargetFor ? getMemoizedProps(origin, combineTargetFor, true) : null;\n    };\n    var getProps = function getProps(ownId, draggingId, impact, afterCritical) {\n        var visualDisplacement = impact.displaced.visible[ownId];\n        var isAfterCriticalInVirtualList = Boolean(afterCritical.inVirtualList && afterCritical.effected[ownId]);\n        var combine = tryGetCombine(impact);\n        var combineTargetFor = combine && combine.draggableId === ownId ? draggingId : null;\n        if (!visualDisplacement) {\n            if (!isAfterCriticalInVirtualList) {\n                return getFallback(combineTargetFor);\n            }\n            if (impact.displaced.invisible[ownId]) {\n                return null;\n            }\n            var change = negate(afterCritical.displacedBy.point);\n            var _offset = memoizedOffset(change.x, change.y);\n            return getMemoizedProps(_offset, combineTargetFor, true);\n        }\n        if (isAfterCriticalInVirtualList) {\n            return getFallback(combineTargetFor);\n        }\n        var displaceBy = impact.displacedBy.point;\n        var offset = memoizedOffset(displaceBy.x, displaceBy.y);\n        return getMemoizedProps(offset, combineTargetFor, visualDisplacement.shouldAnimate);\n    };\n    var selector = function selector(state, ownProps) {\n        if (state.isDragging) {\n            if (state.critical.draggable.id === ownProps.draggableId) {\n                return null;\n            }\n            return getProps(ownProps.draggableId, state.critical.draggable.id, state.impact, state.afterCritical);\n        }\n        if (state.phase === \"DROP_ANIMATING\") {\n            var completed = state.completed;\n            if (completed.result.draggableId === ownProps.draggableId) {\n                return null;\n            }\n            return getProps(ownProps.draggableId, completed.result.draggableId, completed.impact, completed.afterCritical);\n        }\n        return null;\n    };\n    return selector;\n}\nvar makeMapStateToProps = function makeMapStateToProps() {\n    var draggingSelector = getDraggableSelector();\n    var secondarySelector = getSecondarySelector();\n    var selector = function selector(state, ownProps) {\n        return draggingSelector(state, ownProps) || secondarySelector(state, ownProps) || atRest;\n    };\n    return selector;\n};\nvar mapDispatchToProps = {\n    dropAnimationFinished: dropAnimationFinished\n};\nvar ConnectedDraggable = (0,react_redux__WEBPACK_IMPORTED_MODULE_3__.connect)(makeMapStateToProps, mapDispatchToProps, null, {\n    context: StoreContext,\n    pure: true,\n    areStatePropsEqual: isStrictEqual\n})(Draggable);\nfunction PrivateDraggable(props) {\n    var droppableContext = useRequiredContext(DroppableContext);\n    var isUsingCloneFor = droppableContext.isUsingCloneFor;\n    if (isUsingCloneFor === props.draggableId && !props.isClone) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(ConnectedDraggable, props);\n}\nfunction PublicDraggable(props) {\n    var isEnabled = typeof props.isDragDisabled === \"boolean\" ? !props.isDragDisabled : true;\n    var canDragInteractiveElements = Boolean(props.disableInteractiveElementBlocking);\n    var shouldRespectForcePress = Boolean(props.shouldRespectForcePress);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PrivateDraggable, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, props, {\n        isClone: false,\n        isEnabled: isEnabled,\n        canDragInteractiveElements: canDragInteractiveElements,\n        shouldRespectForcePress: shouldRespectForcePress\n    }));\n}\nfunction Droppable(props) {\n    var appContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(AppContext);\n    !appContext ?  true ? invariant(false, \"Could not find app context\") : 0 : void 0;\n    var contextId = appContext.contextId, isMovementAllowed = appContext.isMovementAllowed;\n    var droppableRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var placeholderRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var children = props.children, droppableId = props.droppableId, type = props.type, mode = props.mode, direction = props.direction, ignoreContainerClipping = props.ignoreContainerClipping, isDropDisabled = props.isDropDisabled, isCombineEnabled = props.isCombineEnabled, snapshot = props.snapshot, useClone = props.useClone, updateViewportMaxScroll = props.updateViewportMaxScroll, getContainerForClone = props.getContainerForClone;\n    var getDroppableRef = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        return droppableRef.current;\n    }, []);\n    var setDroppableRef = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(value) {\n        droppableRef.current = value;\n    }, []);\n    var getPlaceholderRef = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        return placeholderRef.current;\n    }, []);\n    var setPlaceholderRef = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function(value) {\n        placeholderRef.current = value;\n    }, []);\n    useValidation({\n        props: props,\n        getDroppableRef: getDroppableRef,\n        getPlaceholderRef: getPlaceholderRef\n    });\n    var onPlaceholderTransitionEnd = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useCallback)(function() {\n        if (isMovementAllowed()) {\n            updateViewportMaxScroll({\n                maxScroll: getMaxWindowScroll()\n            });\n        }\n    }, [\n        isMovementAllowed,\n        updateViewportMaxScroll\n    ]);\n    useDroppablePublisher({\n        droppableId: droppableId,\n        type: type,\n        mode: mode,\n        direction: direction,\n        isDropDisabled: isDropDisabled,\n        isCombineEnabled: isCombineEnabled,\n        ignoreContainerClipping: ignoreContainerClipping,\n        getDroppableRef: getDroppableRef\n    });\n    var placeholder = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(AnimateInOut, {\n        on: props.placeholder,\n        shouldAnimate: props.shouldAnimatePlaceholder\n    }, function(_ref) {\n        var onClose = _ref.onClose, data = _ref.data, animate = _ref.animate;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Placeholder$1, {\n            placeholder: data,\n            onClose: onClose,\n            innerRef: setPlaceholderRef,\n            animate: animate,\n            contextId: contextId,\n            onTransitionEnd: onPlaceholderTransitionEnd\n        });\n    });\n    var provided = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            innerRef: setDroppableRef,\n            placeholder: placeholder,\n            droppableProps: {\n                \"data-rbd-droppable-id\": droppableId,\n                \"data-rbd-droppable-context-id\": contextId\n            }\n        };\n    }, [\n        contextId,\n        droppableId,\n        placeholder,\n        setDroppableRef\n    ]);\n    var isUsingCloneFor = useClone ? useClone.dragging.draggableId : null;\n    var droppableContext = (0,use_memo_one__WEBPACK_IMPORTED_MODULE_9__.useMemo)(function() {\n        return {\n            droppableId: droppableId,\n            type: type,\n            isUsingCloneFor: isUsingCloneFor\n        };\n    }, [\n        droppableId,\n        isUsingCloneFor,\n        type\n    ]);\n    function getClone() {\n        if (!useClone) {\n            return null;\n        }\n        var dragging = useClone.dragging, render = useClone.render;\n        var node = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PrivateDraggable, {\n            draggableId: dragging.draggableId,\n            index: dragging.source.index,\n            isClone: true,\n            isEnabled: true,\n            shouldRespectForcePress: false,\n            canDragInteractiveElements: true\n        }, function(draggableProvided, draggableSnapshot) {\n            return render(draggableProvided, draggableSnapshot, dragging);\n        });\n        return /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_4___default().createPortal(node, getContainerForClone());\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(DroppableContext.Provider, {\n        value: droppableContext\n    }, children(provided, snapshot), getClone());\n}\nvar isMatchingType = function isMatchingType(type, critical) {\n    return type === critical.droppable.type;\n};\nvar getDraggable = function getDraggable(critical, dimensions) {\n    return dimensions.draggables[critical.draggable.id];\n};\nvar makeMapStateToProps$1 = function makeMapStateToProps() {\n    var idleWithAnimation = {\n        placeholder: null,\n        shouldAnimatePlaceholder: true,\n        snapshot: {\n            isDraggingOver: false,\n            draggingOverWith: null,\n            draggingFromThisWith: null,\n            isUsingPlaceholder: false\n        },\n        useClone: null\n    };\n    var idleWithoutAnimation = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__[\"default\"])({}, idleWithAnimation, {\n        shouldAnimatePlaceholder: false\n    });\n    var getDraggableRubric = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(descriptor) {\n        return {\n            draggableId: descriptor.id,\n            type: descriptor.type,\n            source: {\n                index: descriptor.index,\n                droppableId: descriptor.droppableId\n            }\n        };\n    });\n    var getMapProps = (0,memoize_one__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(function(id, isEnabled, isDraggingOverForConsumer, isDraggingOverForImpact, dragging, renderClone) {\n        var draggableId = dragging.descriptor.id;\n        var isHome = dragging.descriptor.droppableId === id;\n        if (isHome) {\n            var useClone = renderClone ? {\n                render: renderClone,\n                dragging: getDraggableRubric(dragging.descriptor)\n            } : null;\n            var _snapshot = {\n                isDraggingOver: isDraggingOverForConsumer,\n                draggingOverWith: isDraggingOverForConsumer ? draggableId : null,\n                draggingFromThisWith: draggableId,\n                isUsingPlaceholder: true\n            };\n            return {\n                placeholder: dragging.placeholder,\n                shouldAnimatePlaceholder: false,\n                snapshot: _snapshot,\n                useClone: useClone\n            };\n        }\n        if (!isEnabled) {\n            return idleWithoutAnimation;\n        }\n        if (!isDraggingOverForImpact) {\n            return idleWithAnimation;\n        }\n        var snapshot = {\n            isDraggingOver: isDraggingOverForConsumer,\n            draggingOverWith: draggableId,\n            draggingFromThisWith: null,\n            isUsingPlaceholder: true\n        };\n        return {\n            placeholder: dragging.placeholder,\n            shouldAnimatePlaceholder: true,\n            snapshot: snapshot,\n            useClone: null\n        };\n    });\n    var selector = function selector(state, ownProps) {\n        var id = ownProps.droppableId;\n        var type = ownProps.type;\n        var isEnabled = !ownProps.isDropDisabled;\n        var renderClone = ownProps.renderClone;\n        if (state.isDragging) {\n            var critical = state.critical;\n            if (!isMatchingType(type, critical)) {\n                return idleWithoutAnimation;\n            }\n            var dragging = getDraggable(critical, state.dimensions);\n            var isDraggingOver = whatIsDraggedOver(state.impact) === id;\n            return getMapProps(id, isEnabled, isDraggingOver, isDraggingOver, dragging, renderClone);\n        }\n        if (state.phase === \"DROP_ANIMATING\") {\n            var completed = state.completed;\n            if (!isMatchingType(type, completed.critical)) {\n                return idleWithoutAnimation;\n            }\n            var _dragging = getDraggable(completed.critical, state.dimensions);\n            return getMapProps(id, isEnabled, whatIsDraggedOverFromResult(completed.result) === id, whatIsDraggedOver(completed.impact) === id, _dragging, renderClone);\n        }\n        if (state.phase === \"IDLE\" && state.completed && !state.shouldFlush) {\n            var _completed = state.completed;\n            if (!isMatchingType(type, _completed.critical)) {\n                return idleWithoutAnimation;\n            }\n            var wasOver = whatIsDraggedOver(_completed.impact) === id;\n            var wasCombining = Boolean(_completed.impact.at && _completed.impact.at.type === \"COMBINE\");\n            var isHome = _completed.critical.droppable.id === id;\n            if (wasOver) {\n                return wasCombining ? idleWithAnimation : idleWithoutAnimation;\n            }\n            if (isHome) {\n                return idleWithAnimation;\n            }\n            return idleWithoutAnimation;\n        }\n        return idleWithoutAnimation;\n    };\n    return selector;\n};\nvar mapDispatchToProps$1 = {\n    updateViewportMaxScroll: updateViewportMaxScroll\n};\nfunction getBody() {\n    !document.body ?  true ? invariant(false, \"document.body is not ready\") : 0 : void 0;\n    return document.body;\n}\nvar defaultProps = {\n    mode: \"standard\",\n    type: \"DEFAULT\",\n    direction: \"vertical\",\n    isDropDisabled: false,\n    isCombineEnabled: false,\n    ignoreContainerClipping: false,\n    renderClone: null,\n    getContainerForClone: getBody\n};\nvar ConnectedDroppable = (0,react_redux__WEBPACK_IMPORTED_MODULE_3__.connect)(makeMapStateToProps$1, mapDispatchToProps$1, null, {\n    context: StoreContext,\n    pure: true,\n    areStatePropsEqual: isStrictEqual\n})(Droppable);\nConnectedDroppable.defaultProps = defaultProps;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9kaXN0L3JlYWN0LWJlYXV0aWZ1bC1kbmQuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0Y7QUFDbEI7QUFDWjtBQUN5QztBQUNuRDtBQUNJO0FBQ2lEO0FBQ2hFO0FBQ047QUFDRTtBQUVqQyxJQUFJMkIsZUFBZUMsa0JBQXlCO0FBQzVDLElBQUlDLGdCQUFnQjtBQUNwQixJQUFJQyxzQkFBc0I7QUFFMUIsSUFBSUMsUUFBUSxTQUFTQSxNQUFNQyxLQUFLO0lBQzlCLE9BQU9BLE1BQU1DLE9BQU8sQ0FBQ0osZUFBZSxLQUFLSSxPQUFPLENBQUNILHFCQUFxQixJQUFJSSxJQUFJO0FBQ2hGO0FBRUEsSUFBSUMsZ0JBQWdCLFNBQVNBLGNBQWNDLE9BQU87SUFDaEQsT0FBT0wsTUFBTSxzQ0FBc0NBLE1BQU1LLFdBQVc7QUFDdEU7QUFFQSxJQUFJQyxzQkFBc0IsU0FBU0Esb0JBQW9CRCxPQUFPO0lBQzVELE9BQU87UUFBQ0QsY0FBY0M7UUFBVTtRQUF3RDtRQUFvQjtLQUFrQjtBQUNoSTtBQUNBLElBQUlFLGlCQUFpQjtBQUNyQixTQUFTQyxJQUFJQyxJQUFJLEVBQUVKLE9BQU87SUFDeEIsSUFBSUs7SUFFSixJQUFJZCxjQUFjO1FBQ2hCO0lBQ0Y7SUFFQSxJQUFJLEtBQXVELEVBQUUsRUFFNUQ7SUFFQWMsQ0FBQUEsV0FBV0UsT0FBTSxDQUFFLENBQUNILEtBQUssQ0FBQ0ksS0FBSyxDQUFDSCxVQUFVSixvQkFBb0JEO0FBQ2pFO0FBQ0EsSUFBSVMsVUFBVU4sSUFBSU8sSUFBSSxDQUFDLE1BQU07QUFDN0IsSUFBSUMsUUFBUVIsSUFBSU8sSUFBSSxDQUFDLE1BQU07QUFFM0IsU0FBU0UsUUFBUTtBQUVqQixTQUFTQyxXQUFXQyxNQUFNLEVBQUVDLFdBQVc7SUFDckMsT0FBTzVDLDhFQUFRQSxDQUFDLENBQUMsR0FBRzJDLFFBQVEsQ0FBQyxHQUFHQztB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QUkwZSx1QkFBdUI7SUFDekI5d0IseUJBQXlCQTtBQUMzQjtBQUVBLFNBQVMrd0I7SUFDUCxDQUFDcnNCLFNBQVNzTyxJQUFJLEdBQUc3MEIsS0FBcUMsR0FBRzRDLFVBQVUsT0FBTyxnQ0FBZ0NBLENBQWdCLEdBQUcsS0FBSztJQUNsSSxPQUFPMmpCLFNBQVNzTyxJQUFJO0FBQ3RCO0FBRUEsSUFBSWdlLGVBQWU7SUFDakJ0N0IsTUFBTTtJQUNOM1csTUFBTTtJQUNOb08sV0FBVztJQUNYKzRCLGdCQUFnQjtJQUNoQmo3QixrQkFBa0I7SUFDbEJnOEIseUJBQXlCO0lBQ3pCd0MsYUFBYTtJQUNiMEYsc0JBQXNCNEI7QUFDeEI7QUFDQSxJQUFJRSxxQkFBcUI1ekMsb0RBQU9BLENBQUMyeUMsdUJBQXVCYyxzQkFBc0IsTUFBTTtJQUNsRmpmLFNBQVM0RTtJQUNUOFgsTUFBTTtJQUNOQyxvQkFBb0IvQjtBQUN0QixHQUFHc0M7QUFDSGtDLG1CQUFtQkQsWUFBWSxHQUFHQTtBQUUrSCIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcnNvbmFsaXplZC1jb250ZW50LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL2Rpc3QvcmVhY3QtYmVhdXRpZnVsLWRuZC5lc20uanM/ODBmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlTGF5b3V0RWZmZWN0LCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSBhcyBjcmVhdGVTdG9yZSQxLCBhcHBseU1pZGRsZXdhcmUsIGNvbXBvc2UsIGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgdXNlTWVtbywgdXNlQ2FsbGJhY2sgfSBmcm9tICd1c2UtbWVtby1vbmUnO1xuaW1wb3J0IHsgZ2V0UmVjdCwgZXhwYW5kLCBvZmZzZXQsIHdpdGhTY3JvbGwsIGdldEJveCwgY3JlYXRlQm94LCBjYWxjdWxhdGVCb3ggfSBmcm9tICdjc3MtYm94LW1vZGVsJztcbmltcG9ydCBtZW1vaXplT25lIGZyb20gJ21lbW9pemUtb25lJztcbmltcG9ydCByYWZTY2hkIGZyb20gJ3JhZi1zY2hkJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG52YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBzcGFjZXNBbmRUYWJzID0gL1sgXFx0XXsyLH0vZztcbnZhciBsaW5lU3RhcnRXaXRoU3BhY2VzID0gL15bIFxcdF0qL2dtO1xuXG52YXIgY2xlYW4gPSBmdW5jdGlvbiBjbGVhbih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUucmVwbGFjZShzcGFjZXNBbmRUYWJzLCAnICcpLnJlcGxhY2UobGluZVN0YXJ0V2l0aFNwYWNlcywgJycpLnRyaW0oKTtcbn07XG5cbnZhciBnZXREZXZNZXNzYWdlID0gZnVuY3Rpb24gZ2V0RGV2TWVzc2FnZShtZXNzYWdlKSB7XG4gIHJldHVybiBjbGVhbihcIlxcbiAgJWNyZWFjdC1iZWF1dGlmdWwtZG5kXFxuXFxuICAlY1wiICsgY2xlYW4obWVzc2FnZSkgKyBcIlxcblxcbiAgJWNcXHVEODNEXFx1REM3N1xcdTIwMEQgVGhpcyBpcyBhIGRldmVsb3BtZW50IG9ubHkgbWVzc2FnZS4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLlxcblwiKTtcbn07XG5cbnZhciBnZXRGb3JtYXR0ZWRNZXNzYWdlID0gZnVuY3Rpb24gZ2V0Rm9ybWF0dGVkTWVzc2FnZShtZXNzYWdlKSB7XG4gIHJldHVybiBbZ2V0RGV2TWVzc2FnZShtZXNzYWdlKSwgJ2NvbG9yOiAjMDBDNTg0OyBmb250LXNpemU6IDEuMmVtOyBmb250LXdlaWdodDogYm9sZDsnLCAnbGluZS1oZWlnaHQ6IDEuNScsICdjb2xvcjogIzcyMzg3NDsnXTtcbn07XG52YXIgaXNEaXNhYmxlZEZsYWcgPSAnX19yZWFjdC1iZWF1dGlmdWwtZG5kLWRpc2FibGUtZGV2LXdhcm5pbmdzJztcbmZ1bmN0aW9uIGxvZyh0eXBlLCBtZXNzYWdlKSB7XG4gIHZhciBfY29uc29sZTtcblxuICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1tpc0Rpc2FibGVkRmxhZ10pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAoX2NvbnNvbGUgPSBjb25zb2xlKVt0eXBlXS5hcHBseShfY29uc29sZSwgZ2V0Rm9ybWF0dGVkTWVzc2FnZShtZXNzYWdlKSk7XG59XG52YXIgd2FybmluZyA9IGxvZy5iaW5kKG51bGwsICd3YXJuJyk7XG52YXIgZXJyb3IgPSBsb2cuYmluZChudWxsLCAnZXJyb3InKTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGdldE9wdGlvbnMoc2hhcmVkLCBmcm9tQmluZGluZykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIHNoYXJlZCwge30sIGZyb21CaW5kaW5nKTtcbn1cblxuZnVuY3Rpb24gYmluZEV2ZW50cyhlbCwgYmluZGluZ3MsIHNoYXJlZE9wdGlvbnMpIHtcbiAgdmFyIHVuYmluZGluZ3MgPSBiaW5kaW5ncy5tYXAoZnVuY3Rpb24gKGJpbmRpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGdldE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgYmluZGluZy5vcHRpb25zKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGJpbmRpbmcuZXZlbnROYW1lLCBiaW5kaW5nLmZuLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5iaW5kKCkge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihiaW5kaW5nLmV2ZW50TmFtZSwgYmluZGluZy5mbiwgb3B0aW9ucyk7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiB1bmJpbmRBbGwoKSB7XG4gICAgdW5iaW5kaW5ncy5mb3JFYWNoKGZ1bmN0aW9uICh1bmJpbmQpIHtcbiAgICAgIHVuYmluZCgpO1xuICAgIH0pO1xuICB9O1xufVxuXG52YXIgaXNQcm9kdWN0aW9uJDEgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIFJiZEludmFyaWFudChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cblJiZEludmFyaWFudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbn07XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc1Byb2R1Y3Rpb24kMSkge1xuICAgIHRocm93IG5ldyBSYmRJbnZhcmlhbnQocHJlZml4KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgUmJkSW52YXJpYW50KHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG4gIH1cbn1cblxudmFyIEVycm9yQm91bmRhcnkgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShFcnJvckJvdW5kYXJ5LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBFcnJvckJvdW5kYXJ5KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmNhbGxiYWNrcyA9IG51bGw7XG4gICAgX3RoaXMudW5iaW5kID0gbm9vcDtcblxuICAgIF90aGlzLm9uV2luZG93RXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBjYWxsYmFja3MgPSBfdGhpcy5nZXRDYWxsYmFja3MoKTtcblxuICAgICAgaWYgKGNhbGxiYWNrcy5pc0RyYWdnaW5nKCkpIHtcbiAgICAgICAgY2FsbGJhY2tzLnRyeUFib3J0KCk7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICAgIEFuIGVycm9yIHdhcyBjYXVnaHQgYnkgb3VyIHdpbmRvdyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHdoaWxlIGEgZHJhZyB3YXMgb2NjdXJyaW5nLlxcbiAgICAgICAgVGhlIGFjdGl2ZSBkcmFnIGhhcyBiZWVuIGFib3J0ZWQuXFxuICAgICAgXCIpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXJyID0gZXZlbnQuZXJyb3I7XG5cbiAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBSYmRJbnZhcmlhbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5nZXRDYWxsYmFja3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLmNhbGxiYWNrcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIEFwcENhbGxiYWNrcyBpbiA8RXJyb3JCb3VuZGFyeS8+Jyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5jYWxsYmFja3M7XG4gICAgfTtcblxuICAgIF90aGlzLnNldENhbGxiYWNrcyA9IGZ1bmN0aW9uIChjYWxsYmFja3MpIHtcbiAgICAgIF90aGlzLmNhbGxiYWNrcyA9IGNhbGxiYWNrcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEVycm9yQm91bmRhcnkucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMudW5iaW5kID0gYmluZEV2ZW50cyh3aW5kb3csIFt7XG4gICAgICBldmVudE5hbWU6ICdlcnJvcicsXG4gICAgICBmbjogdGhpcy5vbldpbmRvd0Vycm9yXG4gICAgfV0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRDYXRjaCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZENhdGNoKGVycikge1xuICAgIGlmIChlcnIgaW5zdGFuY2VvZiBSYmRJbnZhcmlhbnQpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7fSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5iaW5kKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih0aGlzLnNldENhbGxiYWNrcyk7XG4gIH07XG5cbiAgcmV0dXJuIEVycm9yQm91bmRhcnk7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbnZhciBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnMgPSBcIlxcbiAgUHJlc3Mgc3BhY2UgYmFyIHRvIHN0YXJ0IGEgZHJhZy5cXG4gIFdoZW4gZHJhZ2dpbmcgeW91IGNhbiB1c2UgdGhlIGFycm93IGtleXMgdG8gbW92ZSB0aGUgaXRlbSBhcm91bmQgYW5kIGVzY2FwZSB0byBjYW5jZWwuXFxuICBTb21lIHNjcmVlbiByZWFkZXJzIG1heSByZXF1aXJlIHlvdSB0byBiZSBpbiBmb2N1cyBtb2RlIG9yIHRvIHVzZSB5b3VyIHBhc3MgdGhyb3VnaCBrZXlcXG5cIjtcblxudmFyIHBvc2l0aW9uID0gZnVuY3Rpb24gcG9zaXRpb24oaW5kZXgpIHtcbiAgcmV0dXJuIGluZGV4ICsgMTtcbn07XG5cbnZhciBvbkRyYWdTdGFydCA9IGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KHN0YXJ0KSB7XG4gIHJldHVybiBcIlxcbiAgWW91IGhhdmUgbGlmdGVkIGFuIGl0ZW0gaW4gcG9zaXRpb24gXCIgKyBwb3NpdGlvbihzdGFydC5zb3VyY2UuaW5kZXgpICsgXCJcXG5cIjtcbn07XG5cbnZhciB3aXRoTG9jYXRpb24gPSBmdW5jdGlvbiB3aXRoTG9jYXRpb24oc291cmNlLCBkZXN0aW5hdGlvbikge1xuICB2YXIgaXNJbkhvbWVMaXN0ID0gc291cmNlLmRyb3BwYWJsZUlkID09PSBkZXN0aW5hdGlvbi5kcm9wcGFibGVJZDtcbiAgdmFyIHN0YXJ0UG9zaXRpb24gPSBwb3NpdGlvbihzb3VyY2UuaW5kZXgpO1xuICB2YXIgZW5kUG9zaXRpb24gPSBwb3NpdGlvbihkZXN0aW5hdGlvbi5pbmRleCk7XG5cbiAgaWYgKGlzSW5Ib21lTGlzdCkge1xuICAgIHJldHVybiBcIlxcbiAgICAgIFlvdSBoYXZlIG1vdmVkIHRoZSBpdGVtIGZyb20gcG9zaXRpb24gXCIgKyBzdGFydFBvc2l0aW9uICsgXCJcXG4gICAgICB0byBwb3NpdGlvbiBcIiArIGVuZFBvc2l0aW9uICsgXCJcXG4gICAgXCI7XG4gIH1cblxuICByZXR1cm4gXCJcXG4gICAgWW91IGhhdmUgbW92ZWQgdGhlIGl0ZW0gZnJvbSBwb3NpdGlvbiBcIiArIHN0YXJ0UG9zaXRpb24gKyBcIlxcbiAgICBpbiBsaXN0IFwiICsgc291cmNlLmRyb3BwYWJsZUlkICsgXCJcXG4gICAgdG8gbGlzdCBcIiArIGRlc3RpbmF0aW9uLmRyb3BwYWJsZUlkICsgXCJcXG4gICAgaW4gcG9zaXRpb24gXCIgKyBlbmRQb3NpdGlvbiArIFwiXFxuICBcIjtcbn07XG5cbnZhciB3aXRoQ29tYmluZSA9IGZ1bmN0aW9uIHdpdGhDb21iaW5lKGlkLCBzb3VyY2UsIGNvbWJpbmUpIHtcbiAgdmFyIGluSG9tZUxpc3QgPSBzb3VyY2UuZHJvcHBhYmxlSWQgPT09IGNvbWJpbmUuZHJvcHBhYmxlSWQ7XG5cbiAgaWYgKGluSG9tZUxpc3QpIHtcbiAgICByZXR1cm4gXCJcXG4gICAgICBUaGUgaXRlbSBcIiArIGlkICsgXCJcXG4gICAgICBoYXMgYmVlbiBjb21iaW5lZCB3aXRoIFwiICsgY29tYmluZS5kcmFnZ2FibGVJZDtcbiAgfVxuXG4gIHJldHVybiBcIlxcbiAgICAgIFRoZSBpdGVtIFwiICsgaWQgKyBcIlxcbiAgICAgIGluIGxpc3QgXCIgKyBzb3VyY2UuZHJvcHBhYmxlSWQgKyBcIlxcbiAgICAgIGhhcyBiZWVuIGNvbWJpbmVkIHdpdGggXCIgKyBjb21iaW5lLmRyYWdnYWJsZUlkICsgXCJcXG4gICAgICBpbiBsaXN0IFwiICsgY29tYmluZS5kcm9wcGFibGVJZCArIFwiXFxuICAgIFwiO1xufTtcblxudmFyIG9uRHJhZ1VwZGF0ZSA9IGZ1bmN0aW9uIG9uRHJhZ1VwZGF0ZSh1cGRhdGUpIHtcbiAgdmFyIGxvY2F0aW9uID0gdXBkYXRlLmRlc3RpbmF0aW9uO1xuXG4gIGlmIChsb2NhdGlvbikge1xuICAgIHJldHVybiB3aXRoTG9jYXRpb24odXBkYXRlLnNvdXJjZSwgbG9jYXRpb24pO1xuICB9XG5cbiAgdmFyIGNvbWJpbmUgPSB1cGRhdGUuY29tYmluZTtcblxuICBpZiAoY29tYmluZSkge1xuICAgIHJldHVybiB3aXRoQ29tYmluZSh1cGRhdGUuZHJhZ2dhYmxlSWQsIHVwZGF0ZS5zb3VyY2UsIGNvbWJpbmUpO1xuICB9XG5cbiAgcmV0dXJuICdZb3UgYXJlIG92ZXIgYW4gYXJlYSB0aGF0IGNhbm5vdCBiZSBkcm9wcGVkIG9uJztcbn07XG5cbnZhciByZXR1cm5lZFRvU3RhcnQgPSBmdW5jdGlvbiByZXR1cm5lZFRvU3RhcnQoc291cmNlKSB7XG4gIHJldHVybiBcIlxcbiAgVGhlIGl0ZW0gaGFzIHJldHVybmVkIHRvIGl0cyBzdGFydGluZyBwb3NpdGlvblxcbiAgb2YgXCIgKyBwb3NpdGlvbihzb3VyY2UuaW5kZXgpICsgXCJcXG5cIjtcbn07XG5cbnZhciBvbkRyYWdFbmQgPSBmdW5jdGlvbiBvbkRyYWdFbmQocmVzdWx0KSB7XG4gIGlmIChyZXN1bHQucmVhc29uID09PSAnQ0FOQ0VMJykge1xuICAgIHJldHVybiBcIlxcbiAgICAgIE1vdmVtZW50IGNhbmNlbGxlZC5cXG4gICAgICBcIiArIHJldHVybmVkVG9TdGFydChyZXN1bHQuc291cmNlKSArIFwiXFxuICAgIFwiO1xuICB9XG5cbiAgdmFyIGxvY2F0aW9uID0gcmVzdWx0LmRlc3RpbmF0aW9uO1xuICB2YXIgY29tYmluZSA9IHJlc3VsdC5jb21iaW5lO1xuXG4gIGlmIChsb2NhdGlvbikge1xuICAgIHJldHVybiBcIlxcbiAgICAgIFlvdSBoYXZlIGRyb3BwZWQgdGhlIGl0ZW0uXFxuICAgICAgXCIgKyB3aXRoTG9jYXRpb24ocmVzdWx0LnNvdXJjZSwgbG9jYXRpb24pICsgXCJcXG4gICAgXCI7XG4gIH1cblxuICBpZiAoY29tYmluZSkge1xuICAgIHJldHVybiBcIlxcbiAgICAgIFlvdSBoYXZlIGRyb3BwZWQgdGhlIGl0ZW0uXFxuICAgICAgXCIgKyB3aXRoQ29tYmluZShyZXN1bHQuZHJhZ2dhYmxlSWQsIHJlc3VsdC5zb3VyY2UsIGNvbWJpbmUpICsgXCJcXG4gICAgXCI7XG4gIH1cblxuICByZXR1cm4gXCJcXG4gICAgVGhlIGl0ZW0gaGFzIGJlZW4gZHJvcHBlZCB3aGlsZSBub3Qgb3ZlciBhIGRyb3AgYXJlYS5cXG4gICAgXCIgKyByZXR1cm5lZFRvU3RhcnQocmVzdWx0LnNvdXJjZSkgKyBcIlxcbiAgXCI7XG59O1xuXG52YXIgcHJlc2V0ID0ge1xuICBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnM6IGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucyxcbiAgb25EcmFnU3RhcnQ6IG9uRHJhZ1N0YXJ0LFxuICBvbkRyYWdVcGRhdGU6IG9uRHJhZ1VwZGF0ZSxcbiAgb25EcmFnRW5kOiBvbkRyYWdFbmRcbn07XG5cbnZhciBvcmlnaW4gPSB7XG4gIHg6IDAsXG4gIHk6IDBcbn07XG52YXIgYWRkID0gZnVuY3Rpb24gYWRkKHBvaW50MSwgcG9pbnQyKSB7XG4gIHJldHVybiB7XG4gICAgeDogcG9pbnQxLnggKyBwb2ludDIueCxcbiAgICB5OiBwb2ludDEueSArIHBvaW50Mi55XG4gIH07XG59O1xudmFyIHN1YnRyYWN0ID0gZnVuY3Rpb24gc3VidHJhY3QocG9pbnQxLCBwb2ludDIpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwb2ludDEueCAtIHBvaW50Mi54LFxuICAgIHk6IHBvaW50MS55IC0gcG9pbnQyLnlcbiAgfTtcbn07XG52YXIgaXNFcXVhbCA9IGZ1bmN0aW9uIGlzRXF1YWwocG9pbnQxLCBwb2ludDIpIHtcbiAgcmV0dXJuIHBvaW50MS54ID09PSBwb2ludDIueCAmJiBwb2ludDEueSA9PT0gcG9pbnQyLnk7XG59O1xudmFyIG5lZ2F0ZSA9IGZ1bmN0aW9uIG5lZ2F0ZShwb2ludCkge1xuICByZXR1cm4ge1xuICAgIHg6IHBvaW50LnggIT09IDAgPyAtcG9pbnQueCA6IDAsXG4gICAgeTogcG9pbnQueSAhPT0gMCA/IC1wb2ludC55IDogMFxuICB9O1xufTtcbnZhciBwYXRjaCA9IGZ1bmN0aW9uIHBhdGNoKGxpbmUsIHZhbHVlLCBvdGhlclZhbHVlKSB7XG4gIHZhciBfcmVmO1xuXG4gIGlmIChvdGhlclZhbHVlID09PSB2b2lkIDApIHtcbiAgICBvdGhlclZhbHVlID0gMDtcbiAgfVxuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbbGluZV0gPSB2YWx1ZSwgX3JlZltsaW5lID09PSAneCcgPyAneScgOiAneCddID0gb3RoZXJWYWx1ZSwgX3JlZjtcbn07XG52YXIgZGlzdGFuY2UgPSBmdW5jdGlvbiBkaXN0YW5jZShwb2ludDEsIHBvaW50Mikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50Mi54IC0gcG9pbnQxLngsIDIpICsgTWF0aC5wb3cocG9pbnQyLnkgLSBwb2ludDEueSwgMikpO1xufTtcbnZhciBjbG9zZXN0ID0gZnVuY3Rpb24gY2xvc2VzdCh0YXJnZXQsIHBvaW50cykge1xuICByZXR1cm4gTWF0aC5taW4uYXBwbHkoTWF0aCwgcG9pbnRzLm1hcChmdW5jdGlvbiAocG9pbnQpIHtcbiAgICByZXR1cm4gZGlzdGFuY2UodGFyZ2V0LCBwb2ludCk7XG4gIH0pKTtcbn07XG52YXIgYXBwbHkgPSBmdW5jdGlvbiBhcHBseShmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGZuKHBvaW50LngpLFxuICAgICAgeTogZm4ocG9pbnQueSlcbiAgICB9O1xuICB9O1xufTtcblxudmFyIGV4ZWN1dGVDbGlwID0gKGZ1bmN0aW9uIChmcmFtZSwgc3ViamVjdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0UmVjdCh7XG4gICAgdG9wOiBNYXRoLm1heChzdWJqZWN0LnRvcCwgZnJhbWUudG9wKSxcbiAgICByaWdodDogTWF0aC5taW4oc3ViamVjdC5yaWdodCwgZnJhbWUucmlnaHQpLFxuICAgIGJvdHRvbTogTWF0aC5taW4oc3ViamVjdC5ib3R0b20sIGZyYW1lLmJvdHRvbSksXG4gICAgbGVmdDogTWF0aC5tYXgoc3ViamVjdC5sZWZ0LCBmcmFtZS5sZWZ0KVxuICB9KTtcblxuICBpZiAocmVzdWx0LndpZHRoIDw9IDAgfHwgcmVzdWx0LmhlaWdodCA8PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbnZhciBvZmZzZXRCeVBvc2l0aW9uID0gZnVuY3Rpb24gb2Zmc2V0QnlQb3NpdGlvbihzcGFjaW5nLCBwb2ludCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogc3BhY2luZy50b3AgKyBwb2ludC55LFxuICAgIGxlZnQ6IHNwYWNpbmcubGVmdCArIHBvaW50LngsXG4gICAgYm90dG9tOiBzcGFjaW5nLmJvdHRvbSArIHBvaW50LnksXG4gICAgcmlnaHQ6IHNwYWNpbmcucmlnaHQgKyBwb2ludC54XG4gIH07XG59O1xudmFyIGdldENvcm5lcnMgPSBmdW5jdGlvbiBnZXRDb3JuZXJzKHNwYWNpbmcpIHtcbiAgcmV0dXJuIFt7XG4gICAgeDogc3BhY2luZy5sZWZ0LFxuICAgIHk6IHNwYWNpbmcudG9wXG4gIH0sIHtcbiAgICB4OiBzcGFjaW5nLnJpZ2h0LFxuICAgIHk6IHNwYWNpbmcudG9wXG4gIH0sIHtcbiAgICB4OiBzcGFjaW5nLmxlZnQsXG4gICAgeTogc3BhY2luZy5ib3R0b21cbiAgfSwge1xuICAgIHg6IHNwYWNpbmcucmlnaHQsXG4gICAgeTogc3BhY2luZy5ib3R0b21cbiAgfV07XG59O1xudmFyIG5vU3BhY2luZyA9IHtcbiAgdG9wOiAwLFxuICByaWdodDogMCxcbiAgYm90dG9tOiAwLFxuICBsZWZ0OiAwXG59O1xuXG52YXIgc2Nyb2xsID0gZnVuY3Rpb24gc2Nyb2xsKHRhcmdldCwgZnJhbWUpIHtcbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0QnlQb3NpdGlvbih0YXJnZXQsIGZyYW1lLnNjcm9sbC5kaWZmLmRpc3BsYWNlbWVudCk7XG59O1xuXG52YXIgaW5jcmVhc2UgPSBmdW5jdGlvbiBpbmNyZWFzZSh0YXJnZXQsIGF4aXMsIHdpdGhQbGFjZWhvbGRlcikge1xuICBpZiAod2l0aFBsYWNlaG9sZGVyICYmIHdpdGhQbGFjZWhvbGRlci5pbmNyZWFzZWRCeSkge1xuICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRhcmdldCwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJbYXhpcy5lbmRdID0gdGFyZ2V0W2F4aXMuZW5kXSArIHdpdGhQbGFjZWhvbGRlci5pbmNyZWFzZWRCeVtheGlzLmxpbmVdLCBfZXh0ZW5kczIpKTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgY2xpcCA9IGZ1bmN0aW9uIGNsaXAodGFyZ2V0LCBmcmFtZSkge1xuICBpZiAoZnJhbWUgJiYgZnJhbWUuc2hvdWxkQ2xpcFN1YmplY3QpIHtcbiAgICByZXR1cm4gZXhlY3V0ZUNsaXAoZnJhbWUucGFnZU1hcmdpbkJveCwgdGFyZ2V0KTtcbiAgfVxuXG4gIHJldHVybiBnZXRSZWN0KHRhcmdldCk7XG59O1xuXG52YXIgZ2V0U3ViamVjdCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgcGFnZSA9IF9yZWYucGFnZSxcbiAgICAgIHdpdGhQbGFjZWhvbGRlciA9IF9yZWYud2l0aFBsYWNlaG9sZGVyLFxuICAgICAgYXhpcyA9IF9yZWYuYXhpcyxcbiAgICAgIGZyYW1lID0gX3JlZi5mcmFtZTtcbiAgdmFyIHNjcm9sbGVkID0gc2Nyb2xsKHBhZ2UubWFyZ2luQm94LCBmcmFtZSk7XG4gIHZhciBpbmNyZWFzZWQgPSBpbmNyZWFzZShzY3JvbGxlZCwgYXhpcywgd2l0aFBsYWNlaG9sZGVyKTtcbiAgdmFyIGNsaXBwZWQgPSBjbGlwKGluY3JlYXNlZCwgZnJhbWUpO1xuICByZXR1cm4ge1xuICAgIHBhZ2U6IHBhZ2UsXG4gICAgd2l0aFBsYWNlaG9sZGVyOiB3aXRoUGxhY2Vob2xkZXIsXG4gICAgYWN0aXZlOiBjbGlwcGVkXG4gIH07XG59KTtcblxudmFyIHNjcm9sbERyb3BwYWJsZSA9IChmdW5jdGlvbiAoZHJvcHBhYmxlLCBuZXdTY3JvbGwpIHtcbiAgIWRyb3BwYWJsZS5mcmFtZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgc2Nyb2xsYWJsZSA9IGRyb3BwYWJsZS5mcmFtZTtcbiAgdmFyIHNjcm9sbERpZmYgPSBzdWJ0cmFjdChuZXdTY3JvbGwsIHNjcm9sbGFibGUuc2Nyb2xsLmluaXRpYWwpO1xuICB2YXIgc2Nyb2xsRGlzcGxhY2VtZW50ID0gbmVnYXRlKHNjcm9sbERpZmYpO1xuXG4gIHZhciBmcmFtZSA9IF9leHRlbmRzKHt9LCBzY3JvbGxhYmxlLCB7XG4gICAgc2Nyb2xsOiB7XG4gICAgICBpbml0aWFsOiBzY3JvbGxhYmxlLnNjcm9sbC5pbml0aWFsLFxuICAgICAgY3VycmVudDogbmV3U2Nyb2xsLFxuICAgICAgZGlmZjoge1xuICAgICAgICB2YWx1ZTogc2Nyb2xsRGlmZixcbiAgICAgICAgZGlzcGxhY2VtZW50OiBzY3JvbGxEaXNwbGFjZW1lbnRcbiAgICAgIH0sXG4gICAgICBtYXg6IHNjcm9sbGFibGUuc2Nyb2xsLm1heFxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIHN1YmplY3QgPSBnZXRTdWJqZWN0KHtcbiAgICBwYWdlOiBkcm9wcGFibGUuc3ViamVjdC5wYWdlLFxuICAgIHdpdGhQbGFjZWhvbGRlcjogZHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyLFxuICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgIGZyYW1lOiBmcmFtZVxuICB9KTtcblxuICB2YXIgcmVzdWx0ID0gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgIGZyYW1lOiBmcmFtZSxcbiAgICBzdWJqZWN0OiBzdWJqZWN0XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gIGlmIChOdW1iZXIuaXNJbnRlZ2VyKSB7XG4gICAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHZhbHVlcyhtYXApIHtcbiAgaWYgKE9iamVjdC52YWx1ZXMpIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhtYXApO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1hcCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWFwW2tleV07XG4gIH0pO1xufVxuZnVuY3Rpb24gZmluZEluZGV4KGxpc3QsIHByZWRpY2F0ZSkge1xuICBpZiAobGlzdC5maW5kSW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdC5maW5kSW5kZXgocHJlZGljYXRlKTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChwcmVkaWNhdGUobGlzdFtpXSkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIGZpbmQobGlzdCwgcHJlZGljYXRlKSB7XG4gIGlmIChsaXN0LmZpbmQpIHtcbiAgICByZXR1cm4gbGlzdC5maW5kKHByZWRpY2F0ZSk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBmaW5kSW5kZXgobGlzdCwgcHJlZGljYXRlKTtcblxuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgcmV0dXJuIGxpc3RbaW5kZXhdO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobGlzdCk7XG59XG5cbnZhciB0b0Ryb3BwYWJsZU1hcCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyb3BwYWJsZXMpIHtcbiAgcmV0dXJuIGRyb3BwYWJsZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCkge1xuICAgIHByZXZpb3VzW2N1cnJlbnQuZGVzY3JpcHRvci5pZF0gPSBjdXJyZW50O1xuICAgIHJldHVybiBwcmV2aW91cztcbiAgfSwge30pO1xufSk7XG52YXIgdG9EcmFnZ2FibGVNYXAgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChkcmFnZ2FibGVzKSB7XG4gIHJldHVybiBkcmFnZ2FibGVzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICBwcmV2aW91c1tjdXJyZW50LmRlc2NyaXB0b3IuaWRdID0gY3VycmVudDtcbiAgICByZXR1cm4gcHJldmlvdXM7XG4gIH0sIHt9KTtcbn0pO1xudmFyIHRvRHJvcHBhYmxlTGlzdCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyb3BwYWJsZXMpIHtcbiAgcmV0dXJuIHZhbHVlcyhkcm9wcGFibGVzKTtcbn0pO1xudmFyIHRvRHJhZ2dhYmxlTGlzdCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyYWdnYWJsZXMpIHtcbiAgcmV0dXJuIHZhbHVlcyhkcmFnZ2FibGVzKTtcbn0pO1xuXG52YXIgZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZSA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyb3BwYWJsZUlkLCBkcmFnZ2FibGVzKSB7XG4gIHZhciByZXN1bHQgPSB0b0RyYWdnYWJsZUxpc3QoZHJhZ2dhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChkcmFnZ2FibGUpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlSWQgPT09IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEuZGVzY3JpcHRvci5pbmRleCAtIGIuZGVzY3JpcHRvci5pbmRleDtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuZnVuY3Rpb24gdHJ5R2V0RGVzdGluYXRpb24oaW1wYWN0KSB7XG4gIGlmIChpbXBhY3QuYXQgJiYgaW1wYWN0LmF0LnR5cGUgPT09ICdSRU9SREVSJykge1xuICAgIHJldHVybiBpbXBhY3QuYXQuZGVzdGluYXRpb247XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHRyeUdldENvbWJpbmUoaW1wYWN0KSB7XG4gIGlmIChpbXBhY3QuYXQgJiYgaW1wYWN0LmF0LnR5cGUgPT09ICdDT01CSU5FJykge1xuICAgIHJldHVybiBpbXBhY3QuYXQuY29tYmluZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChyZW1vdmUsIGxpc3QpIHtcbiAgcmV0dXJuIGxpc3QuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0uZGVzY3JpcHRvci5pZCAhPT0gcmVtb3ZlLmRlc2NyaXB0b3IuaWQ7XG4gIH0pO1xufSk7XG5cbnZhciBtb3ZlVG9OZXh0Q29tYmluZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdDtcblxuICBpZiAoIWRlc3RpbmF0aW9uLmlzQ29tYmluZUVuYWJsZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHRyeUdldERlc3RpbmF0aW9uKHByZXZpb3VzSW1wYWN0KTtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbXBhY3QodGFyZ2V0KSB7XG4gICAgdmFyIGF0ID0ge1xuICAgICAgdHlwZTogJ0NPTUJJTkUnLFxuICAgICAgY29tYmluZToge1xuICAgICAgICBkcmFnZ2FibGVJZDogdGFyZ2V0LFxuICAgICAgICBkcm9wcGFibGVJZDogZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZFxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBwcmV2aW91c0ltcGFjdCwge1xuICAgICAgYXQ6IGF0XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYWxsID0gcHJldmlvdXNJbXBhY3QuZGlzcGxhY2VkLmFsbDtcbiAgdmFyIGNsb3Nlc3RJZCA9IGFsbC5sZW5ndGggPyBhbGxbMF0gOiBudWxsO1xuXG4gIGlmIChpc01vdmluZ0ZvcndhcmQpIHtcbiAgICByZXR1cm4gY2xvc2VzdElkID8gZ2V0SW1wYWN0KGNsb3Nlc3RJZCkgOiBudWxsO1xuICB9XG5cbiAgdmFyIHdpdGhvdXREcmFnZ2FibGUgPSByZW1vdmVEcmFnZ2FibGVGcm9tTGlzdChkcmFnZ2FibGUsIGluc2lkZURlc3RpbmF0aW9uKTtcblxuICBpZiAoIWNsb3Nlc3RJZCkge1xuICAgIGlmICghd2l0aG91dERyYWdnYWJsZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBsYXN0ID0gd2l0aG91dERyYWdnYWJsZVt3aXRob3V0RHJhZ2dhYmxlLmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBnZXRJbXBhY3QobGFzdC5kZXNjcmlwdG9yLmlkKTtcbiAgfVxuXG4gIHZhciBpbmRleE9mQ2xvc2VzdCA9IGZpbmRJbmRleCh3aXRob3V0RHJhZ2dhYmxlLCBmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBkLmRlc2NyaXB0b3IuaWQgPT09IGNsb3Nlc3RJZDtcbiAgfSk7XG4gICEoaW5kZXhPZkNsb3Nlc3QgIT09IC0xKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBmaW5kIGRpc3BsYWNlZCBpdGVtIGluIHNldCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIHByb3Bvc2VkSW5kZXggPSBpbmRleE9mQ2xvc2VzdCAtIDE7XG5cbiAgaWYgKHByb3Bvc2VkSW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYmVmb3JlID0gd2l0aG91dERyYWdnYWJsZVtwcm9wb3NlZEluZGV4XTtcbiAgcmV0dXJuIGdldEltcGFjdChiZWZvcmUuZGVzY3JpcHRvci5pZCk7XG59KTtcblxudmFyIGlzSG9tZU9mID0gKGZ1bmN0aW9uIChkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKSB7XG4gIHJldHVybiBkcmFnZ2FibGUuZGVzY3JpcHRvci5kcm9wcGFibGVJZCA9PT0gZGVzdGluYXRpb24uZGVzY3JpcHRvci5pZDtcbn0pO1xuXG52YXIgbm9EaXNwbGFjZWRCeSA9IHtcbiAgcG9pbnQ6IG9yaWdpbixcbiAgdmFsdWU6IDBcbn07XG52YXIgZW1wdHlHcm91cHMgPSB7XG4gIGludmlzaWJsZToge30sXG4gIHZpc2libGU6IHt9LFxuICBhbGw6IFtdXG59O1xudmFyIG5vSW1wYWN0ID0ge1xuICBkaXNwbGFjZWQ6IGVtcHR5R3JvdXBzLFxuICBkaXNwbGFjZWRCeTogbm9EaXNwbGFjZWRCeSxcbiAgYXQ6IG51bGxcbn07XG5cbnZhciBpc1dpdGhpbiA9IChmdW5jdGlvbiAobG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGxvd2VyQm91bmQgPD0gdmFsdWUgJiYgdmFsdWUgPD0gdXBwZXJCb3VuZDtcbiAgfTtcbn0pO1xuXG52YXIgaXNQYXJ0aWFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lID0gKGZ1bmN0aW9uIChmcmFtZSkge1xuICB2YXIgaXNXaXRoaW5WZXJ0aWNhbCA9IGlzV2l0aGluKGZyYW1lLnRvcCwgZnJhbWUuYm90dG9tKTtcbiAgdmFyIGlzV2l0aGluSG9yaXpvbnRhbCA9IGlzV2l0aGluKGZyYW1lLmxlZnQsIGZyYW1lLnJpZ2h0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdWJqZWN0KSB7XG4gICAgdmFyIGlzQ29udGFpbmVkID0gaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LnRvcCkgJiYgaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LmJvdHRvbSkgJiYgaXNXaXRoaW5Ib3Jpem9udGFsKHN1YmplY3QubGVmdCkgJiYgaXNXaXRoaW5Ib3Jpem9udGFsKHN1YmplY3QucmlnaHQpO1xuXG4gICAgaWYgKGlzQ29udGFpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgaXNQYXJ0aWFsbHlWaXNpYmxlVmVydGljYWxseSA9IGlzV2l0aGluVmVydGljYWwoc3ViamVjdC50b3ApIHx8IGlzV2l0aGluVmVydGljYWwoc3ViamVjdC5ib3R0b20pO1xuICAgIHZhciBpc1BhcnRpYWxseVZpc2libGVIb3Jpem9udGFsbHkgPSBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSB8fCBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG4gICAgdmFyIGlzUGFydGlhbGx5Q29udGFpbmVkID0gaXNQYXJ0aWFsbHlWaXNpYmxlVmVydGljYWxseSAmJiBpc1BhcnRpYWxseVZpc2libGVIb3Jpem9udGFsbHk7XG5cbiAgICBpZiAoaXNQYXJ0aWFsbHlDb250YWluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc0JpZ2dlclZlcnRpY2FsbHkgPSBzdWJqZWN0LnRvcCA8IGZyYW1lLnRvcCAmJiBzdWJqZWN0LmJvdHRvbSA+IGZyYW1lLmJvdHRvbTtcbiAgICB2YXIgaXNCaWdnZXJIb3Jpem9udGFsbHkgPSBzdWJqZWN0LmxlZnQgPCBmcmFtZS5sZWZ0ICYmIHN1YmplY3QucmlnaHQgPiBmcmFtZS5yaWdodDtcbiAgICB2YXIgaXNUYXJnZXRCaWdnZXJUaGFuRnJhbWUgPSBpc0JpZ2dlclZlcnRpY2FsbHkgJiYgaXNCaWdnZXJIb3Jpem9udGFsbHk7XG5cbiAgICBpZiAoaXNUYXJnZXRCaWdnZXJUaGFuRnJhbWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpc1RhcmdldEJpZ2dlck9uT25lQXhpcyA9IGlzQmlnZ2VyVmVydGljYWxseSAmJiBpc1BhcnRpYWxseVZpc2libGVIb3Jpem9udGFsbHkgfHwgaXNCaWdnZXJIb3Jpem9udGFsbHkgJiYgaXNQYXJ0aWFsbHlWaXNpYmxlVmVydGljYWxseTtcbiAgICByZXR1cm4gaXNUYXJnZXRCaWdnZXJPbk9uZUF4aXM7XG4gIH07XG59KTtcblxudmFyIGlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWUgPSAoZnVuY3Rpb24gKGZyYW1lKSB7XG4gIHZhciBpc1dpdGhpblZlcnRpY2FsID0gaXNXaXRoaW4oZnJhbWUudG9wLCBmcmFtZS5ib3R0b20pO1xuICB2YXIgaXNXaXRoaW5Ib3Jpem9udGFsID0gaXNXaXRoaW4oZnJhbWUubGVmdCwgZnJhbWUucmlnaHQpO1xuICByZXR1cm4gZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICB2YXIgaXNDb250YWluZWQgPSBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QudG9wKSAmJiBpc1dpdGhpblZlcnRpY2FsKHN1YmplY3QuYm90dG9tKSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG4gICAgcmV0dXJuIGlzQ29udGFpbmVkO1xuICB9O1xufSk7XG5cbnZhciB2ZXJ0aWNhbCA9IHtcbiAgZGlyZWN0aW9uOiAndmVydGljYWwnLFxuICBsaW5lOiAneScsXG4gIGNyb3NzQXhpc0xpbmU6ICd4JyxcbiAgc3RhcnQ6ICd0b3AnLFxuICBlbmQ6ICdib3R0b20nLFxuICBzaXplOiAnaGVpZ2h0JyxcbiAgY3Jvc3NBeGlzU3RhcnQ6ICdsZWZ0JyxcbiAgY3Jvc3NBeGlzRW5kOiAncmlnaHQnLFxuICBjcm9zc0F4aXNTaXplOiAnd2lkdGgnXG59O1xudmFyIGhvcml6b250YWwgPSB7XG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBsaW5lOiAneCcsXG4gIGNyb3NzQXhpc0xpbmU6ICd5JyxcbiAgc3RhcnQ6ICdsZWZ0JyxcbiAgZW5kOiAncmlnaHQnLFxuICBzaXplOiAnd2lkdGgnLFxuICBjcm9zc0F4aXNTdGFydDogJ3RvcCcsXG4gIGNyb3NzQXhpc0VuZDogJ2JvdHRvbScsXG4gIGNyb3NzQXhpc1NpemU6ICdoZWlnaHQnXG59O1xuXG52YXIgaXNUb3RhbGx5VmlzaWJsZVRocm91Z2hGcmFtZU9uQXhpcyA9IChmdW5jdGlvbiAoYXhpcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGZyYW1lKSB7XG4gICAgdmFyIGlzV2l0aGluVmVydGljYWwgPSBpc1dpdGhpbihmcmFtZS50b3AsIGZyYW1lLmJvdHRvbSk7XG4gICAgdmFyIGlzV2l0aGluSG9yaXpvbnRhbCA9IGlzV2l0aGluKGZyYW1lLmxlZnQsIGZyYW1lLnJpZ2h0KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN1YmplY3QpIHtcbiAgICAgIGlmIChheGlzID09PSB2ZXJ0aWNhbCkge1xuICAgICAgICByZXR1cm4gaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LnRvcCkgJiYgaXNXaXRoaW5WZXJ0aWNhbChzdWJqZWN0LmJvdHRvbSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5sZWZ0KSAmJiBpc1dpdGhpbkhvcml6b250YWwoc3ViamVjdC5yaWdodCk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZ2V0RHJvcHBhYmxlRGlzcGxhY2VkID0gZnVuY3Rpb24gZ2V0RHJvcHBhYmxlRGlzcGxhY2VkKHRhcmdldCwgZGVzdGluYXRpb24pIHtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IGRlc3RpbmF0aW9uLmZyYW1lID8gZGVzdGluYXRpb24uZnJhbWUuc2Nyb2xsLmRpZmYuZGlzcGxhY2VtZW50IDogb3JpZ2luO1xuICByZXR1cm4gb2Zmc2V0QnlQb3NpdGlvbih0YXJnZXQsIGRpc3BsYWNlbWVudCk7XG59O1xuXG52YXIgaXNWaXNpYmxlSW5Ecm9wcGFibGUgPSBmdW5jdGlvbiBpc1Zpc2libGVJbkRyb3BwYWJsZSh0YXJnZXQsIGRlc3RpbmF0aW9uLCBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbikge1xuICBpZiAoIWRlc3RpbmF0aW9uLnN1YmplY3QuYWN0aXZlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKGRlc3RpbmF0aW9uLnN1YmplY3QuYWN0aXZlKSh0YXJnZXQpO1xufTtcblxudmFyIGlzVmlzaWJsZUluVmlld3BvcnQgPSBmdW5jdGlvbiBpc1Zpc2libGVJblZpZXdwb3J0KHRhcmdldCwgdmlld3BvcnQsIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKSB7XG4gIHJldHVybiBpc1Zpc2libGVUaHJvdWdoRnJhbWVGbih2aWV3cG9ydCkodGFyZ2V0KTtcbn07XG5cbnZhciBpc1Zpc2libGUgPSBmdW5jdGlvbiBpc1Zpc2libGUoX3JlZikge1xuICB2YXIgdG9CZURpc3BsYWNlZCA9IF9yZWYudGFyZ2V0LFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCA9IF9yZWYud2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCxcbiAgICAgIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuID0gX3JlZi5pc1Zpc2libGVUaHJvdWdoRnJhbWVGbjtcbiAgdmFyIGRpc3BsYWNlZFRhcmdldCA9IHdpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQgPyBnZXREcm9wcGFibGVEaXNwbGFjZWQodG9CZURpc3BsYWNlZCwgZGVzdGluYXRpb24pIDogdG9CZURpc3BsYWNlZDtcbiAgcmV0dXJuIGlzVmlzaWJsZUluRHJvcHBhYmxlKGRpc3BsYWNlZFRhcmdldCwgZGVzdGluYXRpb24sIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKSAmJiBpc1Zpc2libGVJblZpZXdwb3J0KGRpc3BsYWNlZFRhcmdldCwgdmlld3BvcnQsIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuKTtcbn07XG5cbnZhciBpc1BhcnRpYWxseVZpc2libGUgPSBmdW5jdGlvbiBpc1BhcnRpYWxseVZpc2libGUoYXJncykge1xuICByZXR1cm4gaXNWaXNpYmxlKF9leHRlbmRzKHt9LCBhcmdzLCB7XG4gICAgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm46IGlzUGFydGlhbGx5VmlzaWJsZVRocm91Z2hGcmFtZVxuICB9KSk7XG59O1xudmFyIGlzVG90YWxseVZpc2libGUgPSBmdW5jdGlvbiBpc1RvdGFsbHlWaXNpYmxlKGFyZ3MpIHtcbiAgcmV0dXJuIGlzVmlzaWJsZShfZXh0ZW5kcyh7fSwgYXJncywge1xuICAgIGlzVmlzaWJsZVRocm91Z2hGcmFtZUZuOiBpc1RvdGFsbHlWaXNpYmxlVGhyb3VnaEZyYW1lXG4gIH0pKTtcbn07XG52YXIgaXNUb3RhbGx5VmlzaWJsZU9uQXhpcyA9IGZ1bmN0aW9uIGlzVG90YWxseVZpc2libGVPbkF4aXMoYXJncykge1xuICByZXR1cm4gaXNWaXNpYmxlKF9leHRlbmRzKHt9LCBhcmdzLCB7XG4gICAgaXNWaXNpYmxlVGhyb3VnaEZyYW1lRm46IGlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWVPbkF4aXMoYXJncy5kZXN0aW5hdGlvbi5heGlzKVxuICB9KSk7XG59O1xuXG52YXIgZ2V0U2hvdWxkQW5pbWF0ZSA9IGZ1bmN0aW9uIGdldFNob3VsZEFuaW1hdGUoaWQsIGxhc3QsIGZvcmNlU2hvdWxkQW5pbWF0ZSkge1xuICBpZiAodHlwZW9mIGZvcmNlU2hvdWxkQW5pbWF0ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGZvcmNlU2hvdWxkQW5pbWF0ZTtcbiAgfVxuXG4gIGlmICghbGFzdCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGludmlzaWJsZSA9IGxhc3QuaW52aXNpYmxlLFxuICAgICAgdmlzaWJsZSA9IGxhc3QudmlzaWJsZTtcblxuICBpZiAoaW52aXNpYmxlW2lkXSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcmV2aW91cyA9IHZpc2libGVbaWRdO1xuICByZXR1cm4gcHJldmlvdXMgPyBwcmV2aW91cy5zaG91bGRBbmltYXRlIDogdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGdldFRhcmdldChkcmFnZ2FibGUsIGRpc3BsYWNlZEJ5KSB7XG4gIHZhciBtYXJnaW5Cb3ggPSBkcmFnZ2FibGUucGFnZS5tYXJnaW5Cb3g7XG4gIHZhciBleHBhbmRCeSA9IHtcbiAgICB0b3A6IGRpc3BsYWNlZEJ5LnBvaW50LnksXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IGRpc3BsYWNlZEJ5LnBvaW50LnhcbiAgfTtcbiAgcmV0dXJuIGdldFJlY3QoZXhwYW5kKG1hcmdpbkJveCwgZXhwYW5kQnkpKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKF9yZWYpIHtcbiAgdmFyIGFmdGVyRHJhZ2dpbmcgPSBfcmVmLmFmdGVyRHJhZ2dpbmcsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBkaXNwbGFjZWRCeSA9IF9yZWYuZGlzcGxhY2VkQnksXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBmb3JjZVNob3VsZEFuaW1hdGUgPSBfcmVmLmZvcmNlU2hvdWxkQW5pbWF0ZSxcbiAgICAgIGxhc3QgPSBfcmVmLmxhc3Q7XG4gIHJldHVybiBhZnRlckRyYWdnaW5nLnJlZHVjZShmdW5jdGlvbiBwcm9jZXNzKGdyb3VwcywgZHJhZ2dhYmxlKSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChkcmFnZ2FibGUsIGRpc3BsYWNlZEJ5KTtcbiAgICB2YXIgaWQgPSBkcmFnZ2FibGUuZGVzY3JpcHRvci5pZDtcbiAgICBncm91cHMuYWxsLnB1c2goaWQpO1xuICAgIHZhciBpc1Zpc2libGUgPSBpc1BhcnRpYWxseVZpc2libGUoe1xuICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiB0cnVlXG4gICAgfSk7XG5cbiAgICBpZiAoIWlzVmlzaWJsZSkge1xuICAgICAgZ3JvdXBzLmludmlzaWJsZVtkcmFnZ2FibGUuZGVzY3JpcHRvci5pZF0gPSB0cnVlO1xuICAgICAgcmV0dXJuIGdyb3VwcztcbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkQW5pbWF0ZSA9IGdldFNob3VsZEFuaW1hdGUoaWQsIGxhc3QsIGZvcmNlU2hvdWxkQW5pbWF0ZSk7XG4gICAgdmFyIGRpc3BsYWNlbWVudCA9IHtcbiAgICAgIGRyYWdnYWJsZUlkOiBpZCxcbiAgICAgIHNob3VsZEFuaW1hdGU6IHNob3VsZEFuaW1hdGVcbiAgICB9O1xuICAgIGdyb3Vwcy52aXNpYmxlW2lkXSA9IGRpc3BsYWNlbWVudDtcbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9LCB7XG4gICAgYWxsOiBbXSxcbiAgICB2aXNpYmxlOiB7fSxcbiAgICBpbnZpc2libGU6IHt9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRleE9mTGFzdEl0ZW0oZHJhZ2dhYmxlcywgb3B0aW9ucykge1xuICBpZiAoIWRyYWdnYWJsZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgaW5kZXhPZkxhc3RJdGVtID0gZHJhZ2dhYmxlc1tkcmFnZ2FibGVzLmxlbmd0aCAtIDFdLmRlc2NyaXB0b3IuaW5kZXg7XG4gIHJldHVybiBvcHRpb25zLmluSG9tZUxpc3QgPyBpbmRleE9mTGFzdEl0ZW0gOiBpbmRleE9mTGFzdEl0ZW0gKyAxO1xufVxuXG5mdW5jdGlvbiBnb0F0RW5kKF9yZWYpIHtcbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGluSG9tZUxpc3QgPSBfcmVmLmluSG9tZUxpc3QsXG4gICAgICBkaXNwbGFjZWRCeSA9IF9yZWYuZGlzcGxhY2VkQnksXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb247XG4gIHZhciBuZXdJbmRleCA9IGdldEluZGV4T2ZMYXN0SXRlbShpbnNpZGVEZXN0aW5hdGlvbiwge1xuICAgIGluSG9tZUxpc3Q6IGluSG9tZUxpc3RcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZGlzcGxhY2VkOiBlbXB0eUdyb3VwcyxcbiAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgYXQ6IHtcbiAgICAgIHR5cGU6ICdSRU9SREVSJyxcbiAgICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLFxuICAgICAgICBpbmRleDogbmV3SW5kZXhcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZVJlb3JkZXJJbXBhY3QoX3JlZjIpIHtcbiAgdmFyIGRyYWdnYWJsZSA9IF9yZWYyLmRyYWdnYWJsZSxcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZjIuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYyLmRlc3RpbmF0aW9uLFxuICAgICAgdmlld3BvcnQgPSBfcmVmMi52aWV3cG9ydCxcbiAgICAgIGRpc3BsYWNlZEJ5ID0gX3JlZjIuZGlzcGxhY2VkQnksXG4gICAgICBsYXN0ID0gX3JlZjIubGFzdCxcbiAgICAgIGluZGV4ID0gX3JlZjIuaW5kZXgsXG4gICAgICBmb3JjZVNob3VsZEFuaW1hdGUgPSBfcmVmMi5mb3JjZVNob3VsZEFuaW1hdGU7XG4gIHZhciBpbkhvbWVMaXN0ID0gaXNIb21lT2YoZHJhZ2dhYmxlLCBkZXN0aW5hdGlvbik7XG5cbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICByZXR1cm4gZ29BdEVuZCh7XG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBpbkhvbWVMaXN0OiBpbkhvbWVMaXN0LFxuICAgICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSBmaW5kKGluc2lkZURlc3RpbmF0aW9uLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBpdGVtLmRlc2NyaXB0b3IuaW5kZXggPT09IGluZGV4O1xuICB9KTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIGdvQXRFbmQoe1xuICAgICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgaW5Ib21lTGlzdDogaW5Ib21lTGlzdCxcbiAgICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvblxuICAgIH0pO1xuICB9XG5cbiAgdmFyIHdpdGhvdXREcmFnZ2luZyA9IHJlbW92ZURyYWdnYWJsZUZyb21MaXN0KGRyYWdnYWJsZSwgaW5zaWRlRGVzdGluYXRpb24pO1xuICB2YXIgc2xpY2VGcm9tID0gaW5zaWRlRGVzdGluYXRpb24uaW5kZXhPZihtYXRjaCk7XG4gIHZhciBpbXBhY3RlZCA9IHdpdGhvdXREcmFnZ2luZy5zbGljZShzbGljZUZyb20pO1xuICB2YXIgZGlzcGxhY2VkID0gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKHtcbiAgICBhZnRlckRyYWdnaW5nOiBpbXBhY3RlZCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGxhc3Q6IGxhc3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lLFxuICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZm9yY2VTaG91bGRBbmltYXRlXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkLFxuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBhdDoge1xuICAgICAgdHlwZTogJ1JFT1JERVInLFxuICAgICAgZGVzdGluYXRpb246IHtcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsXG4gICAgICAgIGluZGV4OiBpbmRleFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlkU3RhcnRBZnRlckNyaXRpY2FsKGRyYWdnYWJsZUlkLCBhZnRlckNyaXRpY2FsKSB7XG4gIHJldHVybiBCb29sZWFuKGFmdGVyQ3JpdGljYWwuZWZmZWN0ZWRbZHJhZ2dhYmxlSWRdKTtcbn1cblxudmFyIGZyb21Db21iaW5lID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBjb21iaW5lID0gX3JlZi5jb21iaW5lLFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcblxuICBpZiAoIWRlc3RpbmF0aW9uLmlzQ29tYmluZUVuYWJsZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBjb21iaW5lSWQgPSBjb21iaW5lLmRyYWdnYWJsZUlkO1xuICB2YXIgY29tYmluZVdpdGggPSBkcmFnZ2FibGVzW2NvbWJpbmVJZF07XG4gIHZhciBjb21iaW5lV2l0aEluZGV4ID0gY29tYmluZVdpdGguZGVzY3JpcHRvci5pbmRleDtcbiAgdmFyIGRpZENvbWJpbmVXaXRoU3RhcnRBZnRlckNyaXRpY2FsID0gZGlkU3RhcnRBZnRlckNyaXRpY2FsKGNvbWJpbmVJZCwgYWZ0ZXJDcml0aWNhbCk7XG5cbiAgaWYgKGRpZENvbWJpbmVXaXRoU3RhcnRBZnRlckNyaXRpY2FsKSB7XG4gICAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgICAgcmV0dXJuIGNvbWJpbmVXaXRoSW5kZXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbWJpbmVXaXRoSW5kZXggLSAxO1xuICB9XG5cbiAgaWYgKGlzTW92aW5nRm9yd2FyZCkge1xuICAgIHJldHVybiBjb21iaW5lV2l0aEluZGV4ICsgMTtcbiAgfVxuXG4gIHJldHVybiBjb21iaW5lV2l0aEluZGV4O1xufSk7XG5cbnZhciBmcm9tUmVvcmRlciA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBpc0luSG9tZUxpc3QgPSBfcmVmLmlzSW5Ib21lTGlzdCxcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZi5pbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbjtcblxuICBpZiAoIWluc2lkZURlc3RpbmF0aW9uLmxlbmd0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRJbmRleCA9IGxvY2F0aW9uLmluZGV4O1xuICB2YXIgcHJvcG9zZWRJbmRleCA9IGlzTW92aW5nRm9yd2FyZCA/IGN1cnJlbnRJbmRleCArIDEgOiBjdXJyZW50SW5kZXggLSAxO1xuICB2YXIgZmlyc3RJbmRleCA9IGluc2lkZURlc3RpbmF0aW9uWzBdLmRlc2NyaXB0b3IuaW5kZXg7XG4gIHZhciBsYXN0SW5kZXggPSBpbnNpZGVEZXN0aW5hdGlvbltpbnNpZGVEZXN0aW5hdGlvbi5sZW5ndGggLSAxXS5kZXNjcmlwdG9yLmluZGV4O1xuICB2YXIgdXBwZXJCb3VuZCA9IGlzSW5Ib21lTGlzdCA/IGxhc3RJbmRleCA6IGxhc3RJbmRleCArIDE7XG5cbiAgaWYgKHByb3Bvc2VkSW5kZXggPCBmaXJzdEluZGV4KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAocHJvcG9zZWRJbmRleCA+IHVwcGVyQm91bmQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwcm9wb3NlZEluZGV4O1xufSk7XG5cbnZhciBtb3ZlVG9OZXh0SW5kZXggPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGlzTW92aW5nRm9yd2FyZCA9IF9yZWYuaXNNb3ZpbmdGb3J3YXJkLFxuICAgICAgaXNJbkhvbWVMaXN0ID0gX3JlZi5pc0luSG9tZUxpc3QsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBwcmV2aW91c0ltcGFjdCA9IF9yZWYucHJldmlvdXNJbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuICB2YXIgd2FzQXQgPSBwcmV2aW91c0ltcGFjdC5hdDtcbiAgIXdhc0F0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IG1vdmUgaW4gZGlyZWN0aW9uIHdpdGhvdXQgcHJldmlvdXMgaW1wYWN0IGxvY2F0aW9uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIGlmICh3YXNBdC50eXBlID09PSAnUkVPUkRFUicpIHtcbiAgICB2YXIgX25ld0luZGV4ID0gZnJvbVJlb3JkZXIoe1xuICAgICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgICBpc0luSG9tZUxpc3Q6IGlzSW5Ib21lTGlzdCxcbiAgICAgIGxvY2F0aW9uOiB3YXNBdC5kZXN0aW5hdGlvbixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvblxuICAgIH0pO1xuXG4gICAgaWYgKF9uZXdJbmRleCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsY3VsYXRlUmVvcmRlckltcGFjdCh7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIGxhc3Q6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZCxcbiAgICAgIGRpc3BsYWNlZEJ5OiBwcmV2aW91c0ltcGFjdC5kaXNwbGFjZWRCeSxcbiAgICAgIGluZGV4OiBfbmV3SW5kZXhcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBuZXdJbmRleCA9IGZyb21Db21iaW5lKHtcbiAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZGlzcGxhY2VkOiBwcmV2aW91c0ltcGFjdC5kaXNwbGFjZWQsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBjb21iaW5lOiB3YXNBdC5jb21iaW5lLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWxcbiAgfSk7XG5cbiAgaWYgKG5ld0luZGV4ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBjYWxjdWxhdGVSZW9yZGVySW1wYWN0KHtcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBsYXN0OiBwcmV2aW91c0ltcGFjdC5kaXNwbGFjZWQsXG4gICAgZGlzcGxhY2VkQnk6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZEJ5LFxuICAgIGluZGV4OiBuZXdJbmRleFxuICB9KTtcbn0pO1xuXG52YXIgZ2V0Q29tYmluZWRJdGVtRGlzcGxhY2VtZW50ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkaXNwbGFjZWQgPSBfcmVmLmRpc3BsYWNlZCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWwsXG4gICAgICBjb21iaW5lV2l0aCA9IF9yZWYuY29tYmluZVdpdGgsXG4gICAgICBkaXNwbGFjZWRCeSA9IF9yZWYuZGlzcGxhY2VkQnk7XG4gIHZhciBpc0Rpc3BsYWNlZCA9IEJvb2xlYW4oZGlzcGxhY2VkLnZpc2libGVbY29tYmluZVdpdGhdIHx8IGRpc3BsYWNlZC5pbnZpc2libGVbY29tYmluZVdpdGhdKTtcblxuICBpZiAoZGlkU3RhcnRBZnRlckNyaXRpY2FsKGNvbWJpbmVXaXRoLCBhZnRlckNyaXRpY2FsKSkge1xuICAgIHJldHVybiBpc0Rpc3BsYWNlZCA/IG9yaWdpbiA6IG5lZ2F0ZShkaXNwbGFjZWRCeS5wb2ludCk7XG4gIH1cblxuICByZXR1cm4gaXNEaXNwbGFjZWQgPyBkaXNwbGFjZWRCeS5wb2ludCA6IG9yaWdpbjtcbn0pO1xuXG52YXIgd2hlbkNvbWJpbmluZyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbCxcbiAgICAgIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcztcbiAgdmFyIGNvbWJpbmUgPSB0cnlHZXRDb21iaW5lKGltcGFjdCk7XG4gICFjb21iaW5lID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBjb21iaW5lV2l0aCA9IGNvbWJpbmUuZHJhZ2dhYmxlSWQ7XG4gIHZhciBjZW50ZXIgPSBkcmFnZ2FibGVzW2NvbWJpbmVXaXRoXS5wYWdlLmJvcmRlckJveC5jZW50ZXI7XG4gIHZhciBkaXNwbGFjZUJ5ID0gZ2V0Q29tYmluZWRJdGVtRGlzcGxhY2VtZW50KHtcbiAgICBkaXNwbGFjZWQ6IGltcGFjdC5kaXNwbGFjZWQsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbCxcbiAgICBjb21iaW5lV2l0aDogY29tYmluZVdpdGgsXG4gICAgZGlzcGxhY2VkQnk6IGltcGFjdC5kaXNwbGFjZWRCeVxuICB9KTtcbiAgcmV0dXJuIGFkZChjZW50ZXIsIGRpc3BsYWNlQnkpO1xufSk7XG5cbnZhciBkaXN0YW5jZUZyb21TdGFydFRvQm9yZGVyQm94Q2VudGVyID0gZnVuY3Rpb24gZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlcihheGlzLCBib3gpIHtcbiAgcmV0dXJuIGJveC5tYXJnaW5bYXhpcy5zdGFydF0gKyBib3guYm9yZGVyQm94W2F4aXMuc2l6ZV0gLyAyO1xufTtcblxudmFyIGRpc3RhbmNlRnJvbUVuZFRvQm9yZGVyQm94Q2VudGVyID0gZnVuY3Rpb24gZGlzdGFuY2VGcm9tRW5kVG9Cb3JkZXJCb3hDZW50ZXIoYXhpcywgYm94KSB7XG4gIHJldHVybiBib3gubWFyZ2luW2F4aXMuZW5kXSArIGJveC5ib3JkZXJCb3hbYXhpcy5zaXplXSAvIDI7XG59O1xuXG52YXIgZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyID0gZnVuY3Rpb24gZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyKGF4aXMsIHRhcmdldCwgaXNNb3ZpbmcpIHtcbiAgcmV0dXJuIHRhcmdldFtheGlzLmNyb3NzQXhpc1N0YXJ0XSArIGlzTW92aW5nLm1hcmdpbltheGlzLmNyb3NzQXhpc1N0YXJ0XSArIGlzTW92aW5nLmJvcmRlckJveFtheGlzLmNyb3NzQXhpc1NpemVdIC8gMjtcbn07XG5cbnZhciBnb0FmdGVyID0gZnVuY3Rpb24gZ29BZnRlcihfcmVmKSB7XG4gIHZhciBheGlzID0gX3JlZi5heGlzLFxuICAgICAgbW92ZVJlbGF0aXZlVG8gPSBfcmVmLm1vdmVSZWxhdGl2ZVRvLFxuICAgICAgaXNNb3ZpbmcgPSBfcmVmLmlzTW92aW5nO1xuICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBtb3ZlUmVsYXRpdmVUby5tYXJnaW5Cb3hbYXhpcy5lbmRdICsgZGlzdGFuY2VGcm9tU3RhcnRUb0JvcmRlckJveENlbnRlcihheGlzLCBpc01vdmluZyksIGdldENyb3NzQXhpc0JvcmRlckJveENlbnRlcihheGlzLCBtb3ZlUmVsYXRpdmVUby5tYXJnaW5Cb3gsIGlzTW92aW5nKSk7XG59O1xudmFyIGdvQmVmb3JlID0gZnVuY3Rpb24gZ29CZWZvcmUoX3JlZjIpIHtcbiAgdmFyIGF4aXMgPSBfcmVmMi5heGlzLFxuICAgICAgbW92ZVJlbGF0aXZlVG8gPSBfcmVmMi5tb3ZlUmVsYXRpdmVUbyxcbiAgICAgIGlzTW92aW5nID0gX3JlZjIuaXNNb3Zpbmc7XG4gIHJldHVybiBwYXRjaChheGlzLmxpbmUsIG1vdmVSZWxhdGl2ZVRvLm1hcmdpbkJveFtheGlzLnN0YXJ0XSAtIGRpc3RhbmNlRnJvbUVuZFRvQm9yZGVyQm94Q2VudGVyKGF4aXMsIGlzTW92aW5nKSwgZ2V0Q3Jvc3NBeGlzQm9yZGVyQm94Q2VudGVyKGF4aXMsIG1vdmVSZWxhdGl2ZVRvLm1hcmdpbkJveCwgaXNNb3ZpbmcpKTtcbn07XG52YXIgZ29JbnRvU3RhcnQgPSBmdW5jdGlvbiBnb0ludG9TdGFydChfcmVmMykge1xuICB2YXIgYXhpcyA9IF9yZWYzLmF4aXMsXG4gICAgICBtb3ZlSW50byA9IF9yZWYzLm1vdmVJbnRvLFxuICAgICAgaXNNb3ZpbmcgPSBfcmVmMy5pc01vdmluZztcbiAgcmV0dXJuIHBhdGNoKGF4aXMubGluZSwgbW92ZUludG8uY29udGVudEJveFtheGlzLnN0YXJ0XSArIGRpc3RhbmNlRnJvbVN0YXJ0VG9Cb3JkZXJCb3hDZW50ZXIoYXhpcywgaXNNb3ZpbmcpLCBnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIoYXhpcywgbW92ZUludG8uY29udGVudEJveCwgaXNNb3ZpbmcpKTtcbn07XG5cbnZhciB3aGVuUmVvcmRlcmluZyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGUgPSBfcmVmLmRyb3BwYWJsZSxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG4gIHZhciBpbnNpZGVEZXN0aW5hdGlvbiA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoZHJvcHBhYmxlLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgZHJhZ2dhYmxlUGFnZSA9IGRyYWdnYWJsZS5wYWdlO1xuICB2YXIgYXhpcyA9IGRyb3BwYWJsZS5heGlzO1xuXG4gIGlmICghaW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGdvSW50b1N0YXJ0KHtcbiAgICAgIGF4aXM6IGF4aXMsXG4gICAgICBtb3ZlSW50bzogZHJvcHBhYmxlLnBhZ2UsXG4gICAgICBpc01vdmluZzogZHJhZ2dhYmxlUGFnZVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGRpc3BsYWNlZCA9IGltcGFjdC5kaXNwbGFjZWQsXG4gICAgICBkaXNwbGFjZWRCeSA9IGltcGFjdC5kaXNwbGFjZWRCeTtcbiAgdmFyIGNsb3Nlc3RBZnRlciA9IGRpc3BsYWNlZC5hbGxbMF07XG5cbiAgaWYgKGNsb3Nlc3RBZnRlcikge1xuICAgIHZhciBjbG9zZXN0ID0gZHJhZ2dhYmxlc1tjbG9zZXN0QWZ0ZXJdO1xuXG4gICAgaWYgKGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbChjbG9zZXN0QWZ0ZXIsIGFmdGVyQ3JpdGljYWwpKSB7XG4gICAgICByZXR1cm4gZ29CZWZvcmUoe1xuICAgICAgICBheGlzOiBheGlzLFxuICAgICAgICBtb3ZlUmVsYXRpdmVUbzogY2xvc2VzdC5wYWdlLFxuICAgICAgICBpc01vdmluZzogZHJhZ2dhYmxlUGFnZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIHdpdGhEaXNwbGFjZW1lbnQgPSBvZmZzZXQoY2xvc2VzdC5wYWdlLCBkaXNwbGFjZWRCeS5wb2ludCk7XG4gICAgcmV0dXJuIGdvQmVmb3JlKHtcbiAgICAgIGF4aXM6IGF4aXMsXG4gICAgICBtb3ZlUmVsYXRpdmVUbzogd2l0aERpc3BsYWNlbWVudCxcbiAgICAgIGlzTW92aW5nOiBkcmFnZ2FibGVQYWdlXG4gICAgfSk7XG4gIH1cblxuICB2YXIgbGFzdCA9IGluc2lkZURlc3RpbmF0aW9uW2luc2lkZURlc3RpbmF0aW9uLmxlbmd0aCAtIDFdO1xuXG4gIGlmIChsYXN0LmRlc2NyaXB0b3IuaWQgPT09IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkKSB7XG4gICAgcmV0dXJuIGRyYWdnYWJsZVBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcbiAgfVxuXG4gIGlmIChkaWRTdGFydEFmdGVyQ3JpdGljYWwobGFzdC5kZXNjcmlwdG9yLmlkLCBhZnRlckNyaXRpY2FsKSkge1xuICAgIHZhciBwYWdlID0gb2Zmc2V0KGxhc3QucGFnZSwgbmVnYXRlKGFmdGVyQ3JpdGljYWwuZGlzcGxhY2VkQnkucG9pbnQpKTtcbiAgICByZXR1cm4gZ29BZnRlcih7XG4gICAgICBheGlzOiBheGlzLFxuICAgICAgbW92ZVJlbGF0aXZlVG86IHBhZ2UsXG4gICAgICBpc01vdmluZzogZHJhZ2dhYmxlUGFnZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGdvQWZ0ZXIoe1xuICAgIGF4aXM6IGF4aXMsXG4gICAgbW92ZVJlbGF0aXZlVG86IGxhc3QucGFnZSxcbiAgICBpc01vdmluZzogZHJhZ2dhYmxlUGFnZVxuICB9KTtcbn0pO1xuXG52YXIgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCA9IChmdW5jdGlvbiAoZHJvcHBhYmxlLCBwb2ludCkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIHJldHVybiBhZGQocG9pbnQsIGZyYW1lLnNjcm9sbC5kaWZmLmRpc3BsYWNlbWVudCk7XG59KTtcblxudmFyIGdldFJlc3VsdFdpdGhvdXREcm9wcGFibGVEaXNwbGFjZW1lbnQgPSBmdW5jdGlvbiBnZXRSZXN1bHRXaXRob3V0RHJvcHBhYmxlRGlzcGxhY2VtZW50KF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkcm9wcGFibGUgPSBfcmVmLmRyb3BwYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuICB2YXIgb3JpZ2luYWwgPSBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyO1xuICB2YXIgYXQgPSBpbXBhY3QuYXQ7XG5cbiAgaWYgKCFkcm9wcGFibGUpIHtcbiAgICByZXR1cm4gb3JpZ2luYWw7XG4gIH1cblxuICBpZiAoIWF0KSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsO1xuICB9XG5cbiAgaWYgKGF0LnR5cGUgPT09ICdSRU9SREVSJykge1xuICAgIHJldHVybiB3aGVuUmVvcmRlcmluZyh7XG4gICAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlLFxuICAgICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHdoZW5Db21iaW5pbmcoe1xuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcbn07XG5cbnZhciBnZXRQYWdlQm9yZGVyQm94Q2VudGVyRnJvbUltcGFjdCA9IChmdW5jdGlvbiAoYXJncykge1xuICB2YXIgd2l0aG91dERpc3BsYWNlbWVudCA9IGdldFJlc3VsdFdpdGhvdXREcm9wcGFibGVEaXNwbGFjZW1lbnQoYXJncyk7XG4gIHZhciBkcm9wcGFibGUgPSBhcmdzLmRyb3BwYWJsZTtcbiAgdmFyIHdpdGhEaXNwbGFjZW1lbnQgPSBkcm9wcGFibGUgPyB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50KGRyb3BwYWJsZSwgd2l0aG91dERpc3BsYWNlbWVudCkgOiB3aXRob3V0RGlzcGxhY2VtZW50O1xuICByZXR1cm4gd2l0aERpc3BsYWNlbWVudDtcbn0pO1xuXG52YXIgc2Nyb2xsVmlld3BvcnQgPSAoZnVuY3Rpb24gKHZpZXdwb3J0LCBuZXdTY3JvbGwpIHtcbiAgdmFyIGRpZmYgPSBzdWJ0cmFjdChuZXdTY3JvbGwsIHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsKTtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IG5lZ2F0ZShkaWZmKTtcbiAgdmFyIGZyYW1lID0gZ2V0UmVjdCh7XG4gICAgdG9wOiBuZXdTY3JvbGwueSxcbiAgICBib3R0b206IG5ld1Njcm9sbC55ICsgdmlld3BvcnQuZnJhbWUuaGVpZ2h0LFxuICAgIGxlZnQ6IG5ld1Njcm9sbC54LFxuICAgIHJpZ2h0OiBuZXdTY3JvbGwueCArIHZpZXdwb3J0LmZyYW1lLndpZHRoXG4gIH0pO1xuICB2YXIgdXBkYXRlZCA9IHtcbiAgICBmcmFtZTogZnJhbWUsXG4gICAgc2Nyb2xsOiB7XG4gICAgICBpbml0aWFsOiB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbCxcbiAgICAgIG1heDogdmlld3BvcnQuc2Nyb2xsLm1heCxcbiAgICAgIGN1cnJlbnQ6IG5ld1Njcm9sbCxcbiAgICAgIGRpZmY6IHtcbiAgICAgICAgdmFsdWU6IGRpZmYsXG4gICAgICAgIGRpc3BsYWNlbWVudDogZGlzcGxhY2VtZW50XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlZDtcbn0pO1xuXG5mdW5jdGlvbiBnZXREcmFnZ2FibGVzKGlkcywgZHJhZ2dhYmxlcykge1xuICByZXR1cm4gaWRzLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gZHJhZ2dhYmxlc1tpZF07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cnlHZXRWaXNpYmxlKGlkLCBncm91cHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGlzcGxhY2VtZW50ID0gZ3JvdXBzW2ldLnZpc2libGVbaWRdO1xuXG4gICAgaWYgKGRpc3BsYWNlbWVudCkge1xuICAgICAgcmV0dXJuIGRpc3BsYWNlbWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIHNwZWN1bGF0aXZlbHlJbmNyZWFzZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgbWF4U2Nyb2xsQ2hhbmdlID0gX3JlZi5tYXhTY3JvbGxDaGFuZ2U7XG4gIHZhciBzY3JvbGxlZFZpZXdwb3J0ID0gc2Nyb2xsVmlld3BvcnQodmlld3BvcnQsIGFkZCh2aWV3cG9ydC5zY3JvbGwuY3VycmVudCwgbWF4U2Nyb2xsQ2hhbmdlKSk7XG4gIHZhciBzY3JvbGxlZERyb3BwYWJsZSA9IGRlc3RpbmF0aW9uLmZyYW1lID8gc2Nyb2xsRHJvcHBhYmxlKGRlc3RpbmF0aW9uLCBhZGQoZGVzdGluYXRpb24uZnJhbWUuc2Nyb2xsLmN1cnJlbnQsIG1heFNjcm9sbENoYW5nZSkpIDogZGVzdGluYXRpb247XG4gIHZhciBsYXN0ID0gaW1wYWN0LmRpc3BsYWNlZDtcbiAgdmFyIHdpdGhWaWV3cG9ydFNjcm9sbCA9IGdldERpc3BsYWNlbWVudEdyb3Vwcyh7XG4gICAgYWZ0ZXJEcmFnZ2luZzogZ2V0RHJhZ2dhYmxlcyhsYXN0LmFsbCwgZHJhZ2dhYmxlcyksXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGRpc3BsYWNlZEJ5OiBpbXBhY3QuZGlzcGxhY2VkQnksXG4gICAgdmlld3BvcnQ6IHNjcm9sbGVkVmlld3BvcnQuZnJhbWUsXG4gICAgbGFzdDogbGFzdCxcbiAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZhbHNlXG4gIH0pO1xuICB2YXIgd2l0aERyb3BwYWJsZVNjcm9sbCA9IGdldERpc3BsYWNlbWVudEdyb3Vwcyh7XG4gICAgYWZ0ZXJEcmFnZ2luZzogZ2V0RHJhZ2dhYmxlcyhsYXN0LmFsbCwgZHJhZ2dhYmxlcyksXG4gICAgZGVzdGluYXRpb246IHNjcm9sbGVkRHJvcHBhYmxlLFxuICAgIGRpc3BsYWNlZEJ5OiBpbXBhY3QuZGlzcGxhY2VkQnksXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lLFxuICAgIGxhc3Q6IGxhc3QsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBmYWxzZVxuICB9KTtcbiAgdmFyIGludmlzaWJsZSA9IHt9O1xuICB2YXIgdmlzaWJsZSA9IHt9O1xuICB2YXIgZ3JvdXBzID0gW2xhc3QsIHdpdGhWaWV3cG9ydFNjcm9sbCwgd2l0aERyb3BwYWJsZVNjcm9sbF07XG4gIGxhc3QuYWxsLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGRpc3BsYWNlbWVudCA9IHRyeUdldFZpc2libGUoaWQsIGdyb3Vwcyk7XG5cbiAgICBpZiAoZGlzcGxhY2VtZW50KSB7XG4gICAgICB2aXNpYmxlW2lkXSA9IGRpc3BsYWNlbWVudDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZpc2libGVbaWRdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgdmFyIG5ld0ltcGFjdCA9IF9leHRlbmRzKHt9LCBpbXBhY3QsIHtcbiAgICBkaXNwbGFjZWQ6IHtcbiAgICAgIGFsbDogbGFzdC5hbGwsXG4gICAgICBpbnZpc2libGU6IGludmlzaWJsZSxcbiAgICAgIHZpc2libGU6IHZpc2libGVcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBuZXdJbXBhY3Q7XG59KTtcblxudmFyIHdpdGhWaWV3cG9ydERpc3BsYWNlbWVudCA9IChmdW5jdGlvbiAodmlld3BvcnQsIHBvaW50KSB7XG4gIHJldHVybiBhZGQodmlld3BvcnQuc2Nyb2xsLmRpZmYuZGlzcGxhY2VtZW50LCBwb2ludCk7XG59KTtcblxudmFyIGdldENsaWVudEZyb21QYWdlQm9yZGVyQm94Q2VudGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG4gIHZhciB3aXRob3V0UGFnZVNjcm9sbENoYW5nZSA9IHdpdGhWaWV3cG9ydERpc3BsYWNlbWVudCh2aWV3cG9ydCwgcGFnZUJvcmRlckJveENlbnRlcik7XG4gIHZhciBvZmZzZXQgPSBzdWJ0cmFjdCh3aXRob3V0UGFnZVNjcm9sbENoYW5nZSwgZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LmNlbnRlcik7XG4gIHJldHVybiBhZGQoZHJhZ2dhYmxlLmNsaWVudC5ib3JkZXJCb3guY2VudGVyLCBvZmZzZXQpO1xufSk7XG5cbnZhciBpc1RvdGFsbHlWaXNpYmxlSW5OZXdMb2NhdGlvbiA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBuZXdQYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5uZXdQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCA9IF9yZWYud2l0aERyb3BwYWJsZURpc3BsYWNlbWVudCxcbiAgICAgIF9yZWYkb25seU9uTWFpbkF4aXMgPSBfcmVmLm9ubHlPbk1haW5BeGlzLFxuICAgICAgb25seU9uTWFpbkF4aXMgPSBfcmVmJG9ubHlPbk1haW5BeGlzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkb25seU9uTWFpbkF4aXM7XG4gIHZhciBjaGFuZ2VOZWVkZWQgPSBzdWJ0cmFjdChuZXdQYWdlQm9yZGVyQm94Q2VudGVyLCBkcmFnZ2FibGUucGFnZS5ib3JkZXJCb3guY2VudGVyKTtcbiAgdmFyIHNoaWZ0ZWQgPSBvZmZzZXRCeVBvc2l0aW9uKGRyYWdnYWJsZS5wYWdlLmJvcmRlckJveCwgY2hhbmdlTmVlZGVkKTtcbiAgdmFyIGFyZ3MgPSB7XG4gICAgdGFyZ2V0OiBzaGlmdGVkLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9O1xuICByZXR1cm4gb25seU9uTWFpbkF4aXMgPyBpc1RvdGFsbHlWaXNpYmxlT25BeGlzKGFyZ3MpIDogaXNUb3RhbGx5VmlzaWJsZShhcmdzKTtcbn0pO1xuXG52YXIgbW92ZVRvTmV4dFBsYWNlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSBfcmVmLmlzTW92aW5nRm9yd2FyZCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlciA9IF9yZWYucHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgcHJldmlvdXNDbGllbnRTZWxlY3Rpb24gPSBfcmVmLnByZXZpb3VzQ2xpZW50U2VsZWN0aW9uLFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcblxuICBpZiAoIWRlc3RpbmF0aW9uLmlzRW5hYmxlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGluc2lkZURlc3RpbmF0aW9uID0gZ2V0RHJhZ2dhYmxlc0luc2lkZURyb3BwYWJsZShkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIGlzSW5Ib21lTGlzdCA9IGlzSG9tZU9mKGRyYWdnYWJsZSwgZGVzdGluYXRpb24pO1xuICB2YXIgaW1wYWN0ID0gbW92ZVRvTmV4dENvbWJpbmUoe1xuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0XG4gIH0pIHx8IG1vdmVUb05leHRJbmRleCh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgaXNJbkhvbWVMaXN0OiBpc0luSG9tZUxpc3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIHByZXZpb3VzSW1wYWN0OiBwcmV2aW91c0ltcGFjdCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcblxuICBpZiAoIWltcGFjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBnZXRQYWdlQm9yZGVyQm94Q2VudGVyRnJvbUltcGFjdCh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIHZhciBpc1Zpc2libGVJbk5ld0xvY2F0aW9uID0gaXNUb3RhbGx5VmlzaWJsZUluTmV3TG9jYXRpb24oe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBuZXdQYWdlQm9yZGVyQm94Q2VudGVyOiBwYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiBmYWxzZSxcbiAgICBvbmx5T25NYWluQXhpczogdHJ1ZVxuICB9KTtcblxuICBpZiAoaXNWaXNpYmxlSW5OZXdMb2NhdGlvbikge1xuICAgIHZhciBjbGllbnRTZWxlY3Rpb24gPSBnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlcih7XG4gICAgICBwYWdlQm9yZGVyQm94Q2VudGVyOiBwYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50U2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHZhciBkaXN0YW5jZSA9IHN1YnRyYWN0KHBhZ2VCb3JkZXJCb3hDZW50ZXIsIHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcik7XG4gIHZhciBjYXV0aW91cyA9IHNwZWN1bGF0aXZlbHlJbmNyZWFzZSh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIG1heFNjcm9sbENoYW5nZTogZGlzdGFuY2VcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgY2xpZW50U2VsZWN0aW9uOiBwcmV2aW91c0NsaWVudFNlbGVjdGlvbixcbiAgICBpbXBhY3Q6IGNhdXRpb3VzLFxuICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBkaXN0YW5jZVxuICB9O1xufSk7XG5cbnZhciBnZXRLbm93bkFjdGl2ZSA9IGZ1bmN0aW9uIGdldEtub3duQWN0aXZlKGRyb3BwYWJsZSkge1xuICB2YXIgcmVjdCA9IGRyb3BwYWJsZS5zdWJqZWN0LmFjdGl2ZTtcbiAgIXJlY3QgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZ2V0IGNsaXBwZWQgYXJlYSBmcm9tIGRyb3BwYWJsZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlY3Q7XG59O1xuXG52YXIgZ2V0QmVzdENyb3NzQXhpc0Ryb3BwYWJsZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBwYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgc291cmNlID0gX3JlZi5zb3VyY2UsXG4gICAgICBkcm9wcGFibGVzID0gX3JlZi5kcm9wcGFibGVzLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0O1xuICB2YXIgYWN0aXZlID0gc291cmNlLnN1YmplY3QuYWN0aXZlO1xuXG4gIGlmICghYWN0aXZlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYXhpcyA9IHNvdXJjZS5heGlzO1xuICB2YXIgaXNCZXR3ZWVuU291cmNlQ2xpcHBlZCA9IGlzV2l0aGluKGFjdGl2ZVtheGlzLnN0YXJ0XSwgYWN0aXZlW2F4aXMuZW5kXSk7XG4gIHZhciBjYW5kaWRhdGVzID0gdG9Ecm9wcGFibGVMaXN0KGRyb3BwYWJsZXMpLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgcmV0dXJuIGRyb3BwYWJsZSAhPT0gc291cmNlO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHJldHVybiBkcm9wcGFibGUuaXNFbmFibGVkO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIHJldHVybiBCb29sZWFuKGRyb3BwYWJsZS5zdWJqZWN0LmFjdGl2ZSk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgcmV0dXJuIGlzUGFydGlhbGx5VmlzaWJsZVRocm91Z2hGcmFtZSh2aWV3cG9ydC5mcmFtZSkoZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKSk7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgdmFyIGFjdGl2ZU9mVGFyZ2V0ID0gZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKTtcblxuICAgIGlmIChpc01vdmluZ0ZvcndhcmQpIHtcbiAgICAgIHJldHVybiBhY3RpdmVbYXhpcy5jcm9zc0F4aXNFbmRdIDwgYWN0aXZlT2ZUYXJnZXRbYXhpcy5jcm9zc0F4aXNFbmRdO1xuICAgIH1cblxuICAgIHJldHVybiBhY3RpdmVPZlRhcmdldFtheGlzLmNyb3NzQXhpc1N0YXJ0XSA8IGFjdGl2ZVtheGlzLmNyb3NzQXhpc1N0YXJ0XTtcbiAgfSkuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICB2YXIgYWN0aXZlT2ZUYXJnZXQgPSBnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpO1xuICAgIHZhciBpc0JldHdlZW5EZXN0aW5hdGlvbkNsaXBwZWQgPSBpc1dpdGhpbihhY3RpdmVPZlRhcmdldFtheGlzLnN0YXJ0XSwgYWN0aXZlT2ZUYXJnZXRbYXhpcy5lbmRdKTtcbiAgICByZXR1cm4gaXNCZXR3ZWVuU291cmNlQ2xpcHBlZChhY3RpdmVPZlRhcmdldFtheGlzLnN0YXJ0XSkgfHwgaXNCZXR3ZWVuU291cmNlQ2xpcHBlZChhY3RpdmVPZlRhcmdldFtheGlzLmVuZF0pIHx8IGlzQmV0d2VlbkRlc3RpbmF0aW9uQ2xpcHBlZChhY3RpdmVbYXhpcy5zdGFydF0pIHx8IGlzQmV0d2VlbkRlc3RpbmF0aW9uQ2xpcHBlZChhY3RpdmVbYXhpcy5lbmRdKTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBmaXJzdCA9IGdldEtub3duQWN0aXZlKGEpW2F4aXMuY3Jvc3NBeGlzU3RhcnRdO1xuICAgIHZhciBzZWNvbmQgPSBnZXRLbm93bkFjdGl2ZShiKVtheGlzLmNyb3NzQXhpc1N0YXJ0XTtcblxuICAgIGlmIChpc01vdmluZ0ZvcndhcmQpIHtcbiAgICAgIHJldHVybiBmaXJzdCAtIHNlY29uZDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2Vjb25kIC0gZmlyc3Q7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoZHJvcHBhYmxlLCBpbmRleCwgYXJyYXkpIHtcbiAgICByZXR1cm4gZ2V0S25vd25BY3RpdmUoZHJvcHBhYmxlKVtheGlzLmNyb3NzQXhpc1N0YXJ0XSA9PT0gZ2V0S25vd25BY3RpdmUoYXJyYXlbMF0pW2F4aXMuY3Jvc3NBeGlzU3RhcnRdO1xuICB9KTtcblxuICBpZiAoIWNhbmRpZGF0ZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoY2FuZGlkYXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gY2FuZGlkYXRlc1swXTtcbiAgfVxuXG4gIHZhciBjb250YWlucyA9IGNhbmRpZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uIChkcm9wcGFibGUpIHtcbiAgICB2YXIgaXNXaXRoaW5Ecm9wcGFibGUgPSBpc1dpdGhpbihnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpW2F4aXMuc3RhcnRdLCBnZXRLbm93bkFjdGl2ZShkcm9wcGFibGUpW2F4aXMuZW5kXSk7XG4gICAgcmV0dXJuIGlzV2l0aGluRHJvcHBhYmxlKHBhZ2VCb3JkZXJCb3hDZW50ZXJbYXhpcy5saW5lXSk7XG4gIH0pO1xuXG4gIGlmIChjb250YWlucy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gY29udGFpbnNbMF07XG4gIH1cblxuICBpZiAoY29udGFpbnMubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBjb250YWlucy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZ2V0S25vd25BY3RpdmUoYSlbYXhpcy5zdGFydF0gLSBnZXRLbm93bkFjdGl2ZShiKVtheGlzLnN0YXJ0XTtcbiAgICB9KVswXTtcbiAgfVxuXG4gIHJldHVybiBjYW5kaWRhdGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZmlyc3QgPSBjbG9zZXN0KHBhZ2VCb3JkZXJCb3hDZW50ZXIsIGdldENvcm5lcnMoZ2V0S25vd25BY3RpdmUoYSkpKTtcbiAgICB2YXIgc2Vjb25kID0gY2xvc2VzdChwYWdlQm9yZGVyQm94Q2VudGVyLCBnZXRDb3JuZXJzKGdldEtub3duQWN0aXZlKGIpKSk7XG5cbiAgICBpZiAoZmlyc3QgIT09IHNlY29uZCkge1xuICAgICAgcmV0dXJuIGZpcnN0IC0gc2Vjb25kO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRLbm93bkFjdGl2ZShhKVtheGlzLnN0YXJ0XSAtIGdldEtub3duQWN0aXZlKGIpW2F4aXMuc3RhcnRdO1xuICB9KVswXTtcbn0pO1xuXG52YXIgZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBmdW5jdGlvbiBnZXRDdXJyZW50UGFnZUJvcmRlckJveENlbnRlcihkcmFnZ2FibGUsIGFmdGVyQ3JpdGljYWwpIHtcbiAgdmFyIG9yaWdpbmFsID0gZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcbiAgcmV0dXJuIGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbChkcmFnZ2FibGUuZGVzY3JpcHRvci5pZCwgYWZ0ZXJDcml0aWNhbCkgPyBzdWJ0cmFjdChvcmlnaW5hbCwgYWZ0ZXJDcml0aWNhbC5kaXNwbGFjZWRCeS5wb2ludCkgOiBvcmlnaW5hbDtcbn07XG52YXIgZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3ggPSBmdW5jdGlvbiBnZXRDdXJyZW50UGFnZUJvcmRlckJveChkcmFnZ2FibGUsIGFmdGVyQ3JpdGljYWwpIHtcbiAgdmFyIG9yaWdpbmFsID0gZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94O1xuICByZXR1cm4gZGlkU3RhcnRBZnRlckNyaXRpY2FsKGRyYWdnYWJsZS5kZXNjcmlwdG9yLmlkLCBhZnRlckNyaXRpY2FsKSA/IG9mZnNldEJ5UG9zaXRpb24ob3JpZ2luYWwsIG5lZ2F0ZShhZnRlckNyaXRpY2FsLmRpc3BsYWNlZEJ5LnBvaW50KSkgOiBvcmlnaW5hbDtcbn07XG5cbnZhciBnZXRDbG9zZXN0RHJhZ2dhYmxlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wYWdlQm9yZGVyQm94Q2VudGVyLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIHNvcnRlZCA9IGluc2lkZURlc3RpbmF0aW9uLmZpbHRlcihmdW5jdGlvbiAoZHJhZ2dhYmxlKSB7XG4gICAgcmV0dXJuIGlzVG90YWxseVZpc2libGUoe1xuICAgICAgdGFyZ2V0OiBnZXRDdXJyZW50UGFnZUJvcmRlckJveChkcmFnZ2FibGUsIGFmdGVyQ3JpdGljYWwpLFxuICAgICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LmZyYW1lLFxuICAgICAgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudDogdHJ1ZVxuICAgIH0pO1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIGRpc3RhbmNlVG9BID0gZGlzdGFuY2UocGFnZUJvcmRlckJveENlbnRlciwgd2l0aERyb3BwYWJsZURpc3BsYWNlbWVudChkZXN0aW5hdGlvbiwgZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3hDZW50ZXIoYSwgYWZ0ZXJDcml0aWNhbCkpKTtcbiAgICB2YXIgZGlzdGFuY2VUb0IgPSBkaXN0YW5jZShwYWdlQm9yZGVyQm94Q2VudGVyLCB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50KGRlc3RpbmF0aW9uLCBnZXRDdXJyZW50UGFnZUJvcmRlckJveENlbnRlcihiLCBhZnRlckNyaXRpY2FsKSkpO1xuXG4gICAgaWYgKGRpc3RhbmNlVG9BIDwgZGlzdGFuY2VUb0IpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoZGlzdGFuY2VUb0IgPCBkaXN0YW5jZVRvQSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEuZGVzY3JpcHRvci5pbmRleCAtIGIuZGVzY3JpcHRvci5pbmRleDtcbiAgfSk7XG4gIHJldHVybiBzb3J0ZWRbMF0gfHwgbnVsbDtcbn0pO1xuXG52YXIgZ2V0RGlzcGxhY2VkQnkgPSBtZW1vaXplT25lKGZ1bmN0aW9uIGdldERpc3BsYWNlZEJ5KGF4aXMsIGRpc3BsYWNlQnkpIHtcbiAgdmFyIGRpc3BsYWNlbWVudCA9IGRpc3BsYWNlQnlbYXhpcy5saW5lXTtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogZGlzcGxhY2VtZW50LFxuICAgIHBvaW50OiBwYXRjaChheGlzLmxpbmUsIGRpc3BsYWNlbWVudClcbiAgfTtcbn0pO1xuXG52YXIgZ2V0UmVxdWlyZWRHcm93dGhGb3JQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIGdldFJlcXVpcmVkR3Jvd3RoRm9yUGxhY2Vob2xkZXIoZHJvcHBhYmxlLCBwbGFjZWhvbGRlclNpemUsIGRyYWdnYWJsZXMpIHtcbiAgdmFyIGF4aXMgPSBkcm9wcGFibGUuYXhpcztcblxuICBpZiAoZHJvcHBhYmxlLmRlc2NyaXB0b3IubW9kZSA9PT0gJ3ZpcnR1YWwnKSB7XG4gICAgcmV0dXJuIHBhdGNoKGF4aXMubGluZSwgcGxhY2Vob2xkZXJTaXplW2F4aXMubGluZV0pO1xuICB9XG5cbiAgdmFyIGF2YWlsYWJsZVNwYWNlID0gZHJvcHBhYmxlLnN1YmplY3QucGFnZS5jb250ZW50Qm94W2F4aXMuc2l6ZV07XG4gIHZhciBpbnNpZGVEcm9wcGFibGUgPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIHNwYWNlVXNlZCA9IGluc2lkZURyb3BwYWJsZS5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgZGltZW5zaW9uKSB7XG4gICAgcmV0dXJuIHN1bSArIGRpbWVuc2lvbi5jbGllbnQubWFyZ2luQm94W2F4aXMuc2l6ZV07XG4gIH0sIDApO1xuICB2YXIgcmVxdWlyZWRTcGFjZSA9IHNwYWNlVXNlZCArIHBsYWNlaG9sZGVyU2l6ZVtheGlzLmxpbmVdO1xuICB2YXIgbmVlZHNUb0dyb3dCeSA9IHJlcXVpcmVkU3BhY2UgLSBhdmFpbGFibGVTcGFjZTtcblxuICBpZiAobmVlZHNUb0dyb3dCeSA8PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcGF0Y2goYXhpcy5saW5lLCBuZWVkc1RvR3Jvd0J5KTtcbn07XG5cbnZhciB3aXRoTWF4U2Nyb2xsID0gZnVuY3Rpb24gd2l0aE1heFNjcm9sbChmcmFtZSwgbWF4KSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZnJhbWUsIHtcbiAgICBzY3JvbGw6IF9leHRlbmRzKHt9LCBmcmFtZS5zY3JvbGwsIHtcbiAgICAgIG1heDogbWF4XG4gICAgfSlcbiAgfSk7XG59O1xuXG52YXIgYWRkUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiBhZGRQbGFjZWhvbGRlcihkcm9wcGFibGUsIGRyYWdnYWJsZSwgZHJhZ2dhYmxlcykge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG4gICEhaXNIb21lT2YoZHJhZ2dhYmxlLCBkcm9wcGFibGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIG5vdCBhZGQgcGxhY2Vob2xkZXIgc3BhY2UgdG8gaG9tZSBsaXN0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhIWRyb3BwYWJsZS5zdWJqZWN0LndpdGhQbGFjZWhvbGRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBhZGQgcGxhY2Vob2xkZXIgc2l6ZSB0byBhIHN1YmplY3Qgd2hlbiBpdCBhbHJlYWR5IGhhcyBvbmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBwbGFjZWhvbGRlclNpemUgPSBnZXREaXNwbGFjZWRCeShkcm9wcGFibGUuYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnkpLnBvaW50O1xuICB2YXIgcmVxdWlyZWRHcm93dGggPSBnZXRSZXF1aXJlZEdyb3d0aEZvclBsYWNlaG9sZGVyKGRyb3BwYWJsZSwgcGxhY2Vob2xkZXJTaXplLCBkcmFnZ2FibGVzKTtcbiAgdmFyIGFkZGVkID0ge1xuICAgIHBsYWNlaG9sZGVyU2l6ZTogcGxhY2Vob2xkZXJTaXplLFxuICAgIGluY3JlYXNlZEJ5OiByZXF1aXJlZEdyb3d0aCxcbiAgICBvbGRGcmFtZU1heFNjcm9sbDogZHJvcHBhYmxlLmZyYW1lID8gZHJvcHBhYmxlLmZyYW1lLnNjcm9sbC5tYXggOiBudWxsXG4gIH07XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHZhciBfc3ViamVjdCA9IGdldFN1YmplY3Qoe1xuICAgICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICAgIHdpdGhQbGFjZWhvbGRlcjogYWRkZWQsXG4gICAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICAgIGZyYW1lOiBkcm9wcGFibGUuZnJhbWVcbiAgICB9KTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZHJvcHBhYmxlLCB7XG4gICAgICBzdWJqZWN0OiBfc3ViamVjdFxuICAgIH0pO1xuICB9XG5cbiAgdmFyIG1heFNjcm9sbCA9IHJlcXVpcmVkR3Jvd3RoID8gYWRkKGZyYW1lLnNjcm9sbC5tYXgsIHJlcXVpcmVkR3Jvd3RoKSA6IGZyYW1lLnNjcm9sbC5tYXg7XG4gIHZhciBuZXdGcmFtZSA9IHdpdGhNYXhTY3JvbGwoZnJhbWUsIG1heFNjcm9sbCk7XG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICB3aXRoUGxhY2Vob2xkZXI6IGFkZGVkLFxuICAgIGF4aXM6IGRyb3BwYWJsZS5heGlzLFxuICAgIGZyYW1lOiBuZXdGcmFtZVxuICB9KTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBkcm9wcGFibGUsIHtcbiAgICBzdWJqZWN0OiBzdWJqZWN0LFxuICAgIGZyYW1lOiBuZXdGcmFtZVxuICB9KTtcbn07XG52YXIgcmVtb3ZlUGxhY2Vob2xkZXIgPSBmdW5jdGlvbiByZW1vdmVQbGFjZWhvbGRlcihkcm9wcGFibGUpIHtcbiAgdmFyIGFkZGVkID0gZHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyO1xuICAhYWRkZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcmVtb3ZlIHBsYWNlaG9sZGVyIGZvcm0gc3ViamVjdCB3aGVuIHRoZXJlIHdhcyBub25lJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHZhciBfc3ViamVjdDIgPSBnZXRTdWJqZWN0KHtcbiAgICAgIHBhZ2U6IGRyb3BwYWJsZS5zdWJqZWN0LnBhZ2UsXG4gICAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICAgIGZyYW1lOiBudWxsLFxuICAgICAgd2l0aFBsYWNlaG9sZGVyOiBudWxsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgICAgc3ViamVjdDogX3N1YmplY3QyXG4gICAgfSk7XG4gIH1cblxuICB2YXIgb2xkTWF4U2Nyb2xsID0gYWRkZWQub2xkRnJhbWVNYXhTY3JvbGw7XG4gICFvbGRNYXhTY3JvbGwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBkcm9wcGFibGUgd2l0aCBmcmFtZSB0byBoYXZlIG9sZCBtYXggZnJhbWUgc2Nyb2xsIHdoZW4gcmVtb3ZpbmcgcGxhY2Vob2xkZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBuZXdGcmFtZSA9IHdpdGhNYXhTY3JvbGwoZnJhbWUsIG9sZE1heFNjcm9sbCk7XG4gIHZhciBzdWJqZWN0ID0gZ2V0U3ViamVjdCh7XG4gICAgcGFnZTogZHJvcHBhYmxlLnN1YmplY3QucGFnZSxcbiAgICBheGlzOiBkcm9wcGFibGUuYXhpcyxcbiAgICBmcmFtZTogbmV3RnJhbWUsXG4gICAgd2l0aFBsYWNlaG9sZGVyOiBudWxsXG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZSwge1xuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgZnJhbWU6IG5ld0ZyYW1lXG4gIH0pO1xufTtcblxudmFyIG1vdmVUb05ld0Ryb3BwYWJsZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyID0gX3JlZi5wcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICBtb3ZlUmVsYXRpdmVUbyA9IF9yZWYubW92ZVJlbGF0aXZlVG8sXG4gICAgICBpbnNpZGVEZXN0aW5hdGlvbiA9IF9yZWYuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuXG4gIGlmICghbW92ZVJlbGF0aXZlVG8pIHtcbiAgICBpZiAoaW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvcG9zZWQgPSB7XG4gICAgICBkaXNwbGFjZWQ6IGVtcHR5R3JvdXBzLFxuICAgICAgZGlzcGxhY2VkQnk6IG5vRGlzcGxhY2VkQnksXG4gICAgICBhdDoge1xuICAgICAgICB0eXBlOiAnUkVPUkRFUicsXG4gICAgICAgIGRlc3RpbmF0aW9uOiB7XG4gICAgICAgICAgZHJvcHBhYmxlSWQ6IGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsXG4gICAgICAgICAgaW5kZXg6IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHByb3Bvc2VkUGFnZUJvcmRlckJveENlbnRlciA9IGdldFBhZ2VCb3JkZXJCb3hDZW50ZXJGcm9tSW1wYWN0KHtcbiAgICAgIGltcGFjdDogcHJvcG9zZWQsXG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIGRyb3BwYWJsZTogZGVzdGluYXRpb24sXG4gICAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICAgIH0pO1xuICAgIHZhciB3aXRoUGxhY2Vob2xkZXIgPSBpc0hvbWVPZihkcmFnZ2FibGUsIGRlc3RpbmF0aW9uKSA/IGRlc3RpbmF0aW9uIDogYWRkUGxhY2Vob2xkZXIoZGVzdGluYXRpb24sIGRyYWdnYWJsZSwgZHJhZ2dhYmxlcyk7XG4gICAgdmFyIGlzVmlzaWJsZUluTmV3TG9jYXRpb24gPSBpc1RvdGFsbHlWaXNpYmxlSW5OZXdMb2NhdGlvbih7XG4gICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgIGRlc3RpbmF0aW9uOiB3aXRoUGxhY2Vob2xkZXIsXG4gICAgICBuZXdQYWdlQm9yZGVyQm94Q2VudGVyOiBwcm9wb3NlZFBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgICB3aXRoRHJvcHBhYmxlRGlzcGxhY2VtZW50OiBmYWxzZSxcbiAgICAgIG9ubHlPbk1haW5BeGlzOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGlzVmlzaWJsZUluTmV3TG9jYXRpb24gPyBwcm9wb3NlZCA6IG51bGw7XG4gIH1cblxuICB2YXIgaXNHb2luZ0JlZm9yZVRhcmdldCA9IEJvb2xlYW4ocHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyW2Rlc3RpbmF0aW9uLmF4aXMubGluZV0gPD0gbW92ZVJlbGF0aXZlVG8ucGFnZS5ib3JkZXJCb3guY2VudGVyW2Rlc3RpbmF0aW9uLmF4aXMubGluZV0pO1xuXG4gIHZhciBwcm9wb3NlZEluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWxhdGl2ZVRvID0gbW92ZVJlbGF0aXZlVG8uZGVzY3JpcHRvci5pbmRleDtcblxuICAgIGlmIChtb3ZlUmVsYXRpdmVUby5kZXNjcmlwdG9yLmlkID09PSBkcmFnZ2FibGUuZGVzY3JpcHRvci5pZCkge1xuICAgICAgcmV0dXJuIHJlbGF0aXZlVG87XG4gICAgfVxuXG4gICAgaWYgKGlzR29pbmdCZWZvcmVUYXJnZXQpIHtcbiAgICAgIHJldHVybiByZWxhdGl2ZVRvO1xuICAgIH1cblxuICAgIHJldHVybiByZWxhdGl2ZVRvICsgMTtcbiAgfSgpO1xuXG4gIHZhciBkaXNwbGFjZWRCeSA9IGdldERpc3BsYWNlZEJ5KGRlc3RpbmF0aW9uLmF4aXMsIGRyYWdnYWJsZS5kaXNwbGFjZUJ5KTtcbiAgcmV0dXJuIGNhbGN1bGF0ZVJlb3JkZXJJbXBhY3Qoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBsYXN0OiBlbXB0eUdyb3VwcyxcbiAgICBpbmRleDogcHJvcG9zZWRJbmRleFxuICB9KTtcbn0pO1xuXG52YXIgbW92ZUNyb3NzQXhpcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaXNNb3ZpbmdGb3J3YXJkID0gX3JlZi5pc01vdmluZ0ZvcndhcmQsXG4gICAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIgPSBfcmVmLnByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgaXNPdmVyID0gX3JlZi5pc092ZXIsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcyxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG4gIHZhciBkZXN0aW5hdGlvbiA9IGdldEJlc3RDcm9zc0F4aXNEcm9wcGFibGUoe1xuICAgIGlzTW92aW5nRm9yd2FyZDogaXNNb3ZpbmdGb3J3YXJkLFxuICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBzb3VyY2U6IGlzT3ZlcixcbiAgICBkcm9wcGFibGVzOiBkcm9wcGFibGVzLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcblxuICBpZiAoIWRlc3RpbmF0aW9uKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgbW92ZVJlbGF0aXZlVG8gPSBnZXRDbG9zZXN0RHJhZ2dhYmxlKHtcbiAgICBwYWdlQm9yZGVyQm94Q2VudGVyOiBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcbiAgdmFyIGltcGFjdCA9IG1vdmVUb05ld0Ryb3BwYWJsZSh7XG4gICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyOiBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgbW92ZVJlbGF0aXZlVG86IG1vdmVSZWxhdGl2ZVRvLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcblxuICBpZiAoIWltcGFjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBnZXRQYWdlQm9yZGVyQm94Q2VudGVyRnJvbUltcGFjdCh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWxcbiAgfSk7XG4gIHZhciBjbGllbnRTZWxlY3Rpb24gPSBnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlcih7XG4gICAgcGFnZUJvcmRlckJveENlbnRlcjogcGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgY2xpZW50U2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IG51bGxcbiAgfTtcbn0pO1xuXG52YXIgd2hhdElzRHJhZ2dlZE92ZXIgPSAoZnVuY3Rpb24gKGltcGFjdCkge1xuICB2YXIgYXQgPSBpbXBhY3QuYXQ7XG5cbiAgaWYgKCFhdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGF0LnR5cGUgPT09ICdSRU9SREVSJykge1xuICAgIHJldHVybiBhdC5kZXN0aW5hdGlvbi5kcm9wcGFibGVJZDtcbiAgfVxuXG4gIHJldHVybiBhdC5jb21iaW5lLmRyb3BwYWJsZUlkO1xufSk7XG5cbnZhciBnZXREcm9wcGFibGVPdmVyID0gZnVuY3Rpb24gZ2V0RHJvcHBhYmxlT3ZlcihpbXBhY3QsIGRyb3BwYWJsZXMpIHtcbiAgdmFyIGlkID0gd2hhdElzRHJhZ2dlZE92ZXIoaW1wYWN0KTtcbiAgcmV0dXJuIGlkID8gZHJvcHBhYmxlc1tpZF0gOiBudWxsO1xufTtcblxudmFyIG1vdmVJbkRpcmVjdGlvbiA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgdHlwZSA9IF9yZWYudHlwZTtcbiAgdmFyIGlzQWN0dWFsbHlPdmVyID0gZ2V0RHJvcHBhYmxlT3ZlcihzdGF0ZS5pbXBhY3QsIHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlcyk7XG4gIHZhciBpc01haW5BeGlzTW92ZW1lbnRBbGxvd2VkID0gQm9vbGVhbihpc0FjdHVhbGx5T3Zlcik7XG4gIHZhciBob21lID0gc3RhdGUuZGltZW5zaW9ucy5kcm9wcGFibGVzW3N0YXRlLmNyaXRpY2FsLmRyb3BwYWJsZS5pZF07XG4gIHZhciBpc092ZXIgPSBpc0FjdHVhbGx5T3ZlciB8fCBob21lO1xuICB2YXIgZGlyZWN0aW9uID0gaXNPdmVyLmF4aXMuZGlyZWN0aW9uO1xuICB2YXIgaXNNb3ZpbmdPbk1haW5BeGlzID0gZGlyZWN0aW9uID09PSAndmVydGljYWwnICYmICh0eXBlID09PSAnTU9WRV9VUCcgfHwgdHlwZSA9PT0gJ01PVkVfRE9XTicpIHx8IGRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmICh0eXBlID09PSAnTU9WRV9MRUZUJyB8fCB0eXBlID09PSAnTU9WRV9SSUdIVCcpO1xuXG4gIGlmIChpc01vdmluZ09uTWFpbkF4aXMgJiYgIWlzTWFpbkF4aXNNb3ZlbWVudEFsbG93ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBpc01vdmluZ0ZvcndhcmQgPSB0eXBlID09PSAnTU9WRV9ET1dOJyB8fCB0eXBlID09PSAnTU9WRV9SSUdIVCc7XG4gIHZhciBkcmFnZ2FibGUgPSBzdGF0ZS5kaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgdmFyIHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlciA9IHN0YXRlLmN1cnJlbnQucGFnZS5ib3JkZXJCb3hDZW50ZXI7XG4gIHZhciBfc3RhdGUkZGltZW5zaW9ucyA9IHN0YXRlLmRpbWVuc2lvbnMsXG4gICAgICBkcmFnZ2FibGVzID0gX3N0YXRlJGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXMgPSBfc3RhdGUkZGltZW5zaW9ucy5kcm9wcGFibGVzO1xuICByZXR1cm4gaXNNb3ZpbmdPbk1haW5BeGlzID8gbW92ZVRvTmV4dFBsYWNlKHtcbiAgICBpc01vdmluZ0ZvcndhcmQ6IGlzTW92aW5nRm9yd2FyZCxcbiAgICBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXI6IHByZXZpb3VzUGFnZUJvcmRlckJveENlbnRlcixcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkZXN0aW5hdGlvbjogaXNPdmVyLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXMsXG4gICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0LFxuICAgIHByZXZpb3VzQ2xpZW50U2VsZWN0aW9uOiBzdGF0ZS5jdXJyZW50LmNsaWVudC5zZWxlY3Rpb24sXG4gICAgcHJldmlvdXNJbXBhY3Q6IHN0YXRlLmltcGFjdCxcbiAgICBhZnRlckNyaXRpY2FsOiBzdGF0ZS5hZnRlckNyaXRpY2FsXG4gIH0pIDogbW92ZUNyb3NzQXhpcyh7XG4gICAgaXNNb3ZpbmdGb3J3YXJkOiBpc01vdmluZ0ZvcndhcmQsXG4gICAgcHJldmlvdXNQYWdlQm9yZGVyQm94Q2VudGVyOiBwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgaXNPdmVyOiBpc092ZXIsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBkcm9wcGFibGVzOiBkcm9wcGFibGVzLFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBzdGF0ZS5hZnRlckNyaXRpY2FsXG4gIH0pO1xufSk7XG5cbmZ1bmN0aW9uIGlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5waGFzZSA9PT0gJ0RSQUdHSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnO1xufVxuXG5mdW5jdGlvbiBpc1Bvc2l0aW9uSW5GcmFtZShmcmFtZSkge1xuICB2YXIgaXNXaXRoaW5WZXJ0aWNhbCA9IGlzV2l0aGluKGZyYW1lLnRvcCwgZnJhbWUuYm90dG9tKTtcbiAgdmFyIGlzV2l0aGluSG9yaXpvbnRhbCA9IGlzV2l0aGluKGZyYW1lLmxlZnQsIGZyYW1lLnJpZ2h0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJ1bihwb2ludCkge1xuICAgIHJldHVybiBpc1dpdGhpblZlcnRpY2FsKHBvaW50LnkpICYmIGlzV2l0aGluSG9yaXpvbnRhbChwb2ludC54KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzT3ZlcmxhcChmaXJzdCwgc2Vjb25kKSB7XG4gIHJldHVybiBmaXJzdC5sZWZ0IDwgc2Vjb25kLnJpZ2h0ICYmIGZpcnN0LnJpZ2h0ID4gc2Vjb25kLmxlZnQgJiYgZmlyc3QudG9wIDwgc2Vjb25kLmJvdHRvbSAmJiBmaXJzdC5ib3R0b20gPiBzZWNvbmQudG9wO1xufVxuXG5mdW5jdGlvbiBnZXRGdXJ0aGVzdEF3YXkoX3JlZikge1xuICB2YXIgcGFnZUJvcmRlckJveCA9IF9yZWYucGFnZUJvcmRlckJveCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgY2FuZGlkYXRlcyA9IF9yZWYuY2FuZGlkYXRlcztcbiAgdmFyIHN0YXJ0Q2VudGVyID0gZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LmNlbnRlcjtcbiAgdmFyIHNvcnRlZCA9IGNhbmRpZGF0ZXMubWFwKGZ1bmN0aW9uIChjYW5kaWRhdGUpIHtcbiAgICB2YXIgYXhpcyA9IGNhbmRpZGF0ZS5heGlzO1xuICAgIHZhciB0YXJnZXQgPSBwYXRjaChjYW5kaWRhdGUuYXhpcy5saW5lLCBwYWdlQm9yZGVyQm94LmNlbnRlcltheGlzLmxpbmVdLCBjYW5kaWRhdGUucGFnZS5ib3JkZXJCb3guY2VudGVyW2F4aXMuY3Jvc3NBeGlzTGluZV0pO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogY2FuZGlkYXRlLmRlc2NyaXB0b3IuaWQsXG4gICAgICBkaXN0YW5jZTogZGlzdGFuY2Uoc3RhcnRDZW50ZXIsIHRhcmdldClcbiAgICB9O1xuICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGIuZGlzdGFuY2UgLSBhLmRpc3RhbmNlO1xuICB9KTtcbiAgcmV0dXJuIHNvcnRlZFswXSA/IHNvcnRlZFswXS5pZCA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldERyb3BwYWJsZU92ZXIkMShfcmVmMikge1xuICB2YXIgcGFnZUJvcmRlckJveCA9IF9yZWYyLnBhZ2VCb3JkZXJCb3gsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmMi5kcmFnZ2FibGUsXG4gICAgICBkcm9wcGFibGVzID0gX3JlZjIuZHJvcHBhYmxlcztcbiAgdmFyIGNhbmRpZGF0ZXMgPSB0b0Ryb3BwYWJsZUxpc3QoZHJvcHBhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKCFpdGVtLmlzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBhY3RpdmUgPSBpdGVtLnN1YmplY3QuYWN0aXZlO1xuXG4gICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoIWdldEhhc092ZXJsYXAocGFnZUJvcmRlckJveCwgYWN0aXZlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpc1Bvc2l0aW9uSW5GcmFtZShhY3RpdmUpKHBhZ2VCb3JkZXJCb3guY2VudGVyKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGF4aXMgPSBpdGVtLmF4aXM7XG4gICAgdmFyIGNoaWxkQ2VudGVyID0gYWN0aXZlLmNlbnRlcltheGlzLmNyb3NzQXhpc0xpbmVdO1xuICAgIHZhciBjcm9zc0F4aXNTdGFydCA9IHBhZ2VCb3JkZXJCb3hbYXhpcy5jcm9zc0F4aXNTdGFydF07XG4gICAgdmFyIGNyb3NzQXhpc0VuZCA9IHBhZ2VCb3JkZXJCb3hbYXhpcy5jcm9zc0F4aXNFbmRdO1xuICAgIHZhciBpc0NvbnRhaW5lZCA9IGlzV2l0aGluKGFjdGl2ZVtheGlzLmNyb3NzQXhpc1N0YXJ0XSwgYWN0aXZlW2F4aXMuY3Jvc3NBeGlzRW5kXSk7XG4gICAgdmFyIGlzU3RhcnRDb250YWluZWQgPSBpc0NvbnRhaW5lZChjcm9zc0F4aXNTdGFydCk7XG4gICAgdmFyIGlzRW5kQ29udGFpbmVkID0gaXNDb250YWluZWQoY3Jvc3NBeGlzRW5kKTtcblxuICAgIGlmICghaXNTdGFydENvbnRhaW5lZCAmJiAhaXNFbmRDb250YWluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc1N0YXJ0Q29udGFpbmVkKSB7XG4gICAgICByZXR1cm4gY3Jvc3NBeGlzU3RhcnQgPCBjaGlsZENlbnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gY3Jvc3NBeGlzRW5kID4gY2hpbGRDZW50ZXI7XG4gIH0pO1xuXG4gIGlmICghY2FuZGlkYXRlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChjYW5kaWRhdGVzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBjYW5kaWRhdGVzWzBdLmRlc2NyaXB0b3IuaWQ7XG4gIH1cblxuICByZXR1cm4gZ2V0RnVydGhlc3RBd2F5KHtcbiAgICBwYWdlQm9yZGVyQm94OiBwYWdlQm9yZGVyQm94LFxuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGNhbmRpZGF0ZXM6IGNhbmRpZGF0ZXNcbiAgfSk7XG59XG5cbnZhciBvZmZzZXRSZWN0QnlQb3NpdGlvbiA9IGZ1bmN0aW9uIG9mZnNldFJlY3RCeVBvc2l0aW9uKHJlY3QsIHBvaW50KSB7XG4gIHJldHVybiBnZXRSZWN0KG9mZnNldEJ5UG9zaXRpb24ocmVjdCwgcG9pbnQpKTtcbn07XG5cbnZhciB3aXRoRHJvcHBhYmxlU2Nyb2xsID0gKGZ1bmN0aW9uIChkcm9wcGFibGUsIGFyZWEpIHtcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuXG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gYXJlYTtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRSZWN0QnlQb3NpdGlvbihhcmVhLCBmcmFtZS5zY3JvbGwuZGlmZi52YWx1ZSk7XG59KTtcblxuZnVuY3Rpb24gZ2V0SXNEaXNwbGFjZWQoX3JlZikge1xuICB2YXIgZGlzcGxhY2VkID0gX3JlZi5kaXNwbGFjZWQsXG4gICAgICBpZCA9IF9yZWYuaWQ7XG4gIHJldHVybiBCb29sZWFuKGRpc3BsYWNlZC52aXNpYmxlW2lkXSB8fCBkaXNwbGFjZWQuaW52aXNpYmxlW2lkXSk7XG59XG5cbmZ1bmN0aW9uIGF0SW5kZXgoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBjbG9zZXN0ID0gX3JlZi5jbG9zZXN0LFxuICAgICAgaW5Ib21lTGlzdCA9IF9yZWYuaW5Ib21lTGlzdDtcblxuICBpZiAoIWNsb3Nlc3QpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghaW5Ib21lTGlzdCkge1xuICAgIHJldHVybiBjbG9zZXN0LmRlc2NyaXB0b3IuaW5kZXg7XG4gIH1cblxuICBpZiAoY2xvc2VzdC5kZXNjcmlwdG9yLmluZGV4ID4gZHJhZ2dhYmxlLmRlc2NyaXB0b3IuaW5kZXgpIHtcbiAgICByZXR1cm4gY2xvc2VzdC5kZXNjcmlwdG9yLmluZGV4IC0gMTtcbiAgfVxuXG4gIHJldHVybiBjbG9zZXN0LmRlc2NyaXB0b3IuaW5kZXg7XG59XG5cbnZhciBnZXRSZW9yZGVySW1wYWN0ID0gKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgdGFyZ2V0UmVjdCA9IF9yZWYyLnBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsLFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZjIuZHJhZ2dhYmxlLFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmMi5kZXN0aW5hdGlvbixcbiAgICAgIGluc2lkZURlc3RpbmF0aW9uID0gX3JlZjIuaW5zaWRlRGVzdGluYXRpb24sXG4gICAgICBsYXN0ID0gX3JlZjIubGFzdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZjIudmlld3BvcnQsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZjIuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIGF4aXMgPSBkZXN0aW5hdGlvbi5heGlzO1xuICB2YXIgZGlzcGxhY2VkQnkgPSBnZXREaXNwbGFjZWRCeShkZXN0aW5hdGlvbi5heGlzLCBkcmFnZ2FibGUuZGlzcGxhY2VCeSk7XG4gIHZhciBkaXNwbGFjZW1lbnQgPSBkaXNwbGFjZWRCeS52YWx1ZTtcbiAgdmFyIHRhcmdldFN0YXJ0ID0gdGFyZ2V0UmVjdFtheGlzLnN0YXJ0XTtcbiAgdmFyIHRhcmdldEVuZCA9IHRhcmdldFJlY3RbYXhpcy5lbmRdO1xuICB2YXIgd2l0aG91dERyYWdnaW5nID0gcmVtb3ZlRHJhZ2dhYmxlRnJvbUxpc3QoZHJhZ2dhYmxlLCBpbnNpZGVEZXN0aW5hdGlvbik7XG4gIHZhciBjbG9zZXN0ID0gZmluZCh3aXRob3V0RHJhZ2dpbmcsIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHZhciBpZCA9IGNoaWxkLmRlc2NyaXB0b3IuaWQ7XG4gICAgdmFyIGNoaWxkQ2VudGVyID0gY2hpbGQucGFnZS5ib3JkZXJCb3guY2VudGVyW2F4aXMubGluZV07XG4gICAgdmFyIGRpZFN0YXJ0QWZ0ZXJDcml0aWNhbCQxID0gZGlkU3RhcnRBZnRlckNyaXRpY2FsKGlkLCBhZnRlckNyaXRpY2FsKTtcbiAgICB2YXIgaXNEaXNwbGFjZWQgPSBnZXRJc0Rpc3BsYWNlZCh7XG4gICAgICBkaXNwbGFjZWQ6IGxhc3QsXG4gICAgICBpZDogaWRcbiAgICB9KTtcblxuICAgIGlmIChkaWRTdGFydEFmdGVyQ3JpdGljYWwkMSkge1xuICAgICAgaWYgKGlzRGlzcGxhY2VkKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRFbmQgPD0gY2hpbGRDZW50ZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRTdGFydCA8IGNoaWxkQ2VudGVyIC0gZGlzcGxhY2VtZW50O1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BsYWNlZCkge1xuICAgICAgcmV0dXJuIHRhcmdldEVuZCA8PSBjaGlsZENlbnRlciArIGRpc3BsYWNlbWVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0U3RhcnQgPCBjaGlsZENlbnRlcjtcbiAgfSk7XG4gIHZhciBuZXdJbmRleCA9IGF0SW5kZXgoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGNsb3Nlc3Q6IGNsb3Nlc3QsXG4gICAgaW5Ib21lTGlzdDogaXNIb21lT2YoZHJhZ2dhYmxlLCBkZXN0aW5hdGlvbilcbiAgfSk7XG4gIHJldHVybiBjYWxjdWxhdGVSZW9yZGVySW1wYWN0KHtcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBpbnNpZGVEZXN0aW5hdGlvbjogaW5zaWRlRGVzdGluYXRpb24sXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBsYXN0OiBsYXN0LFxuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBpbmRleDogbmV3SW5kZXhcbiAgfSk7XG59KTtcblxudmFyIGNvbWJpbmVUaHJlc2hvbGREaXZpc29yID0gNDtcbnZhciBnZXRDb21iaW5lSW1wYWN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIHRhcmdldFJlY3QgPSBfcmVmLnBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsLFxuICAgICAgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgZGVzdGluYXRpb24gPSBfcmVmLmRlc3RpbmF0aW9uLFxuICAgICAgaW5zaWRlRGVzdGluYXRpb24gPSBfcmVmLmluc2lkZURlc3RpbmF0aW9uLFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcblxuICBpZiAoIWRlc3RpbmF0aW9uLmlzQ29tYmluZUVuYWJsZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBheGlzID0gZGVzdGluYXRpb24uYXhpcztcbiAgdmFyIGRpc3BsYWNlZEJ5ID0gZ2V0RGlzcGxhY2VkQnkoZGVzdGluYXRpb24uYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnkpO1xuICB2YXIgZGlzcGxhY2VtZW50ID0gZGlzcGxhY2VkQnkudmFsdWU7XG4gIHZhciB0YXJnZXRTdGFydCA9IHRhcmdldFJlY3RbYXhpcy5zdGFydF07XG4gIHZhciB0YXJnZXRFbmQgPSB0YXJnZXRSZWN0W2F4aXMuZW5kXTtcbiAgdmFyIHdpdGhvdXREcmFnZ2luZyA9IHJlbW92ZURyYWdnYWJsZUZyb21MaXN0KGRyYWdnYWJsZSwgaW5zaWRlRGVzdGluYXRpb24pO1xuICB2YXIgY29tYmluZVdpdGggPSBmaW5kKHdpdGhvdXREcmFnZ2luZywgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgdmFyIGlkID0gY2hpbGQuZGVzY3JpcHRvci5pZDtcbiAgICB2YXIgY2hpbGRSZWN0ID0gY2hpbGQucGFnZS5ib3JkZXJCb3g7XG4gICAgdmFyIGNoaWxkU2l6ZSA9IGNoaWxkUmVjdFtheGlzLnNpemVdO1xuICAgIHZhciB0aHJlc2hvbGQgPSBjaGlsZFNpemUgLyBjb21iaW5lVGhyZXNob2xkRGl2aXNvcjtcbiAgICB2YXIgZGlkU3RhcnRBZnRlckNyaXRpY2FsJDEgPSBkaWRTdGFydEFmdGVyQ3JpdGljYWwoaWQsIGFmdGVyQ3JpdGljYWwpO1xuICAgIHZhciBpc0Rpc3BsYWNlZCA9IGdldElzRGlzcGxhY2VkKHtcbiAgICAgIGRpc3BsYWNlZDogcHJldmlvdXNJbXBhY3QuZGlzcGxhY2VkLFxuICAgICAgaWQ6IGlkXG4gICAgfSk7XG5cbiAgICBpZiAoZGlkU3RhcnRBZnRlckNyaXRpY2FsJDEpIHtcbiAgICAgIGlmIChpc0Rpc3BsYWNlZCkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0RW5kID4gY2hpbGRSZWN0W2F4aXMuc3RhcnRdICsgdGhyZXNob2xkICYmIHRhcmdldEVuZCA8IGNoaWxkUmVjdFtheGlzLmVuZF0gLSB0aHJlc2hvbGQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXRTdGFydCA+IGNoaWxkUmVjdFtheGlzLnN0YXJ0XSAtIGRpc3BsYWNlbWVudCArIHRocmVzaG9sZCAmJiB0YXJnZXRTdGFydCA8IGNoaWxkUmVjdFtheGlzLmVuZF0gLSBkaXNwbGFjZW1lbnQgLSB0aHJlc2hvbGQ7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGxhY2VkKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0RW5kID4gY2hpbGRSZWN0W2F4aXMuc3RhcnRdICsgZGlzcGxhY2VtZW50ICsgdGhyZXNob2xkICYmIHRhcmdldEVuZCA8IGNoaWxkUmVjdFtheGlzLmVuZF0gKyBkaXNwbGFjZW1lbnQgLSB0aHJlc2hvbGQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldFN0YXJ0ID4gY2hpbGRSZWN0W2F4aXMuc3RhcnRdICsgdGhyZXNob2xkICYmIHRhcmdldFN0YXJ0IDwgY2hpbGRSZWN0W2F4aXMuZW5kXSAtIHRocmVzaG9sZDtcbiAgfSk7XG5cbiAgaWYgKCFjb21iaW5lV2l0aCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGltcGFjdCA9IHtcbiAgICBkaXNwbGFjZWRCeTogZGlzcGxhY2VkQnksXG4gICAgZGlzcGxhY2VkOiBwcmV2aW91c0ltcGFjdC5kaXNwbGFjZWQsXG4gICAgYXQ6IHtcbiAgICAgIHR5cGU6ICdDT01CSU5FJyxcbiAgICAgIGNvbWJpbmU6IHtcbiAgICAgICAgZHJhZ2dhYmxlSWQ6IGNvbWJpbmVXaXRoLmRlc2NyaXB0b3IuaWQsXG4gICAgICAgIGRyb3BwYWJsZUlkOiBkZXN0aW5hdGlvbi5kZXNjcmlwdG9yLmlkXG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gaW1wYWN0O1xufSk7XG5cbnZhciBnZXREcmFnSW1wYWN0ID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwYWdlT2Zmc2V0ID0gX3JlZi5wYWdlT2Zmc2V0LFxuICAgICAgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IF9yZWYuZHJvcHBhYmxlcyxcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZi5wcmV2aW91c0ltcGFjdCxcbiAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfcmVmLmFmdGVyQ3JpdGljYWw7XG4gIHZhciBwYWdlQm9yZGVyQm94ID0gb2Zmc2V0UmVjdEJ5UG9zaXRpb24oZHJhZ2dhYmxlLnBhZ2UuYm9yZGVyQm94LCBwYWdlT2Zmc2V0KTtcbiAgdmFyIGRlc3RpbmF0aW9uSWQgPSBnZXREcm9wcGFibGVPdmVyJDEoe1xuICAgIHBhZ2VCb3JkZXJCb3g6IHBhZ2VCb3JkZXJCb3gsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJvcHBhYmxlczogZHJvcHBhYmxlc1xuICB9KTtcblxuICBpZiAoIWRlc3RpbmF0aW9uSWQpIHtcbiAgICByZXR1cm4gbm9JbXBhY3Q7XG4gIH1cblxuICB2YXIgZGVzdGluYXRpb24gPSBkcm9wcGFibGVzW2Rlc3RpbmF0aW9uSWRdO1xuICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGRlc3RpbmF0aW9uLmRlc2NyaXB0b3IuaWQsIGRyYWdnYWJsZXMpO1xuICB2YXIgcGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGwgPSB3aXRoRHJvcHBhYmxlU2Nyb2xsKGRlc3RpbmF0aW9uLCBwYWdlQm9yZGVyQm94KTtcbiAgcmV0dXJuIGdldENvbWJpbmVJbXBhY3Qoe1xuICAgIHBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsOiBwYWdlQm9yZGVyQm94V2l0aERyb3BwYWJsZVNjcm9sbCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBwcmV2aW91c0ltcGFjdDogcHJldmlvdXNJbXBhY3QsXG4gICAgZGVzdGluYXRpb246IGRlc3RpbmF0aW9uLFxuICAgIGluc2lkZURlc3RpbmF0aW9uOiBpbnNpZGVEZXN0aW5hdGlvbixcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pIHx8IGdldFJlb3JkZXJJbXBhY3Qoe1xuICAgIHBhZ2VCb3JkZXJCb3hXaXRoRHJvcHBhYmxlU2Nyb2xsOiBwYWdlQm9yZGVyQm94V2l0aERyb3BwYWJsZVNjcm9sbCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgaW5zaWRlRGVzdGluYXRpb246IGluc2lkZURlc3RpbmF0aW9uLFxuICAgIGxhc3Q6IHByZXZpb3VzSW1wYWN0LmRpc3BsYWNlZCxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9KTtcbn0pO1xuXG52YXIgcGF0Y2hEcm9wcGFibGVNYXAgPSAoZnVuY3Rpb24gKGRyb3BwYWJsZXMsIHVwZGF0ZWQpIHtcbiAgdmFyIF9leHRlbmRzMjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGRyb3BwYWJsZXMsIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW3VwZGF0ZWQuZGVzY3JpcHRvci5pZF0gPSB1cGRhdGVkLCBfZXh0ZW5kczIpKTtcbn0pO1xuXG52YXIgY2xlYXJVbnVzZWRQbGFjZWhvbGRlciA9IGZ1bmN0aW9uIGNsZWFyVW51c2VkUGxhY2Vob2xkZXIoX3JlZikge1xuICB2YXIgcHJldmlvdXNJbXBhY3QgPSBfcmVmLnByZXZpb3VzSW1wYWN0LFxuICAgICAgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBkcm9wcGFibGVzID0gX3JlZi5kcm9wcGFibGVzO1xuICB2YXIgbGFzdCA9IHdoYXRJc0RyYWdnZWRPdmVyKHByZXZpb3VzSW1wYWN0KTtcbiAgdmFyIG5vdyA9IHdoYXRJc0RyYWdnZWRPdmVyKGltcGFjdCk7XG5cbiAgaWYgKCFsYXN0KSB7XG4gICAgcmV0dXJuIGRyb3BwYWJsZXM7XG4gIH1cblxuICBpZiAobGFzdCA9PT0gbm93KSB7XG4gICAgcmV0dXJuIGRyb3BwYWJsZXM7XG4gIH1cblxuICB2YXIgbGFzdERyb3BwYWJsZSA9IGRyb3BwYWJsZXNbbGFzdF07XG5cbiAgaWYgKCFsYXN0RHJvcHBhYmxlLnN1YmplY3Qud2l0aFBsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuIGRyb3BwYWJsZXM7XG4gIH1cblxuICB2YXIgdXBkYXRlZCA9IHJlbW92ZVBsYWNlaG9sZGVyKGxhc3REcm9wcGFibGUpO1xuICByZXR1cm4gcGF0Y2hEcm9wcGFibGVNYXAoZHJvcHBhYmxlcywgdXBkYXRlZCk7XG59O1xuXG52YXIgcmVjb21wdXRlUGxhY2Vob2xkZXJzID0gKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZjIuZHJhZ2dhYmxlLFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYyLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzID0gX3JlZjIuZHJvcHBhYmxlcyxcbiAgICAgIHByZXZpb3VzSW1wYWN0ID0gX3JlZjIucHJldmlvdXNJbXBhY3QsXG4gICAgICBpbXBhY3QgPSBfcmVmMi5pbXBhY3Q7XG4gIHZhciBjbGVhbmVkID0gY2xlYXJVbnVzZWRQbGFjZWhvbGRlcih7XG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIGRyb3BwYWJsZXM6IGRyb3BwYWJsZXNcbiAgfSk7XG4gIHZhciBpc092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlcihpbXBhY3QpO1xuXG4gIGlmICghaXNPdmVyKSB7XG4gICAgcmV0dXJuIGNsZWFuZWQ7XG4gIH1cblxuICB2YXIgZHJvcHBhYmxlID0gZHJvcHBhYmxlc1tpc092ZXJdO1xuXG4gIGlmIChpc0hvbWVPZihkcmFnZ2FibGUsIGRyb3BwYWJsZSkpIHtcbiAgICByZXR1cm4gY2xlYW5lZDtcbiAgfVxuXG4gIGlmIChkcm9wcGFibGUuc3ViamVjdC53aXRoUGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gY2xlYW5lZDtcbiAgfVxuXG4gIHZhciBwYXRjaGVkID0gYWRkUGxhY2Vob2xkZXIoZHJvcHBhYmxlLCBkcmFnZ2FibGUsIGRyYWdnYWJsZXMpO1xuICByZXR1cm4gcGF0Y2hEcm9wcGFibGVNYXAoY2xlYW5lZCwgcGF0Y2hlZCk7XG59KTtcblxudmFyIHVwZGF0ZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgZm9yY2VkQ2xpZW50U2VsZWN0aW9uID0gX3JlZi5jbGllbnRTZWxlY3Rpb24sXG4gICAgICBmb3JjZWREaW1lbnNpb25zID0gX3JlZi5kaW1lbnNpb25zLFxuICAgICAgZm9yY2VkVmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgZm9yY2VkSW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBzY3JvbGxKdW1wUmVxdWVzdCA9IF9yZWYuc2Nyb2xsSnVtcFJlcXVlc3Q7XG4gIHZhciB2aWV3cG9ydCA9IGZvcmNlZFZpZXdwb3J0IHx8IHN0YXRlLnZpZXdwb3J0O1xuICB2YXIgZGltZW5zaW9ucyA9IGZvcmNlZERpbWVuc2lvbnMgfHwgc3RhdGUuZGltZW5zaW9ucztcbiAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGZvcmNlZENsaWVudFNlbGVjdGlvbiB8fCBzdGF0ZS5jdXJyZW50LmNsaWVudC5zZWxlY3Rpb247XG4gIHZhciBvZmZzZXQgPSBzdWJ0cmFjdChjbGllbnRTZWxlY3Rpb24sIHN0YXRlLmluaXRpYWwuY2xpZW50LnNlbGVjdGlvbik7XG4gIHZhciBjbGllbnQgPSB7XG4gICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgc2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgYm9yZGVyQm94Q2VudGVyOiBhZGQoc3RhdGUuaW5pdGlhbC5jbGllbnQuYm9yZGVyQm94Q2VudGVyLCBvZmZzZXQpXG4gIH07XG4gIHZhciBwYWdlID0ge1xuICAgIHNlbGVjdGlvbjogYWRkKGNsaWVudC5zZWxlY3Rpb24sIHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50KSxcbiAgICBib3JkZXJCb3hDZW50ZXI6IGFkZChjbGllbnQuYm9yZGVyQm94Q2VudGVyLCB2aWV3cG9ydC5zY3JvbGwuY3VycmVudCksXG4gICAgb2Zmc2V0OiBhZGQoY2xpZW50Lm9mZnNldCwgdmlld3BvcnQuc2Nyb2xsLmRpZmYudmFsdWUpXG4gIH07XG4gIHZhciBjdXJyZW50ID0ge1xuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHBhZ2U6IHBhZ2VcbiAgfTtcblxuICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBwaGFzZTogJ0NPTExFQ1RJTkcnXG4gICAgfSwgc3RhdGUsIHtcbiAgICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICBjdXJyZW50OiBjdXJyZW50XG4gICAgfSk7XG4gIH1cblxuICB2YXIgZHJhZ2dhYmxlID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gIHZhciBuZXdJbXBhY3QgPSBmb3JjZWRJbXBhY3QgfHwgZ2V0RHJhZ0ltcGFjdCh7XG4gICAgcGFnZU9mZnNldDogcGFnZS5vZmZzZXQsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IGRpbWVuc2lvbnMuZHJvcHBhYmxlcyxcbiAgICBwcmV2aW91c0ltcGFjdDogc3RhdGUuaW1wYWN0LFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBzdGF0ZS5hZnRlckNyaXRpY2FsXG4gIH0pO1xuICB2YXIgd2l0aFVwZGF0ZWRQbGFjZWhvbGRlcnMgPSByZWNvbXB1dGVQbGFjZWhvbGRlcnMoe1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgIGltcGFjdDogbmV3SW1wYWN0LFxuICAgIHByZXZpb3VzSW1wYWN0OiBzdGF0ZS5pbXBhY3QsXG4gICAgZHJhZ2dhYmxlczogZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgIGRyb3BwYWJsZXM6IGRpbWVuc2lvbnMuZHJvcHBhYmxlc1xuICB9KTtcblxuICB2YXIgcmVzdWx0ID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgY3VycmVudDogY3VycmVudCxcbiAgICBkaW1lbnNpb25zOiB7XG4gICAgICBkcmFnZ2FibGVzOiBkaW1lbnNpb25zLmRyYWdnYWJsZXMsXG4gICAgICBkcm9wcGFibGVzOiB3aXRoVXBkYXRlZFBsYWNlaG9sZGVyc1xuICAgIH0sXG4gICAgaW1wYWN0OiBuZXdJbXBhY3QsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgIHNjcm9sbEp1bXBSZXF1ZXN0OiBzY3JvbGxKdW1wUmVxdWVzdCB8fCBudWxsLFxuICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogc2Nyb2xsSnVtcFJlcXVlc3QgPyBmYWxzZSA6IG51bGxcbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5mdW5jdGlvbiBnZXREcmFnZ2FibGVzJDEoaWRzLCBkcmFnZ2FibGVzKSB7XG4gIHJldHVybiBpZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBkcmFnZ2FibGVzW2lkXTtcbiAgfSk7XG59XG5cbnZhciByZWNvbXB1dGUgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGltcGFjdCA9IF9yZWYuaW1wYWN0LFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIGRlc3RpbmF0aW9uID0gX3JlZi5kZXN0aW5hdGlvbixcbiAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZSA9IF9yZWYuZm9yY2VTaG91bGRBbmltYXRlO1xuICB2YXIgbGFzdCA9IGltcGFjdC5kaXNwbGFjZWQ7XG4gIHZhciBhZnRlckRyYWdnaW5nID0gZ2V0RHJhZ2dhYmxlcyQxKGxhc3QuYWxsLCBkcmFnZ2FibGVzKTtcbiAgdmFyIGRpc3BsYWNlZCA9IGdldERpc3BsYWNlbWVudEdyb3Vwcyh7XG4gICAgYWZ0ZXJEcmFnZ2luZzogYWZ0ZXJEcmFnZ2luZyxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZGlzcGxhY2VkQnk6IGltcGFjdC5kaXNwbGFjZWRCeSxcbiAgICB2aWV3cG9ydDogdmlld3BvcnQuZnJhbWUsXG4gICAgZm9yY2VTaG91bGRBbmltYXRlOiBmb3JjZVNob3VsZEFuaW1hdGUsXG4gICAgbGFzdDogbGFzdFxuICB9KTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBpbXBhY3QsIHtcbiAgICBkaXNwbGFjZWQ6IGRpc3BsYWNlZFxuICB9KTtcbn0pO1xuXG52YXIgZ2V0Q2xpZW50Qm9yZGVyQm94Q2VudGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBpbXBhY3QgPSBfcmVmLmltcGFjdCxcbiAgICAgIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgZHJvcHBhYmxlID0gX3JlZi5kcm9wcGFibGUsXG4gICAgICBkcmFnZ2FibGVzID0gX3JlZi5kcmFnZ2FibGVzLFxuICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LFxuICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9yZWYuYWZ0ZXJDcml0aWNhbDtcbiAgdmFyIHBhZ2VCb3JkZXJCb3hDZW50ZXIgPSBnZXRQYWdlQm9yZGVyQm94Q2VudGVyRnJvbUltcGFjdCh7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICBkcm9wcGFibGU6IGRyb3BwYWJsZSxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xuICByZXR1cm4gZ2V0Q2xpZW50RnJvbVBhZ2VCb3JkZXJCb3hDZW50ZXIoe1xuICAgIHBhZ2VCb3JkZXJCb3hDZW50ZXI6IHBhZ2VCb3JkZXJCb3hDZW50ZXIsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gIH0pO1xufSk7XG5cbnZhciByZWZyZXNoU25hcCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgZm9yY2VkRGltZW5zaW9ucyA9IF9yZWYuZGltZW5zaW9ucyxcbiAgICAgIGZvcmNlZFZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydDtcbiAgIShzdGF0ZS5tb3ZlbWVudE1vZGUgPT09ICdTTkFQJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIG5lZWRzVmlzaWJpbGl0eUNoZWNrID0gc3RhdGUuaW1wYWN0O1xuICB2YXIgdmlld3BvcnQgPSBmb3JjZWRWaWV3cG9ydCB8fCBzdGF0ZS52aWV3cG9ydDtcbiAgdmFyIGRpbWVuc2lvbnMgPSBmb3JjZWREaW1lbnNpb25zIHx8IHN0YXRlLmRpbWVuc2lvbnM7XG4gIHZhciBkcmFnZ2FibGVzID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgICAgZHJvcHBhYmxlcyA9IGRpbWVuc2lvbnMuZHJvcHBhYmxlcztcbiAgdmFyIGRyYWdnYWJsZSA9IGRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgdmFyIGlzT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKG5lZWRzVmlzaWJpbGl0eUNoZWNrKTtcbiAgIWlzT3ZlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011c3QgYmUgb3ZlciBhIGRlc3RpbmF0aW9uIGluIFNOQVAgbW92ZW1lbnQgbW9kZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGRlc3RpbmF0aW9uID0gZHJvcHBhYmxlc1tpc092ZXJdO1xuICB2YXIgaW1wYWN0ID0gcmVjb21wdXRlKHtcbiAgICBpbXBhY3Q6IG5lZWRzVmlzaWJpbGl0eUNoZWNrLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBkZXN0aW5hdGlvbjogZGVzdGluYXRpb24sXG4gICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlc1xuICB9KTtcbiAgdmFyIGNsaWVudFNlbGVjdGlvbiA9IGdldENsaWVudEJvcmRlckJveENlbnRlcih7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbixcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBzdGF0ZS5hZnRlckNyaXRpY2FsXG4gIH0pO1xuICByZXR1cm4gdXBkYXRlKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBjbGllbnRTZWxlY3Rpb246IGNsaWVudFNlbGVjdGlvbixcbiAgICBzdGF0ZTogc3RhdGUsXG4gICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICB2aWV3cG9ydDogdmlld3BvcnRcbiAgfSk7XG59KTtcblxudmFyIGdldEhvbWVMb2NhdGlvbiA9IChmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICByZXR1cm4ge1xuICAgIGluZGV4OiBkZXNjcmlwdG9yLmluZGV4LFxuICAgIGRyb3BwYWJsZUlkOiBkZXNjcmlwdG9yLmRyb3BwYWJsZUlkXG4gIH07XG59KTtcblxudmFyIGdldExpZnRFZmZlY3QgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRyYWdnYWJsZSA9IF9yZWYuZHJhZ2dhYmxlLFxuICAgICAgaG9tZSA9IF9yZWYuaG9tZSxcbiAgICAgIGRyYWdnYWJsZXMgPSBfcmVmLmRyYWdnYWJsZXMsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG4gIHZhciBkaXNwbGFjZWRCeSA9IGdldERpc3BsYWNlZEJ5KGhvbWUuYXhpcywgZHJhZ2dhYmxlLmRpc3BsYWNlQnkpO1xuICB2YXIgaW5zaWRlSG9tZSA9IGdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUoaG9tZS5kZXNjcmlwdG9yLmlkLCBkcmFnZ2FibGVzKTtcbiAgdmFyIHJhd0luZGV4ID0gaW5zaWRlSG9tZS5pbmRleE9mKGRyYWdnYWJsZSk7XG4gICEocmF3SW5kZXggIT09IC0xKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIGRyYWdnYWJsZSB0byBiZSBpbnNpZGUgaG9tZSBsaXN0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgYWZ0ZXJEcmFnZ2luZyA9IGluc2lkZUhvbWUuc2xpY2UocmF3SW5kZXggKyAxKTtcbiAgdmFyIGVmZmVjdGVkID0gYWZ0ZXJEcmFnZ2luZy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBpdGVtKSB7XG4gICAgcHJldmlvdXNbaXRlbS5kZXNjcmlwdG9yLmlkXSA9IHRydWU7XG4gICAgcmV0dXJuIHByZXZpb3VzO1xuICB9LCB7fSk7XG4gIHZhciBhZnRlckNyaXRpY2FsID0ge1xuICAgIGluVmlydHVhbExpc3Q6IGhvbWUuZGVzY3JpcHRvci5tb2RlID09PSAndmlydHVhbCcsXG4gICAgZGlzcGxhY2VkQnk6IGRpc3BsYWNlZEJ5LFxuICAgIGVmZmVjdGVkOiBlZmZlY3RlZFxuICB9O1xuICB2YXIgZGlzcGxhY2VkID0gZ2V0RGlzcGxhY2VtZW50R3JvdXBzKHtcbiAgICBhZnRlckRyYWdnaW5nOiBhZnRlckRyYWdnaW5nLFxuICAgIGRlc3RpbmF0aW9uOiBob21lLFxuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBsYXN0OiBudWxsLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydC5mcmFtZSxcbiAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZhbHNlXG4gIH0pO1xuICB2YXIgaW1wYWN0ID0ge1xuICAgIGRpc3BsYWNlZDogZGlzcGxhY2VkLFxuICAgIGRpc3BsYWNlZEJ5OiBkaXNwbGFjZWRCeSxcbiAgICBhdDoge1xuICAgICAgdHlwZTogJ1JFT1JERVInLFxuICAgICAgZGVzdGluYXRpb246IGdldEhvbWVMb2NhdGlvbihkcmFnZ2FibGUuZGVzY3JpcHRvcilcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgaW1wYWN0OiBpbXBhY3QsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbFxuICB9O1xufSk7XG5cbnZhciBwYXRjaERpbWVuc2lvbk1hcCA9IChmdW5jdGlvbiAoZGltZW5zaW9ucywgdXBkYXRlZCkge1xuICByZXR1cm4ge1xuICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICBkcm9wcGFibGVzOiBwYXRjaERyb3BwYWJsZU1hcChkaW1lbnNpb25zLmRyb3BwYWJsZXMsIHVwZGF0ZWQpXG4gIH07XG59KTtcblxudmFyIHN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoa2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufTtcbnZhciBmaW5pc2ggPSBmdW5jdGlvbiBmaW5pc2goa2V5KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxufTtcblxudmFyIG9mZnNldERyYWdnYWJsZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlID0gX3JlZi5kcmFnZ2FibGUsXG4gICAgICBvZmZzZXQkMSA9IF9yZWYub2Zmc2V0LFxuICAgICAgaW5pdGlhbFdpbmRvd1Njcm9sbCA9IF9yZWYuaW5pdGlhbFdpbmRvd1Njcm9sbDtcbiAgdmFyIGNsaWVudCA9IG9mZnNldChkcmFnZ2FibGUuY2xpZW50LCBvZmZzZXQkMSk7XG4gIHZhciBwYWdlID0gd2l0aFNjcm9sbChjbGllbnQsIGluaXRpYWxXaW5kb3dTY3JvbGwpO1xuXG4gIHZhciBtb3ZlZCA9IF9leHRlbmRzKHt9LCBkcmFnZ2FibGUsIHtcbiAgICBwbGFjZWhvbGRlcjogX2V4dGVuZHMoe30sIGRyYWdnYWJsZS5wbGFjZWhvbGRlciwge1xuICAgICAgY2xpZW50OiBjbGllbnRcbiAgICB9KSxcbiAgICBjbGllbnQ6IGNsaWVudCxcbiAgICBwYWdlOiBwYWdlXG4gIH0pO1xuXG4gIHJldHVybiBtb3ZlZDtcbn0pO1xuXG52YXIgZ2V0RnJhbWUgPSAoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG4gICFmcmFtZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIERyb3BwYWJsZSB0byBoYXZlIGEgZnJhbWUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBmcmFtZTtcbn0pO1xuXG52YXIgYWRqdXN0QWRkaXRpb25zRm9yU2Nyb2xsQ2hhbmdlcyA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgYWRkaXRpb25zID0gX3JlZi5hZGRpdGlvbnMsXG4gICAgICB1cGRhdGVkRHJvcHBhYmxlcyA9IF9yZWYudXBkYXRlZERyb3BwYWJsZXMsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQ7XG4gIHZhciB3aW5kb3dTY3JvbGxDaGFuZ2UgPSB2aWV3cG9ydC5zY3JvbGwuZGlmZi52YWx1ZTtcbiAgcmV0dXJuIGFkZGl0aW9ucy5tYXAoZnVuY3Rpb24gKGRyYWdnYWJsZSkge1xuICAgIHZhciBkcm9wcGFibGVJZCA9IGRyYWdnYWJsZS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkO1xuICAgIHZhciBtb2RpZmllZCA9IHVwZGF0ZWREcm9wcGFibGVzW2Ryb3BwYWJsZUlkXTtcbiAgICB2YXIgZnJhbWUgPSBnZXRGcmFtZShtb2RpZmllZCk7XG4gICAgdmFyIGRyb3BwYWJsZVNjcm9sbENoYW5nZSA9IGZyYW1lLnNjcm9sbC5kaWZmLnZhbHVlO1xuICAgIHZhciB0b3RhbENoYW5nZSA9IGFkZCh3aW5kb3dTY3JvbGxDaGFuZ2UsIGRyb3BwYWJsZVNjcm9sbENoYW5nZSk7XG4gICAgdmFyIG1vdmVkID0gb2Zmc2V0RHJhZ2dhYmxlKHtcbiAgICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlLFxuICAgICAgb2Zmc2V0OiB0b3RhbENoYW5nZSxcbiAgICAgIGluaXRpYWxXaW5kb3dTY3JvbGw6IHZpZXdwb3J0LnNjcm9sbC5pbml0aWFsXG4gICAgfSk7XG4gICAgcmV0dXJuIG1vdmVkO1xuICB9KTtcbn0pO1xuXG52YXIgcHVibGlzaFdoaWxlRHJhZ2dpbmdJblZpcnR1YWwgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHB1Ymxpc2hlZCA9IF9yZWYucHVibGlzaGVkO1xuICBzdGFydCgpO1xuICB2YXIgd2l0aFNjcm9sbENoYW5nZSA9IHB1Ymxpc2hlZC5tb2RpZmllZC5tYXAoZnVuY3Rpb24gKHVwZGF0ZSkge1xuICAgIHZhciBleGlzdGluZyA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1t1cGRhdGUuZHJvcHBhYmxlSWRdO1xuICAgIHZhciBzY3JvbGxlZCA9IHNjcm9sbERyb3BwYWJsZShleGlzdGluZywgdXBkYXRlLnNjcm9sbCk7XG4gICAgcmV0dXJuIHNjcm9sbGVkO1xuICB9KTtcblxuICB2YXIgZHJvcHBhYmxlcyA9IF9leHRlbmRzKHt9LCBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXMsIHt9LCB0b0Ryb3BwYWJsZU1hcCh3aXRoU2Nyb2xsQ2hhbmdlKSk7XG5cbiAgdmFyIHVwZGF0ZWRBZGRpdGlvbnMgPSB0b0RyYWdnYWJsZU1hcChhZGp1c3RBZGRpdGlvbnNGb3JTY3JvbGxDaGFuZ2VzKHtcbiAgICBhZGRpdGlvbnM6IHB1Ymxpc2hlZC5hZGRpdGlvbnMsXG4gICAgdXBkYXRlZERyb3BwYWJsZXM6IGRyb3BwYWJsZXMsXG4gICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0XG4gIH0pKTtcblxuICB2YXIgZHJhZ2dhYmxlcyA9IF9leHRlbmRzKHt9LCBzdGF0ZS5kaW1lbnNpb25zLmRyYWdnYWJsZXMsIHt9LCB1cGRhdGVkQWRkaXRpb25zKTtcblxuICBwdWJsaXNoZWQucmVtb3ZhbHMuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICBkZWxldGUgZHJhZ2dhYmxlc1tpZF07XG4gIH0pO1xuICB2YXIgZGltZW5zaW9ucyA9IHtcbiAgICBkcm9wcGFibGVzOiBkcm9wcGFibGVzLFxuICAgIGRyYWdnYWJsZXM6IGRyYWdnYWJsZXNcbiAgfTtcbiAgdmFyIHdhc092ZXJJZCA9IHdoYXRJc0RyYWdnZWRPdmVyKHN0YXRlLmltcGFjdCk7XG4gIHZhciB3YXNPdmVyID0gd2FzT3ZlcklkID8gZGltZW5zaW9ucy5kcm9wcGFibGVzW3dhc092ZXJJZF0gOiBudWxsO1xuICB2YXIgZHJhZ2dhYmxlID0gZGltZW5zaW9ucy5kcmFnZ2FibGVzW3N0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG4gIHZhciBob21lID0gZGltZW5zaW9ucy5kcm9wcGFibGVzW3N0YXRlLmNyaXRpY2FsLmRyb3BwYWJsZS5pZF07XG5cbiAgdmFyIF9nZXRMaWZ0RWZmZWN0ID0gZ2V0TGlmdEVmZmVjdCh7XG4gICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgaG9tZTogaG9tZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydFxuICB9KSxcbiAgICAgIG9uTGlmdEltcGFjdCA9IF9nZXRMaWZ0RWZmZWN0LmltcGFjdCxcbiAgICAgIGFmdGVyQ3JpdGljYWwgPSBfZ2V0TGlmdEVmZmVjdC5hZnRlckNyaXRpY2FsO1xuXG4gIHZhciBwcmV2aW91c0ltcGFjdCA9IHdhc092ZXIgJiYgd2FzT3Zlci5pc0NvbWJpbmVFbmFibGVkID8gc3RhdGUuaW1wYWN0IDogb25MaWZ0SW1wYWN0O1xuICB2YXIgaW1wYWN0ID0gZ2V0RHJhZ0ltcGFjdCh7XG4gICAgcGFnZU9mZnNldDogc3RhdGUuY3VycmVudC5wYWdlLm9mZnNldCxcbiAgICBkcmFnZ2FibGU6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdLFxuICAgIGRyYWdnYWJsZXM6IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICBkcm9wcGFibGVzOiBkaW1lbnNpb25zLmRyb3BwYWJsZXMsXG4gICAgcHJldmlvdXNJbXBhY3Q6IHByZXZpb3VzSW1wYWN0LFxuICAgIHZpZXdwb3J0OiBzdGF0ZS52aWV3cG9ydCxcbiAgICBhZnRlckNyaXRpY2FsOiBhZnRlckNyaXRpY2FsXG4gIH0pO1xuICBmaW5pc2goKTtcblxuICB2YXIgZHJhZ2dpbmdTdGF0ZSA9IF9leHRlbmRzKHtcbiAgICBwaGFzZTogJ0RSQUdHSU5HJ1xuICB9LCBzdGF0ZSwge1xuICAgIHBoYXNlOiAnRFJBR0dJTkcnLFxuICAgIGltcGFjdDogaW1wYWN0LFxuICAgIG9uTGlmdEltcGFjdDogb25MaWZ0SW1wYWN0LFxuICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbCxcbiAgICBmb3JjZVNob3VsZEFuaW1hdGU6IGZhbHNlXG4gIH0pO1xuXG4gIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnKSB7XG4gICAgcmV0dXJuIGRyYWdnaW5nU3RhdGU7XG4gIH1cblxuICB2YXIgZHJvcFBlbmRpbmcgPSBfZXh0ZW5kcyh7XG4gICAgcGhhc2U6ICdEUk9QX1BFTkRJTkcnXG4gIH0sIGRyYWdnaW5nU3RhdGUsIHtcbiAgICBwaGFzZTogJ0RST1BfUEVORElORycsXG4gICAgcmVhc29uOiBzdGF0ZS5yZWFzb24sXG4gICAgaXNXYWl0aW5nOiBmYWxzZVxuICB9KTtcblxuICByZXR1cm4gZHJvcFBlbmRpbmc7XG59KTtcblxudmFyIGlzU25hcHBpbmcgPSBmdW5jdGlvbiBpc1NuYXBwaW5nKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5tb3ZlbWVudE1vZGUgPT09ICdTTkFQJztcbn07XG5cbnZhciBwb3N0RHJvcHBhYmxlQ2hhbmdlID0gZnVuY3Rpb24gcG9zdERyb3BwYWJsZUNoYW5nZShzdGF0ZSwgdXBkYXRlZCwgaXNFbmFibGVkQ2hhbmdpbmcpIHtcbiAgdmFyIGRpbWVuc2lvbnMgPSBwYXRjaERpbWVuc2lvbk1hcChzdGF0ZS5kaW1lbnNpb25zLCB1cGRhdGVkKTtcblxuICBpZiAoIWlzU25hcHBpbmcoc3RhdGUpIHx8IGlzRW5hYmxlZENoYW5naW5nKSB7XG4gICAgcmV0dXJuIHVwZGF0ZSh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVmcmVzaFNuYXAoe1xuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zXG4gIH0pO1xufTtcblxuZnVuY3Rpb24gcmVtb3ZlU2Nyb2xsSnVtcFJlcXVlc3Qoc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmlzRHJhZ2dpbmcgJiYgc3RhdGUubW92ZW1lbnRNb2RlID09PSAnU05BUCcpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgcGhhc2U6ICdEUkFHR0lORydcbiAgICB9LCBzdGF0ZSwge1xuICAgICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IG51bGxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxudmFyIGlkbGUgPSB7XG4gIHBoYXNlOiAnSURMRScsXG4gIGNvbXBsZXRlZDogbnVsbCxcbiAgc2hvdWxkRmx1c2g6IGZhbHNlXG59O1xudmFyIHJlZHVjZXIgPSAoZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24pIHtcbiAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICBzdGF0ZSA9IGlkbGU7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdGTFVTSCcpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGlkbGUsIHtcbiAgICAgIHNob3VsZEZsdXNoOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdJTklUSUFMX1BVQkxJU0gnKSB7XG4gICAgIShzdGF0ZS5waGFzZSA9PT0gJ0lETEUnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0lOSVRJQUxfUFVCTElTSCBtdXN0IGNvbWUgYWZ0ZXIgYSBJRExFIHBoYXNlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfYWN0aW9uJHBheWxvYWQgPSBhY3Rpb24ucGF5bG9hZCxcbiAgICAgICAgY3JpdGljYWwgPSBfYWN0aW9uJHBheWxvYWQuY3JpdGljYWwsXG4gICAgICAgIGNsaWVudFNlbGVjdGlvbiA9IF9hY3Rpb24kcGF5bG9hZC5jbGllbnRTZWxlY3Rpb24sXG4gICAgICAgIHZpZXdwb3J0ID0gX2FjdGlvbiRwYXlsb2FkLnZpZXdwb3J0LFxuICAgICAgICBkaW1lbnNpb25zID0gX2FjdGlvbiRwYXlsb2FkLmRpbWVuc2lvbnMsXG4gICAgICAgIG1vdmVtZW50TW9kZSA9IF9hY3Rpb24kcGF5bG9hZC5tb3ZlbWVudE1vZGU7XG4gICAgdmFyIGRyYWdnYWJsZSA9IGRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tjcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuICAgIHZhciBob21lID0gZGltZW5zaW9ucy5kcm9wcGFibGVzW2NyaXRpY2FsLmRyb3BwYWJsZS5pZF07XG4gICAgdmFyIGNsaWVudCA9IHtcbiAgICAgIHNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgICAgYm9yZGVyQm94Q2VudGVyOiBkcmFnZ2FibGUuY2xpZW50LmJvcmRlckJveC5jZW50ZXIsXG4gICAgICBvZmZzZXQ6IG9yaWdpblxuICAgIH07XG4gICAgdmFyIGluaXRpYWwgPSB7XG4gICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgIHBhZ2U6IHtcbiAgICAgICAgc2VsZWN0aW9uOiBhZGQoY2xpZW50LnNlbGVjdGlvbiwgdmlld3BvcnQuc2Nyb2xsLmluaXRpYWwpLFxuICAgICAgICBib3JkZXJCb3hDZW50ZXI6IGFkZChjbGllbnQuc2VsZWN0aW9uLCB2aWV3cG9ydC5zY3JvbGwuaW5pdGlhbCksXG4gICAgICAgIG9mZnNldDogYWRkKGNsaWVudC5zZWxlY3Rpb24sIHZpZXdwb3J0LnNjcm9sbC5kaWZmLnZhbHVlKVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGlzV2luZG93U2Nyb2xsQWxsb3dlZCA9IHRvRHJvcHBhYmxlTGlzdChkaW1lbnNpb25zLmRyb3BwYWJsZXMpLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gIWl0ZW0uaXNGaXhlZE9uUGFnZTtcbiAgICB9KTtcblxuICAgIHZhciBfZ2V0TGlmdEVmZmVjdCA9IGdldExpZnRFZmZlY3Qoe1xuICAgICAgZHJhZ2dhYmxlOiBkcmFnZ2FibGUsXG4gICAgICBob21lOiBob21lLFxuICAgICAgZHJhZ2dhYmxlczogZGltZW5zaW9ucy5kcmFnZ2FibGVzLFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gICAgfSksXG4gICAgICAgIGltcGFjdCA9IF9nZXRMaWZ0RWZmZWN0LmltcGFjdCxcbiAgICAgICAgYWZ0ZXJDcml0aWNhbCA9IF9nZXRMaWZ0RWZmZWN0LmFmdGVyQ3JpdGljYWw7XG5cbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgcGhhc2U6ICdEUkFHR0lORycsXG4gICAgICBpc0RyYWdnaW5nOiB0cnVlLFxuICAgICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgbW92ZW1lbnRNb2RlOiBtb3ZlbWVudE1vZGUsXG4gICAgICBkaW1lbnNpb25zOiBkaW1lbnNpb25zLFxuICAgICAgaW5pdGlhbDogaW5pdGlhbCxcbiAgICAgIGN1cnJlbnQ6IGluaXRpYWwsXG4gICAgICBpc1dpbmRvd1Njcm9sbEFsbG93ZWQ6IGlzV2luZG93U2Nyb2xsQWxsb3dlZCxcbiAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgYWZ0ZXJDcml0aWNhbDogYWZ0ZXJDcml0aWNhbCxcbiAgICAgIG9uTGlmdEltcGFjdDogaW1wYWN0LFxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxuICAgICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IG51bGwsXG4gICAgICBmb3JjZVNob3VsZEFuaW1hdGU6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdDT0xMRUNUSU9OX1NUQVJUSU5HJykge1xuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0NPTExFQ1RJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICEoc3RhdGUucGhhc2UgPT09ICdEUkFHR0lORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNvbGxlY3Rpb24gY2Fubm90IHN0YXJ0IGZyb20gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIF9yZXN1bHQgPSBfZXh0ZW5kcyh7XG4gICAgICBwaGFzZTogJ0NPTExFQ1RJTkcnXG4gICAgfSwgc3RhdGUsIHtcbiAgICAgIHBoYXNlOiAnQ09MTEVDVElORydcbiAgICB9KTtcblxuICAgIHJldHVybiBfcmVzdWx0O1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnUFVCTElTSF9XSElMRV9EUkFHR0lORycpIHtcbiAgICAhKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJVbmV4cGVjdGVkIFwiICsgYWN0aW9uLnR5cGUgKyBcIiByZWNlaXZlZCBpbiBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIHB1Ymxpc2hXaGlsZURyYWdnaW5nSW5WaXJ0dWFsKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHB1Ymxpc2hlZDogYWN0aW9uLnBheWxvYWRcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ01PVkUnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGFjdGlvbi50eXBlICsgXCIgbm90IHBlcm1pdHRlZCBpbiBwaGFzZSBcIiArIHN0YXRlLnBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9jbGllbnRTZWxlY3Rpb24gPSBhY3Rpb24ucGF5bG9hZC5jbGllbnQ7XG5cbiAgICBpZiAoaXNFcXVhbChfY2xpZW50U2VsZWN0aW9uLCBzdGF0ZS5jdXJyZW50LmNsaWVudC5zZWxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZSh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBjbGllbnRTZWxlY3Rpb246IF9jbGllbnRTZWxlY3Rpb24sXG4gICAgICBpbXBhY3Q6IGlzU25hcHBpbmcoc3RhdGUpID8gc3RhdGUuaW1wYWN0IDogbnVsbFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnVVBEQVRFX0RST1BQQUJMRV9TQ1JPTEwnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHJlbW92ZVNjcm9sbEp1bXBSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykge1xuICAgICAgcmV0dXJuIHJlbW92ZVNjcm9sbEp1bXBSZXF1ZXN0KHN0YXRlKTtcbiAgICB9XG5cbiAgICAhaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBhY3Rpb24udHlwZSArIFwiIG5vdCBwZXJtaXR0ZWQgaW4gcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfYWN0aW9uJHBheWxvYWQyID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIGlkID0gX2FjdGlvbiRwYXlsb2FkMi5pZCxcbiAgICAgICAgbmV3U2Nyb2xsID0gX2FjdGlvbiRwYXlsb2FkMi5uZXdTY3JvbGw7XG4gICAgdmFyIHRhcmdldCA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tpZF07XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHZhciBzY3JvbGxlZCA9IHNjcm9sbERyb3BwYWJsZSh0YXJnZXQsIG5ld1Njcm9sbCk7XG4gICAgcmV0dXJuIHBvc3REcm9wcGFibGVDaGFuZ2Uoc3RhdGUsIHNjcm9sbGVkLCBmYWxzZSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdVUERBVEVfRFJPUFBBQkxFX0lTX0VOQUJMRUQnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQXR0ZW1wdGluZyB0byBtb3ZlIGluIGFuIHVuc3VwcG9ydGVkIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2FjdGlvbiRwYXlsb2FkMyA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICBfaWQgPSBfYWN0aW9uJHBheWxvYWQzLmlkLFxuICAgICAgICBpc0VuYWJsZWQgPSBfYWN0aW9uJHBheWxvYWQzLmlzRW5hYmxlZDtcbiAgICB2YXIgX3RhcmdldCA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tfaWRdO1xuICAgICFfdGFyZ2V0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBmaW5kIERyb3BwYWJsZVtpZDogXCIgKyBfaWQgKyBcIl0gdG8gdG9nZ2xlIGl0cyBlbmFibGVkIHN0YXRlXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKF90YXJnZXQuaXNFbmFibGVkICE9PSBpc0VuYWJsZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlRyeWluZyB0byBzZXQgZHJvcHBhYmxlIGlzRW5hYmxlZCB0byBcIiArIFN0cmluZyhpc0VuYWJsZWQpICsgXCJcXG4gICAgICBidXQgaXQgaXMgYWxyZWFkeSBcIiArIFN0cmluZyhfdGFyZ2V0LmlzRW5hYmxlZCkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciB1cGRhdGVkID0gX2V4dGVuZHMoe30sIF90YXJnZXQsIHtcbiAgICAgIGlzRW5hYmxlZDogaXNFbmFibGVkXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcG9zdERyb3BwYWJsZUNoYW5nZShzdGF0ZSwgdXBkYXRlZCwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdVUERBVEVfRFJPUFBBQkxFX0lTX0NPTUJJTkVfRU5BQkxFRCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgIWlzTW92ZW1lbnRBbGxvd2VkKHN0YXRlKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBdHRlbXB0aW5nIHRvIG1vdmUgaW4gYW4gdW5zdXBwb3J0ZWQgcGhhc2UgXCIgKyBzdGF0ZS5waGFzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBfYWN0aW9uJHBheWxvYWQ0ID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIF9pZDIgPSBfYWN0aW9uJHBheWxvYWQ0LmlkLFxuICAgICAgICBpc0NvbWJpbmVFbmFibGVkID0gX2FjdGlvbiRwYXlsb2FkNC5pc0NvbWJpbmVFbmFibGVkO1xuICAgIHZhciBfdGFyZ2V0MiA9IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tfaWQyXTtcbiAgICAhX3RhcmdldDIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGZpbmQgRHJvcHBhYmxlW2lkOiBcIiArIF9pZDIgKyBcIl0gdG8gdG9nZ2xlIGl0cyBpc0NvbWJpbmVFbmFibGVkIHN0YXRlXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKF90YXJnZXQyLmlzQ29tYmluZUVuYWJsZWQgIT09IGlzQ29tYmluZUVuYWJsZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIlRyeWluZyB0byBzZXQgZHJvcHBhYmxlIGlzQ29tYmluZUVuYWJsZWQgdG8gXCIgKyBTdHJpbmcoaXNDb21iaW5lRW5hYmxlZCkgKyBcIlxcbiAgICAgIGJ1dCBpdCBpcyBhbHJlYWR5IFwiICsgU3RyaW5nKF90YXJnZXQyLmlzQ29tYmluZUVuYWJsZWQpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgX3VwZGF0ZWQgPSBfZXh0ZW5kcyh7fSwgX3RhcmdldDIsIHtcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQ6IGlzQ29tYmluZUVuYWJsZWRcbiAgICB9KTtcblxuICAgIHJldHVybiBwb3N0RHJvcHBhYmxlQ2hhbmdlKHN0YXRlLCBfdXBkYXRlZCwgdHJ1ZSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdNT1ZFX0JZX1dJTkRPV19TQ1JPTEwnKSB7XG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJykge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgICFpc01vdmVtZW50QWxsb3dlZChzdGF0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IG1vdmUgYnkgd2luZG93IGluIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhc3RhdGUuaXNXaW5kb3dTY3JvbGxBbGxvd2VkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnV2luZG93IHNjcm9sbGluZyBpcyBjdXJyZW50bHkgbm90IHN1cHBvcnRlZCBmb3IgZml4ZWQgbGlzdHMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIF9uZXdTY3JvbGwgPSBhY3Rpb24ucGF5bG9hZC5uZXdTY3JvbGw7XG5cbiAgICBpZiAoaXNFcXVhbChzdGF0ZS52aWV3cG9ydC5zY3JvbGwuY3VycmVudCwgX25ld1Njcm9sbCkpIHtcbiAgICAgIHJldHVybiByZW1vdmVTY3JvbGxKdW1wUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuXG4gICAgdmFyIF92aWV3cG9ydCA9IHNjcm9sbFZpZXdwb3J0KHN0YXRlLnZpZXdwb3J0LCBfbmV3U2Nyb2xsKTtcblxuICAgIGlmIChpc1NuYXBwaW5nKHN0YXRlKSkge1xuICAgICAgcmV0dXJuIHJlZnJlc2hTbmFwKHtcbiAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICB2aWV3cG9ydDogX3ZpZXdwb3J0XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHZpZXdwb3J0OiBfdmlld3BvcnRcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChhY3Rpb24udHlwZSA9PT0gJ1VQREFURV9WSUVXUE9SVF9NQVhfU0NST0xMJykge1xuICAgIGlmICghaXNNb3ZlbWVudEFsbG93ZWQoc3RhdGUpKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgdmFyIG1heFNjcm9sbCA9IGFjdGlvbi5wYXlsb2FkLm1heFNjcm9sbDtcblxuICAgIGlmIChpc0VxdWFsKG1heFNjcm9sbCwgc3RhdGUudmlld3BvcnQuc2Nyb2xsLm1heCkpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgd2l0aE1heFNjcm9sbCA9IF9leHRlbmRzKHt9LCBzdGF0ZS52aWV3cG9ydCwge1xuICAgICAgc2Nyb2xsOiBfZXh0ZW5kcyh7fSwgc3RhdGUudmlld3BvcnQuc2Nyb2xsLCB7XG4gICAgICAgIG1heDogbWF4U2Nyb2xsXG4gICAgICB9KVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnRFJBR0dJTkcnXG4gICAgfSwgc3RhdGUsIHtcbiAgICAgIHZpZXdwb3J0OiB3aXRoTWF4U2Nyb2xsXG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdNT1ZFX1VQJyB8fCBhY3Rpb24udHlwZSA9PT0gJ01PVkVfRE9XTicgfHwgYWN0aW9uLnR5cGUgPT09ICdNT1ZFX0xFRlQnIHx8IGFjdGlvbi50eXBlID09PSAnTU9WRV9SSUdIVCcpIHtcbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJyB8fCBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG5cbiAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgYWN0aW9uLnR5cGUgKyBcIiByZWNlaXZlZCB3aGlsZSBub3QgaW4gRFJBR0dJTkcgcGhhc2VcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgdmFyIF9yZXN1bHQyID0gbW92ZUluRGlyZWN0aW9uKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHR5cGU6IGFjdGlvbi50eXBlXG4gICAgfSk7XG5cbiAgICBpZiAoIV9yZXN1bHQyKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZSh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBpbXBhY3Q6IF9yZXN1bHQyLmltcGFjdCxcbiAgICAgIGNsaWVudFNlbGVjdGlvbjogX3Jlc3VsdDIuY2xpZW50U2VsZWN0aW9uLFxuICAgICAgc2Nyb2xsSnVtcFJlcXVlc3Q6IF9yZXN1bHQyLnNjcm9sbEp1bXBSZXF1ZXN0XG4gICAgfSk7XG4gIH1cblxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgdmFyIHJlYXNvbiA9IGFjdGlvbi5wYXlsb2FkLnJlYXNvbjtcbiAgICAhKHN0YXRlLnBoYXNlID09PSAnQ09MTEVDVElORycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgbW92ZSBpbnRvIHRoZSBEUk9QX1BFTkRJTkcgcGhhc2UgZnJvbSB0aGUgQ09MTEVDVElORyBwaGFzZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIHZhciBuZXdTdGF0ZSA9IF9leHRlbmRzKHtcbiAgICAgIHBoYXNlOiAnRFJPUF9QRU5ESU5HJ1xuICAgIH0sIHN0YXRlLCB7XG4gICAgICBwaGFzZTogJ0RST1BfUEVORElORycsXG4gICAgICBpc1dhaXRpbmc6IHRydWUsXG4gICAgICByZWFzb246IHJlYXNvblxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld1N0YXRlO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRFJykge1xuICAgIHZhciBfYWN0aW9uJHBheWxvYWQ1ID0gYWN0aW9uLnBheWxvYWQsXG4gICAgICAgIGNvbXBsZXRlZCA9IF9hY3Rpb24kcGF5bG9hZDUuY29tcGxldGVkLFxuICAgICAgICBkcm9wRHVyYXRpb24gPSBfYWN0aW9uJHBheWxvYWQ1LmRyb3BEdXJhdGlvbixcbiAgICAgICAgbmV3SG9tZUNsaWVudE9mZnNldCA9IF9hY3Rpb24kcGF5bG9hZDUubmV3SG9tZUNsaWVudE9mZnNldDtcbiAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGFuaW1hdGUgZHJvcCBmcm9tIHBoYXNlIFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX3Jlc3VsdDMgPSB7XG4gICAgICBwaGFzZTogJ0RST1BfQU5JTUFUSU5HJyxcbiAgICAgIGNvbXBsZXRlZDogY29tcGxldGVkLFxuICAgICAgZHJvcER1cmF0aW9uOiBkcm9wRHVyYXRpb24sXG4gICAgICBuZXdIb21lQ2xpZW50T2Zmc2V0OiBuZXdIb21lQ2xpZW50T2Zmc2V0LFxuICAgICAgZGltZW5zaW9uczogc3RhdGUuZGltZW5zaW9uc1xuICAgIH07XG4gICAgcmV0dXJuIF9yZXN1bHQzO1xuICB9XG5cbiAgaWYgKGFjdGlvbi50eXBlID09PSAnRFJPUF9DT01QTEVURScpIHtcbiAgICB2YXIgX2NvbXBsZXRlZCA9IGFjdGlvbi5wYXlsb2FkLmNvbXBsZXRlZDtcbiAgICByZXR1cm4ge1xuICAgICAgcGhhc2U6ICdJRExFJyxcbiAgICAgIGNvbXBsZXRlZDogX2NvbXBsZXRlZCxcbiAgICAgIHNob3VsZEZsdXNoOiBmYWxzZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gc3RhdGU7XG59KTtcblxudmFyIGJlZm9yZUluaXRpYWxDYXB0dXJlID0gZnVuY3Rpb24gYmVmb3JlSW5pdGlhbENhcHR1cmUoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCRUZPUkVfSU5JVElBTF9DQVBUVVJFJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGxpZnQgPSBmdW5jdGlvbiBsaWZ0KGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTElGVCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBpbml0aWFsUHVibGlzaCA9IGZ1bmN0aW9uIGluaXRpYWxQdWJsaXNoKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnSU5JVElBTF9QVUJMSVNIJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIHB1Ymxpc2hXaGlsZURyYWdnaW5nID0gZnVuY3Rpb24gcHVibGlzaFdoaWxlRHJhZ2dpbmcoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdQVUJMSVNIX1dISUxFX0RSQUdHSU5HJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGNvbGxlY3Rpb25TdGFydGluZyA9IGZ1bmN0aW9uIGNvbGxlY3Rpb25TdGFydGluZygpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQ09MTEVDVElPTl9TVEFSVElORycsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciB1cGRhdGVEcm9wcGFibGVTY3JvbGwgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVTY3JvbGwoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfRFJPUFBBQkxFX1NDUk9MTCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQgPSBmdW5jdGlvbiB1cGRhdGVEcm9wcGFibGVJc0VuYWJsZWQoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfRFJPUFBBQkxFX0lTX0VOQUJMRUQnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfRFJPUFBBQkxFX0lTX0NPTUJJTkVfRU5BQkxFRCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBtb3ZlID0gZnVuY3Rpb24gbW92ZShhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkUnLFxuICAgIHBheWxvYWQ6IGFyZ3NcbiAgfTtcbn07XG52YXIgbW92ZUJ5V2luZG93U2Nyb2xsID0gZnVuY3Rpb24gbW92ZUJ5V2luZG93U2Nyb2xsKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9CWV9XSU5ET1dfU0NST0xMJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsID0gZnVuY3Rpb24gdXBkYXRlVmlld3BvcnRNYXhTY3JvbGwoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdVUERBVEVfVklFV1BPUlRfTUFYX1NDUk9MTCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBtb3ZlVXAgPSBmdW5jdGlvbiBtb3ZlVXAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfVVAnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgbW92ZURvd24gPSBmdW5jdGlvbiBtb3ZlRG93bigpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9ET1dOJyxcbiAgICBwYXlsb2FkOiBudWxsXG4gIH07XG59O1xudmFyIG1vdmVSaWdodCA9IGZ1bmN0aW9uIG1vdmVSaWdodCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnTU9WRV9SSUdIVCcsXG4gICAgcGF5bG9hZDogbnVsbFxuICB9O1xufTtcbnZhciBtb3ZlTGVmdCA9IGZ1bmN0aW9uIG1vdmVMZWZ0KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdNT1ZFX0xFRlQnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgZmx1c2ggPSBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRkxVU0gnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG52YXIgYW5pbWF0ZURyb3AgPSBmdW5jdGlvbiBhbmltYXRlRHJvcChhcmdzKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0RST1BfQU5JTUFURScsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBjb21wbGV0ZURyb3AgPSBmdW5jdGlvbiBjb21wbGV0ZURyb3AoYXJncykge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdEUk9QX0NPTVBMRVRFJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRFJPUCcsXG4gICAgcGF5bG9hZDogYXJnc1xuICB9O1xufTtcbnZhciBkcm9wUGVuZGluZyA9IGZ1bmN0aW9uIGRyb3BQZW5kaW5nKGFyZ3MpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRFJPUF9QRU5ESU5HJyxcbiAgICBwYXlsb2FkOiBhcmdzXG4gIH07XG59O1xudmFyIGRyb3BBbmltYXRpb25GaW5pc2hlZCA9IGZ1bmN0aW9uIGRyb3BBbmltYXRpb25GaW5pc2hlZCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnRFJPUF9BTklNQVRJT05fRklOSVNIRUQnLFxuICAgIHBheWxvYWQ6IG51bGxcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGNoZWNrSW5kZXhlcyhpbnNpZGVEZXN0aW5hdGlvbikge1xuICBpZiAoaW5zaWRlRGVzdGluYXRpb24ubGVuZ3RoIDw9IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaW5kZXhlcyA9IGluc2lkZURlc3RpbmF0aW9uLm1hcChmdW5jdGlvbiAoZCkge1xuICAgIHJldHVybiBkLmRlc2NyaXB0b3IuaW5kZXg7XG4gIH0pO1xuICB2YXIgZXJyb3JzID0ge307XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBpbmRleGVzW2ldO1xuICAgIHZhciBwcmV2aW91cyA9IGluZGV4ZXNbaSAtIDFdO1xuXG4gICAgaWYgKGN1cnJlbnQgIT09IHByZXZpb3VzICsgMSkge1xuICAgICAgZXJyb3JzW2N1cnJlbnRdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIU9iamVjdC5rZXlzKGVycm9ycykubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZvcm1hdHRlZCA9IGluZGV4ZXMubWFwKGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciBoYXNFcnJvciA9IEJvb2xlYW4oZXJyb3JzW2luZGV4XSk7XG4gICAgcmV0dXJuIGhhc0Vycm9yID8gXCJbXFx1RDgzRFxcdUREMjVcIiArIGluZGV4ICsgXCJdXCIgOiBcIlwiICsgaW5kZXg7XG4gIH0pLmpvaW4oJywgJyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgRGV0ZWN0ZWQgbm9uLWNvbnNlY3V0aXZlIDxEcmFnZ2FibGUgLz4gaW5kZXhlcy5cXG5cXG4gICAgKFRoaXMgY2FuIGNhdXNlIHVuZXhwZWN0ZWQgYnVncylcXG5cXG4gICAgXCIgKyBmb3JtYXR0ZWQgKyBcIlxcbiAgXCIpIDogdm9pZCAwO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURpbWVuc2lvbnMoY3JpdGljYWwsIGRpbWVuc2lvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgaW5zaWRlRGVzdGluYXRpb24gPSBnZXREcmFnZ2FibGVzSW5zaWRlRHJvcHBhYmxlKGNyaXRpY2FsLmRyb3BwYWJsZS5pZCwgZGltZW5zaW9ucy5kcmFnZ2FibGVzKTtcbiAgICBjaGVja0luZGV4ZXMoaW5zaWRlRGVzdGluYXRpb24pO1xuICB9XG59XG5cbnZhciBsaWZ0JDEgPSAoZnVuY3Rpb24gKG1hcnNoYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnTElGVCcpIHtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9hY3Rpb24kcGF5bG9hZCA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgaWQgPSBfYWN0aW9uJHBheWxvYWQuaWQsXG4gICAgICAgICAgICBjbGllbnRTZWxlY3Rpb24gPSBfYWN0aW9uJHBheWxvYWQuY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICAgICAgbW92ZW1lbnRNb2RlID0gX2FjdGlvbiRwYXlsb2FkLm1vdmVtZW50TW9kZTtcbiAgICAgICAgdmFyIGluaXRpYWwgPSBnZXRTdGF0ZSgpO1xuXG4gICAgICAgIGlmIChpbml0aWFsLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICAgICAgZGlzcGF0Y2goY29tcGxldGVEcm9wKHtcbiAgICAgICAgICAgIGNvbXBsZXRlZDogaW5pdGlhbC5jb21wbGV0ZWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICAhKGdldFN0YXRlKCkucGhhc2UgPT09ICdJRExFJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmV4cGVjdGVkIHBoYXNlIHRvIHN0YXJ0IGEgZHJhZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgZGlzcGF0Y2goZmx1c2goKSk7XG4gICAgICAgIGRpc3BhdGNoKGJlZm9yZUluaXRpYWxDYXB0dXJlKHtcbiAgICAgICAgICBkcmFnZ2FibGVJZDogaWQsXG4gICAgICAgICAgbW92ZW1lbnRNb2RlOiBtb3ZlbWVudE1vZGVcbiAgICAgICAgfSkpO1xuICAgICAgICB2YXIgc2Nyb2xsT3B0aW9ucyA9IHtcbiAgICAgICAgICBzaG91bGRQdWJsaXNoSW1tZWRpYXRlbHk6IG1vdmVtZW50TW9kZSA9PT0gJ1NOQVAnXG4gICAgICAgIH07XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgIGRyYWdnYWJsZUlkOiBpZCxcbiAgICAgICAgICBzY3JvbGxPcHRpb25zOiBzY3JvbGxPcHRpb25zXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIF9tYXJzaGFsJHN0YXJ0UHVibGlzaCA9IG1hcnNoYWwuc3RhcnRQdWJsaXNoaW5nKHJlcXVlc3QpLFxuICAgICAgICAgICAgY3JpdGljYWwgPSBfbWFyc2hhbCRzdGFydFB1Ymxpc2guY3JpdGljYWwsXG4gICAgICAgICAgICBkaW1lbnNpb25zID0gX21hcnNoYWwkc3RhcnRQdWJsaXNoLmRpbWVuc2lvbnMsXG4gICAgICAgICAgICB2aWV3cG9ydCA9IF9tYXJzaGFsJHN0YXJ0UHVibGlzaC52aWV3cG9ydDtcblxuICAgICAgICB2YWxpZGF0ZURpbWVuc2lvbnMoY3JpdGljYWwsIGRpbWVuc2lvbnMpO1xuICAgICAgICBkaXNwYXRjaChpbml0aWFsUHVibGlzaCh7XG4gICAgICAgICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgICAgICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgICAgICAgY2xpZW50U2VsZWN0aW9uOiBjbGllbnRTZWxlY3Rpb24sXG4gICAgICAgICAgbW92ZW1lbnRNb2RlOiBtb3ZlbWVudE1vZGUsXG4gICAgICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0XG4gICAgICAgIH0pKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgc3R5bGUgPSAoZnVuY3Rpb24gKG1hcnNoYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAgICAgICBtYXJzaGFsLmRyYWdnaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdEUk9QX0FOSU1BVEUnKSB7XG4gICAgICAgICAgbWFyc2hhbC5kcm9wcGluZyhhY3Rpb24ucGF5bG9hZC5jb21wbGV0ZWQucmVzdWx0LnJlYXNvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdGTFVTSCcgfHwgYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJykge1xuICAgICAgICAgIG1hcnNoYWwucmVzdGluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBjdXJ2ZXMgPSB7XG4gIG91dE9mVGhlV2F5OiAnY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSknLFxuICBkcm9wOiAnY3ViaWMtYmV6aWVyKC4yLDEsLjEsMSknXG59O1xudmFyIGNvbWJpbmUgPSB7XG4gIG9wYWNpdHk6IHtcbiAgICBkcm9wOiAwLFxuICAgIGNvbWJpbmluZzogMC43XG4gIH0sXG4gIHNjYWxlOiB7XG4gICAgZHJvcDogMC43NVxuICB9XG59O1xudmFyIHRpbWluZ3MgPSB7XG4gIG91dE9mVGhlV2F5OiAwLjIsXG4gIG1pbkRyb3BUaW1lOiAwLjMzLFxuICBtYXhEcm9wVGltZTogMC41NVxufTtcbnZhciBvdXRPZlRoZVdheVRpbWluZyA9IHRpbWluZ3Mub3V0T2ZUaGVXYXkgKyBcInMgXCIgKyBjdXJ2ZXMub3V0T2ZUaGVXYXk7XG52YXIgdHJhbnNpdGlvbnMgPSB7XG4gIGZsdWlkOiBcIm9wYWNpdHkgXCIgKyBvdXRPZlRoZVdheVRpbWluZyxcbiAgc25hcDogXCJ0cmFuc2Zvcm0gXCIgKyBvdXRPZlRoZVdheVRpbWluZyArIFwiLCBvcGFjaXR5IFwiICsgb3V0T2ZUaGVXYXlUaW1pbmcsXG4gIGRyb3A6IGZ1bmN0aW9uIGRyb3AoZHVyYXRpb24pIHtcbiAgICB2YXIgdGltaW5nID0gZHVyYXRpb24gKyBcInMgXCIgKyBjdXJ2ZXMuZHJvcDtcbiAgICByZXR1cm4gXCJ0cmFuc2Zvcm0gXCIgKyB0aW1pbmcgKyBcIiwgb3BhY2l0eSBcIiArIHRpbWluZztcbiAgfSxcbiAgb3V0T2ZUaGVXYXk6IFwidHJhbnNmb3JtIFwiICsgb3V0T2ZUaGVXYXlUaW1pbmcsXG4gIHBsYWNlaG9sZGVyOiBcImhlaWdodCBcIiArIG91dE9mVGhlV2F5VGltaW5nICsgXCIsIHdpZHRoIFwiICsgb3V0T2ZUaGVXYXlUaW1pbmcgKyBcIiwgbWFyZ2luIFwiICsgb3V0T2ZUaGVXYXlUaW1pbmdcbn07XG5cbnZhciBtb3ZlVG8gPSBmdW5jdGlvbiBtb3ZlVG8ob2Zmc2V0KSB7XG4gIHJldHVybiBpc0VxdWFsKG9mZnNldCwgb3JpZ2luKSA/IG51bGwgOiBcInRyYW5zbGF0ZShcIiArIG9mZnNldC54ICsgXCJweCwgXCIgKyBvZmZzZXQueSArIFwicHgpXCI7XG59O1xuXG52YXIgdHJhbnNmb3JtcyA9IHtcbiAgbW92ZVRvOiBtb3ZlVG8sXG4gIGRyb3A6IGZ1bmN0aW9uIGRyb3Aob2Zmc2V0LCBpc0NvbWJpbmluZykge1xuICAgIHZhciB0cmFuc2xhdGUgPSBtb3ZlVG8ob2Zmc2V0KTtcblxuICAgIGlmICghdHJhbnNsYXRlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIWlzQ29tYmluaW5nKSB7XG4gICAgICByZXR1cm4gdHJhbnNsYXRlO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2xhdGUgKyBcIiBzY2FsZShcIiArIGNvbWJpbmUuc2NhbGUuZHJvcCArIFwiKVwiO1xuICB9XG59O1xuXG52YXIgbWluRHJvcFRpbWUgPSB0aW1pbmdzLm1pbkRyb3BUaW1lLFxuICAgIG1heERyb3BUaW1lID0gdGltaW5ncy5tYXhEcm9wVGltZTtcbnZhciBkcm9wVGltZVJhbmdlID0gbWF4RHJvcFRpbWUgLSBtaW5Ecm9wVGltZTtcbnZhciBtYXhEcm9wVGltZUF0RGlzdGFuY2UgPSAxNTAwO1xudmFyIGNhbmNlbERyb3BNb2RpZmllciA9IDAuNjtcbnZhciBnZXREcm9wRHVyYXRpb24gPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGN1cnJlbnQgPSBfcmVmLmN1cnJlbnQsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICByZWFzb24gPSBfcmVmLnJlYXNvbjtcbiAgdmFyIGRpc3RhbmNlJDEgPSBkaXN0YW5jZShjdXJyZW50LCBkZXN0aW5hdGlvbik7XG5cbiAgaWYgKGRpc3RhbmNlJDEgPD0gMCkge1xuICAgIHJldHVybiBtaW5Ecm9wVGltZTtcbiAgfVxuXG4gIGlmIChkaXN0YW5jZSQxID49IG1heERyb3BUaW1lQXREaXN0YW5jZSkge1xuICAgIHJldHVybiBtYXhEcm9wVGltZTtcbiAgfVxuXG4gIHZhciBwZXJjZW50YWdlID0gZGlzdGFuY2UkMSAvIG1heERyb3BUaW1lQXREaXN0YW5jZTtcbiAgdmFyIGR1cmF0aW9uID0gbWluRHJvcFRpbWUgKyBkcm9wVGltZVJhbmdlICogcGVyY2VudGFnZTtcbiAgdmFyIHdpdGhEdXJhdGlvbiA9IHJlYXNvbiA9PT0gJ0NBTkNFTCcgPyBkdXJhdGlvbiAqIGNhbmNlbERyb3BNb2RpZmllciA6IGR1cmF0aW9uO1xuICByZXR1cm4gTnVtYmVyKHdpdGhEdXJhdGlvbi50b0ZpeGVkKDIpKTtcbn0pO1xuXG52YXIgZ2V0TmV3SG9tZUNsaWVudE9mZnNldCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgaW1wYWN0ID0gX3JlZi5pbXBhY3QsXG4gICAgICBkcmFnZ2FibGUgPSBfcmVmLmRyYWdnYWJsZSxcbiAgICAgIGRpbWVuc2lvbnMgPSBfcmVmLmRpbWVuc2lvbnMsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBhZnRlckNyaXRpY2FsID0gX3JlZi5hZnRlckNyaXRpY2FsO1xuICB2YXIgZHJhZ2dhYmxlcyA9IGRpbWVuc2lvbnMuZHJhZ2dhYmxlcyxcbiAgICAgIGRyb3BwYWJsZXMgPSBkaW1lbnNpb25zLmRyb3BwYWJsZXM7XG4gIHZhciBkcm9wcGFibGVJZCA9IHdoYXRJc0RyYWdnZWRPdmVyKGltcGFjdCk7XG4gIHZhciBkZXN0aW5hdGlvbiA9IGRyb3BwYWJsZUlkID8gZHJvcHBhYmxlc1tkcm9wcGFibGVJZF0gOiBudWxsO1xuICB2YXIgaG9tZSA9IGRyb3BwYWJsZXNbZHJhZ2dhYmxlLmRlc2NyaXB0b3IuZHJvcHBhYmxlSWRdO1xuICB2YXIgbmV3Q2xpZW50Q2VudGVyID0gZ2V0Q2xpZW50Qm9yZGVyQm94Q2VudGVyKHtcbiAgICBpbXBhY3Q6IGltcGFjdCxcbiAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICBkcmFnZ2FibGVzOiBkcmFnZ2FibGVzLFxuICAgIGFmdGVyQ3JpdGljYWw6IGFmdGVyQ3JpdGljYWwsXG4gICAgZHJvcHBhYmxlOiBkZXN0aW5hdGlvbiB8fCBob21lLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9KTtcbiAgdmFyIG9mZnNldCA9IHN1YnRyYWN0KG5ld0NsaWVudENlbnRlciwgZHJhZ2dhYmxlLmNsaWVudC5ib3JkZXJCb3guY2VudGVyKTtcbiAgcmV0dXJuIG9mZnNldDtcbn0pO1xuXG52YXIgZ2V0RHJvcEltcGFjdCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJhZ2dhYmxlcyA9IF9yZWYuZHJhZ2dhYmxlcyxcbiAgICAgIHJlYXNvbiA9IF9yZWYucmVhc29uLFxuICAgICAgbGFzdEltcGFjdCA9IF9yZWYubGFzdEltcGFjdCxcbiAgICAgIGhvbWUgPSBfcmVmLmhvbWUsXG4gICAgICB2aWV3cG9ydCA9IF9yZWYudmlld3BvcnQsXG4gICAgICBvbkxpZnRJbXBhY3QgPSBfcmVmLm9uTGlmdEltcGFjdDtcblxuICBpZiAoIWxhc3RJbXBhY3QuYXQgfHwgcmVhc29uICE9PSAnRFJPUCcpIHtcbiAgICB2YXIgcmVjb21wdXRlZEhvbWVJbXBhY3QgPSByZWNvbXB1dGUoe1xuICAgICAgZHJhZ2dhYmxlczogZHJhZ2dhYmxlcyxcbiAgICAgIGltcGFjdDogb25MaWZ0SW1wYWN0LFxuICAgICAgZGVzdGluYXRpb246IGhvbWUsXG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICBmb3JjZVNob3VsZEFuaW1hdGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgaW1wYWN0OiByZWNvbXB1dGVkSG9tZUltcGFjdCxcbiAgICAgIGRpZERyb3BJbnNpZGVEcm9wcGFibGU6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIGlmIChsYXN0SW1wYWN0LmF0LnR5cGUgPT09ICdSRU9SREVSJykge1xuICAgIHJldHVybiB7XG4gICAgICBpbXBhY3Q6IGxhc3RJbXBhY3QsXG4gICAgICBkaWREcm9wSW5zaWRlRHJvcHBhYmxlOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIHZhciB3aXRob3V0TW92ZW1lbnQgPSBfZXh0ZW5kcyh7fSwgbGFzdEltcGFjdCwge1xuICAgIGRpc3BsYWNlZDogZW1wdHlHcm91cHNcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBpbXBhY3Q6IHdpdGhvdXRNb3ZlbWVudCxcbiAgICBkaWREcm9wSW5zaWRlRHJvcHBhYmxlOiB0cnVlXG4gIH07XG59KTtcblxudmFyIGRyb3AkMSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlLFxuICAgICAgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoO1xuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnRFJPUCcpIHtcbiAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICB2YXIgcmVhc29uID0gYWN0aW9uLnBheWxvYWQucmVhc29uO1xuXG4gICAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdDT0xMRUNUSU5HJykge1xuICAgICAgICBkaXNwYXRjaChkcm9wUGVuZGluZyh7XG4gICAgICAgICAgcmVhc29uOiByZWFzb25cbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0lETEUnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzV2FpdGluZ0ZvckRyb3AgPSBzdGF0ZS5waGFzZSA9PT0gJ0RST1BfUEVORElORycgJiYgc3RhdGUuaXNXYWl0aW5nO1xuICAgICAgISFpc1dhaXRpbmdGb3JEcm9wID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBEUk9QIGFjdGlvbiBvY2N1cnJlZCB3aGlsZSBEUk9QX1BFTkRJTkcgYW5kIHN0aWxsIHdhaXRpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnIHx8IHN0YXRlLnBoYXNlID09PSAnRFJPUF9QRU5ESU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGRyb3AgaW4gcGhhc2U6IFwiICsgc3RhdGUucGhhc2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBjcml0aWNhbCA9IHN0YXRlLmNyaXRpY2FsO1xuICAgICAgdmFyIGRpbWVuc2lvbnMgPSBzdGF0ZS5kaW1lbnNpb25zO1xuICAgICAgdmFyIGRyYWdnYWJsZSA9IGRpbWVuc2lvbnMuZHJhZ2dhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWRdO1xuXG4gICAgICB2YXIgX2dldERyb3BJbXBhY3QgPSBnZXREcm9wSW1wYWN0KHtcbiAgICAgICAgcmVhc29uOiByZWFzb24sXG4gICAgICAgIGxhc3RJbXBhY3Q6IHN0YXRlLmltcGFjdCxcbiAgICAgICAgYWZ0ZXJDcml0aWNhbDogc3RhdGUuYWZ0ZXJDcml0aWNhbCxcbiAgICAgICAgb25MaWZ0SW1wYWN0OiBzdGF0ZS5vbkxpZnRJbXBhY3QsXG4gICAgICAgIGhvbWU6IHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tzdGF0ZS5jcml0aWNhbC5kcm9wcGFibGUuaWRdLFxuICAgICAgICB2aWV3cG9ydDogc3RhdGUudmlld3BvcnQsXG4gICAgICAgIGRyYWdnYWJsZXM6IHN0YXRlLmRpbWVuc2lvbnMuZHJhZ2dhYmxlc1xuICAgICAgfSksXG4gICAgICAgICAgaW1wYWN0ID0gX2dldERyb3BJbXBhY3QuaW1wYWN0LFxuICAgICAgICAgIGRpZERyb3BJbnNpZGVEcm9wcGFibGUgPSBfZ2V0RHJvcEltcGFjdC5kaWREcm9wSW5zaWRlRHJvcHBhYmxlO1xuXG4gICAgICB2YXIgZGVzdGluYXRpb24gPSBkaWREcm9wSW5zaWRlRHJvcHBhYmxlID8gdHJ5R2V0RGVzdGluYXRpb24oaW1wYWN0KSA6IG51bGw7XG4gICAgICB2YXIgY29tYmluZSA9IGRpZERyb3BJbnNpZGVEcm9wcGFibGUgPyB0cnlHZXRDb21iaW5lKGltcGFjdCkgOiBudWxsO1xuICAgICAgdmFyIHNvdXJjZSA9IHtcbiAgICAgICAgaW5kZXg6IGNyaXRpY2FsLmRyYWdnYWJsZS5pbmRleCxcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGNyaXRpY2FsLmRyb3BwYWJsZS5pZFxuICAgICAgfTtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2FibGUuZGVzY3JpcHRvci5pZCxcbiAgICAgICAgdHlwZTogZHJhZ2dhYmxlLmRlc2NyaXB0b3IudHlwZSxcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIHJlYXNvbjogcmVhc29uLFxuICAgICAgICBtb2RlOiBzdGF0ZS5tb3ZlbWVudE1vZGUsXG4gICAgICAgIGRlc3RpbmF0aW9uOiBkZXN0aW5hdGlvbixcbiAgICAgICAgY29tYmluZTogY29tYmluZVxuICAgICAgfTtcbiAgICAgIHZhciBuZXdIb21lQ2xpZW50T2Zmc2V0ID0gZ2V0TmV3SG9tZUNsaWVudE9mZnNldCh7XG4gICAgICAgIGltcGFjdDogaW1wYWN0LFxuICAgICAgICBkcmFnZ2FibGU6IGRyYWdnYWJsZSxcbiAgICAgICAgZGltZW5zaW9uczogZGltZW5zaW9ucyxcbiAgICAgICAgdmlld3BvcnQ6IHN0YXRlLnZpZXdwb3J0LFxuICAgICAgICBhZnRlckNyaXRpY2FsOiBzdGF0ZS5hZnRlckNyaXRpY2FsXG4gICAgICB9KTtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSB7XG4gICAgICAgIGNyaXRpY2FsOiBzdGF0ZS5jcml0aWNhbCxcbiAgICAgICAgYWZ0ZXJDcml0aWNhbDogc3RhdGUuYWZ0ZXJDcml0aWNhbCxcbiAgICAgICAgcmVzdWx0OiByZXN1bHQsXG4gICAgICAgIGltcGFjdDogaW1wYWN0XG4gICAgICB9O1xuICAgICAgdmFyIGlzQW5pbWF0aW9uUmVxdWlyZWQgPSAhaXNFcXVhbChzdGF0ZS5jdXJyZW50LmNsaWVudC5vZmZzZXQsIG5ld0hvbWVDbGllbnRPZmZzZXQpIHx8IEJvb2xlYW4ocmVzdWx0LmNvbWJpbmUpO1xuXG4gICAgICBpZiAoIWlzQW5pbWF0aW9uUmVxdWlyZWQpIHtcbiAgICAgICAgZGlzcGF0Y2goY29tcGxldGVEcm9wKHtcbiAgICAgICAgICBjb21wbGV0ZWQ6IGNvbXBsZXRlZFxuICAgICAgICB9KSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRyb3BEdXJhdGlvbiA9IGdldERyb3BEdXJhdGlvbih7XG4gICAgICAgIGN1cnJlbnQ6IHN0YXRlLmN1cnJlbnQuY2xpZW50Lm9mZnNldCxcbiAgICAgICAgZGVzdGluYXRpb246IG5ld0hvbWVDbGllbnRPZmZzZXQsXG4gICAgICAgIHJlYXNvbjogcmVhc29uXG4gICAgICB9KTtcbiAgICAgIHZhciBhcmdzID0ge1xuICAgICAgICBuZXdIb21lQ2xpZW50T2Zmc2V0OiBuZXdIb21lQ2xpZW50T2Zmc2V0LFxuICAgICAgICBkcm9wRHVyYXRpb246IGRyb3BEdXJhdGlvbixcbiAgICAgICAgY29tcGxldGVkOiBjb21wbGV0ZWRcbiAgICAgIH07XG4gICAgICBkaXNwYXRjaChhbmltYXRlRHJvcChhcmdzKSk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZ2V0V2luZG93U2Nyb2xsID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogd2luZG93LnBhZ2VZT2Zmc2V0XG4gIH07XG59KTtcblxuZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmluZGluZyh1cGRhdGUpIHtcbiAgcmV0dXJuIHtcbiAgICBldmVudE5hbWU6ICdzY3JvbGwnLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0sXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSB3aW5kb3cgJiYgZXZlbnQudGFyZ2V0ICE9PSB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbExpc3RlbmVyKF9yZWYpIHtcbiAgdmFyIG9uV2luZG93U2Nyb2xsID0gX3JlZi5vbldpbmRvd1Njcm9sbDtcblxuICBmdW5jdGlvbiB1cGRhdGVTY3JvbGwoKSB7XG4gICAgb25XaW5kb3dTY3JvbGwoZ2V0V2luZG93U2Nyb2xsKCkpO1xuICB9XG5cbiAgdmFyIHNjaGVkdWxlZCA9IHJhZlNjaGQodXBkYXRlU2Nyb2xsKTtcbiAgdmFyIGJpbmRpbmcgPSBnZXRXaW5kb3dTY3JvbGxCaW5kaW5nKHNjaGVkdWxlZCk7XG4gIHZhciB1bmJpbmQgPSBub29wO1xuXG4gIGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgIHJldHVybiB1bmJpbmQgIT09IG5vb3A7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAhIWlzQWN0aXZlKCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RhcnQgc2Nyb2xsIGxpc3RlbmVyIHdoZW4gYWxyZWFkeSBhY3RpdmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdW5iaW5kID0gYmluZEV2ZW50cyh3aW5kb3csIFtiaW5kaW5nXSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgICFpc0FjdGl2ZSgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHN0b3Agc2Nyb2xsIGxpc3RlbmVyIHdoZW4gbm90IGFjdGl2ZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBzY2hlZHVsZWQuY2FuY2VsKCk7XG4gICAgdW5iaW5kKCk7XG4gICAgdW5iaW5kID0gbm9vcDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIHN0b3A6IHN0b3AsXG4gICAgaXNBY3RpdmU6IGlzQWN0aXZlXG4gIH07XG59XG5cbnZhciBzaG91bGRFbmQgPSBmdW5jdGlvbiBzaG91bGRFbmQoYWN0aW9uKSB7XG4gIHJldHVybiBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0ZMVVNIJztcbn07XG5cbnZhciBzY3JvbGxMaXN0ZW5lciA9IChmdW5jdGlvbiAoc3RvcmUpIHtcbiAgdmFyIGxpc3RlbmVyID0gZ2V0U2Nyb2xsTGlzdGVuZXIoe1xuICAgIG9uV2luZG93U2Nyb2xsOiBmdW5jdGlvbiBvbldpbmRvd1Njcm9sbChuZXdTY3JvbGwpIHtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKG1vdmVCeVdpbmRvd1Njcm9sbCh7XG4gICAgICAgIG5ld1Njcm9sbDogbmV3U2Nyb2xsXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIGlmICghbGlzdGVuZXIuaXNBY3RpdmUoKSAmJiBhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAgICAgbGlzdGVuZXIuc3RhcnQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpc3RlbmVyLmlzQWN0aXZlKCkgJiYgc2hvdWxkRW5kKGFjdGlvbikpIHtcbiAgICAgICAgbGlzdGVuZXIuc3RvcCgpO1xuICAgICAgfVxuXG4gICAgICBuZXh0KGFjdGlvbik7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZ2V0RXhwaXJpbmdBbm5vdW5jZSA9IChmdW5jdGlvbiAoYW5ub3VuY2UpIHtcbiAgdmFyIHdhc0NhbGxlZCA9IGZhbHNlO1xuICB2YXIgaXNFeHBpcmVkID0gZmFsc2U7XG4gIHZhciB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpc0V4cGlyZWQgPSB0cnVlO1xuICB9KTtcblxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24gcmVzdWx0KG1lc3NhZ2UpIHtcbiAgICBpZiAod2FzQ2FsbGVkKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdBbm5vdW5jZW1lbnQgYWxyZWFkeSBtYWRlLiBOb3QgbWFraW5nIGEgc2Vjb25kIGFubm91bmNlbWVudCcpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0V4cGlyZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICAgIEFubm91bmNlbWVudHMgY2Fubm90IGJlIG1hZGUgYXN5bmNocm9ub3VzbHkuXFxuICAgICAgICBEZWZhdWx0IG1lc3NhZ2UgaGFzIGFscmVhZHkgYmVlbiBhbm5vdW5jZWQuXFxuICAgICAgXCIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhc0NhbGxlZCA9IHRydWU7XG4gICAgYW5ub3VuY2UobWVzc2FnZSk7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gIH07XG5cbiAgcmVzdWx0Lndhc0NhbGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gd2FzQ2FsbGVkO1xuICB9O1xuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxudmFyIGdldEFzeW5jTWFyc2hhbCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBlbnRyaWVzID0gW107XG5cbiAgdmFyIGV4ZWN1dGUgPSBmdW5jdGlvbiBleGVjdXRlKHRpbWVySWQpIHtcbiAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXgoZW50cmllcywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLnRpbWVySWQgPT09IHRpbWVySWQ7XG4gICAgfSk7XG4gICAgIShpbmRleCAhPT0gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgdGltZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgICB2YXIgX2VudHJpZXMkc3BsaWNlID0gZW50cmllcy5zcGxpY2UoaW5kZXgsIDEpLFxuICAgICAgICBlbnRyeSA9IF9lbnRyaWVzJHNwbGljZVswXTtcblxuICAgIGVudHJ5LmNhbGxiYWNrKCk7XG4gIH07XG5cbiAgdmFyIGFkZCA9IGZ1bmN0aW9uIGFkZChmbikge1xuICAgIHZhciB0aW1lcklkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZXhlY3V0ZSh0aW1lcklkKTtcbiAgICB9KTtcbiAgICB2YXIgZW50cnkgPSB7XG4gICAgICB0aW1lcklkOiB0aW1lcklkLFxuICAgICAgY2FsbGJhY2s6IGZuXG4gICAgfTtcbiAgICBlbnRyaWVzLnB1c2goZW50cnkpO1xuICB9O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmICghZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2hhbGxvdyA9IFtdLmNvbmNhdChlbnRyaWVzKTtcbiAgICBlbnRyaWVzLmxlbmd0aCA9IDA7XG4gICAgc2hhbGxvdy5mb3JFYWNoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgY2xlYXJUaW1lb3V0KGVudHJ5LnRpbWVySWQpO1xuICAgICAgZW50cnkuY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGFkZDogYWRkLFxuICAgIGZsdXNoOiBmbHVzaFxuICB9O1xufSk7XG5cbnZhciBhcmVMb2NhdGlvbnNFcXVhbCA9IGZ1bmN0aW9uIGFyZUxvY2F0aW9uc0VxdWFsKGZpcnN0LCBzZWNvbmQpIHtcbiAgaWYgKGZpcnN0ID09IG51bGwgJiYgc2Vjb25kID09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChmaXJzdCA9PSBudWxsIHx8IHNlY29uZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZpcnN0LmRyb3BwYWJsZUlkID09PSBzZWNvbmQuZHJvcHBhYmxlSWQgJiYgZmlyc3QuaW5kZXggPT09IHNlY29uZC5pbmRleDtcbn07XG52YXIgaXNDb21iaW5lRXF1YWwgPSBmdW5jdGlvbiBpc0NvbWJpbmVFcXVhbChmaXJzdCwgc2Vjb25kKSB7XG4gIGlmIChmaXJzdCA9PSBudWxsICYmIHNlY29uZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZmlyc3QgPT0gbnVsbCB8fCBzZWNvbmQgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBmaXJzdC5kcmFnZ2FibGVJZCA9PT0gc2Vjb25kLmRyYWdnYWJsZUlkICYmIGZpcnN0LmRyb3BwYWJsZUlkID09PSBzZWNvbmQuZHJvcHBhYmxlSWQ7XG59O1xudmFyIGlzQ3JpdGljYWxFcXVhbCA9IGZ1bmN0aW9uIGlzQ3JpdGljYWxFcXVhbChmaXJzdCwgc2Vjb25kKSB7XG4gIGlmIChmaXJzdCA9PT0gc2Vjb25kKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgaXNEcmFnZ2FibGVFcXVhbCA9IGZpcnN0LmRyYWdnYWJsZS5pZCA9PT0gc2Vjb25kLmRyYWdnYWJsZS5pZCAmJiBmaXJzdC5kcmFnZ2FibGUuZHJvcHBhYmxlSWQgPT09IHNlY29uZC5kcmFnZ2FibGUuZHJvcHBhYmxlSWQgJiYgZmlyc3QuZHJhZ2dhYmxlLnR5cGUgPT09IHNlY29uZC5kcmFnZ2FibGUudHlwZSAmJiBmaXJzdC5kcmFnZ2FibGUuaW5kZXggPT09IHNlY29uZC5kcmFnZ2FibGUuaW5kZXg7XG4gIHZhciBpc0Ryb3BwYWJsZUVxdWFsID0gZmlyc3QuZHJvcHBhYmxlLmlkID09PSBzZWNvbmQuZHJvcHBhYmxlLmlkICYmIGZpcnN0LmRyb3BwYWJsZS50eXBlID09PSBzZWNvbmQuZHJvcHBhYmxlLnR5cGU7XG4gIHJldHVybiBpc0RyYWdnYWJsZUVxdWFsICYmIGlzRHJvcHBhYmxlRXF1YWw7XG59O1xuXG52YXIgd2l0aFRpbWluZ3MgPSBmdW5jdGlvbiB3aXRoVGltaW5ncyhrZXksIGZuKSB7XG4gIHN0YXJ0KCk7XG4gIGZuKCk7XG4gIGZpbmlzaCgpO1xufTtcblxudmFyIGdldERyYWdTdGFydCA9IGZ1bmN0aW9uIGdldERyYWdTdGFydChjcml0aWNhbCwgbW9kZSkge1xuICByZXR1cm4ge1xuICAgIGRyYWdnYWJsZUlkOiBjcml0aWNhbC5kcmFnZ2FibGUuaWQsXG4gICAgdHlwZTogY3JpdGljYWwuZHJvcHBhYmxlLnR5cGUsXG4gICAgc291cmNlOiB7XG4gICAgICBkcm9wcGFibGVJZDogY3JpdGljYWwuZHJvcHBhYmxlLmlkLFxuICAgICAgaW5kZXg6IGNyaXRpY2FsLmRyYWdnYWJsZS5pbmRleFxuICAgIH0sXG4gICAgbW9kZTogbW9kZVxuICB9O1xufTtcblxudmFyIGV4ZWN1dGUgPSBmdW5jdGlvbiBleGVjdXRlKHJlc3BvbmRlciwgZGF0YSwgYW5ub3VuY2UsIGdldERlZmF1bHRNZXNzYWdlKSB7XG4gIGlmICghcmVzcG9uZGVyKSB7XG4gICAgYW5ub3VuY2UoZ2V0RGVmYXVsdE1lc3NhZ2UoZGF0YSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB3aWxsRXhwaXJlID0gZ2V0RXhwaXJpbmdBbm5vdW5jZShhbm5vdW5jZSk7XG4gIHZhciBwcm92aWRlZCA9IHtcbiAgICBhbm5vdW5jZTogd2lsbEV4cGlyZVxuICB9O1xuICByZXNwb25kZXIoZGF0YSwgcHJvdmlkZWQpO1xuXG4gIGlmICghd2lsbEV4cGlyZS53YXNDYWxsZWQoKSkge1xuICAgIGFubm91bmNlKGdldERlZmF1bHRNZXNzYWdlKGRhdGEpKTtcbiAgfVxufTtcblxudmFyIGdldFB1Ymxpc2hlciA9IChmdW5jdGlvbiAoZ2V0UmVzcG9uZGVycywgYW5ub3VuY2UpIHtcbiAgdmFyIGFzeW5jTWFyc2hhbCA9IGdldEFzeW5jTWFyc2hhbCgpO1xuICB2YXIgZHJhZ2dpbmcgPSBudWxsO1xuXG4gIHZhciBiZWZvcmVDYXB0dXJlID0gZnVuY3Rpb24gYmVmb3JlQ2FwdHVyZShkcmFnZ2FibGVJZCwgbW9kZSkge1xuICAgICEhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmlyZSBvbkJlZm9yZUNhcHR1cmUgYXMgYSBkcmFnIHN0YXJ0IGhhcyBhbHJlYWR5IGJlZW4gcHVibGlzaGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHdpdGhUaW1pbmdzKCdvbkJlZm9yZUNhcHR1cmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZm4gPSBnZXRSZXNwb25kZXJzKCkub25CZWZvcmVDYXB0dXJlO1xuXG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgdmFyIGJlZm9yZSA9IHtcbiAgICAgICAgICBkcmFnZ2FibGVJZDogZHJhZ2dhYmxlSWQsXG4gICAgICAgICAgbW9kZTogbW9kZVxuICAgICAgICB9O1xuICAgICAgICBmbihiZWZvcmUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBiZWZvcmVTdGFydCA9IGZ1bmN0aW9uIGJlZm9yZVN0YXJ0KGNyaXRpY2FsLCBtb2RlKSB7XG4gICAgISFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaXJlIG9uQmVmb3JlRHJhZ1N0YXJ0IGFzIGEgZHJhZyBzdGFydCBoYXMgYWxyZWFkeSBiZWVuIHB1Ymxpc2hlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB3aXRoVGltaW5ncygnb25CZWZvcmVEcmFnU3RhcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZm4gPSBnZXRSZXNwb25kZXJzKCkub25CZWZvcmVEcmFnU3RhcnQ7XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICBmbihnZXREcmFnU3RhcnQoY3JpdGljYWwsIG1vZGUpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgc3RhcnQgPSBmdW5jdGlvbiBzdGFydChjcml0aWNhbCwgbW9kZSkge1xuICAgICEhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmlyZSBvbkJlZm9yZURyYWdTdGFydCBhcyBhIGRyYWcgc3RhcnQgaGFzIGFscmVhZHkgYmVlbiBwdWJsaXNoZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGRhdGEgPSBnZXREcmFnU3RhcnQoY3JpdGljYWwsIG1vZGUpO1xuICAgIGRyYWdnaW5nID0ge1xuICAgICAgbW9kZTogbW9kZSxcbiAgICAgIGxhc3RDcml0aWNhbDogY3JpdGljYWwsXG4gICAgICBsYXN0TG9jYXRpb246IGRhdGEuc291cmNlLFxuICAgICAgbGFzdENvbWJpbmU6IG51bGxcbiAgICB9O1xuICAgIGFzeW5jTWFyc2hhbC5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgd2l0aFRpbWluZ3MoJ29uRHJhZ1N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZXhlY3V0ZShnZXRSZXNwb25kZXJzKCkub25EcmFnU3RhcnQsIGRhdGEsIGFubm91bmNlLCBwcmVzZXQub25EcmFnU3RhcnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShjcml0aWNhbCwgaW1wYWN0KSB7XG4gICAgdmFyIGxvY2F0aW9uID0gdHJ5R2V0RGVzdGluYXRpb24oaW1wYWN0KTtcbiAgICB2YXIgY29tYmluZSA9IHRyeUdldENvbWJpbmUoaW1wYWN0KTtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmlyZSBvbkRyYWdNb3ZlIHdoZW4gb25EcmFnU3RhcnQgaGFzIG5vdCBiZWVuIGNhbGxlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGFzQ3JpdGljYWxDaGFuZ2VkID0gIWlzQ3JpdGljYWxFcXVhbChjcml0aWNhbCwgZHJhZ2dpbmcubGFzdENyaXRpY2FsKTtcblxuICAgIGlmIChoYXNDcml0aWNhbENoYW5nZWQpIHtcbiAgICAgIGRyYWdnaW5nLmxhc3RDcml0aWNhbCA9IGNyaXRpY2FsO1xuICAgIH1cblxuICAgIHZhciBoYXNMb2NhdGlvbkNoYW5nZWQgPSAhYXJlTG9jYXRpb25zRXF1YWwoZHJhZ2dpbmcubGFzdExvY2F0aW9uLCBsb2NhdGlvbik7XG5cbiAgICBpZiAoaGFzTG9jYXRpb25DaGFuZ2VkKSB7XG4gICAgICBkcmFnZ2luZy5sYXN0TG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgaGFzR3JvdXBpbmdDaGFuZ2VkID0gIWlzQ29tYmluZUVxdWFsKGRyYWdnaW5nLmxhc3RDb21iaW5lLCBjb21iaW5lKTtcblxuICAgIGlmIChoYXNHcm91cGluZ0NoYW5nZWQpIHtcbiAgICAgIGRyYWdnaW5nLmxhc3RDb21iaW5lID0gY29tYmluZTtcbiAgICB9XG5cbiAgICBpZiAoIWhhc0NyaXRpY2FsQ2hhbmdlZCAmJiAhaGFzTG9jYXRpb25DaGFuZ2VkICYmICFoYXNHcm91cGluZ0NoYW5nZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IF9leHRlbmRzKHt9LCBnZXREcmFnU3RhcnQoY3JpdGljYWwsIGRyYWdnaW5nLm1vZGUpLCB7XG4gICAgICBjb21iaW5lOiBjb21iaW5lLFxuICAgICAgZGVzdGluYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG5cbiAgICBhc3luY01hcnNoYWwuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpdGhUaW1pbmdzKCdvbkRyYWdVcGRhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBleGVjdXRlKGdldFJlc3BvbmRlcnMoKS5vbkRyYWdVcGRhdGUsIGRhdGEsIGFubm91bmNlLCBwcmVzZXQub25EcmFnVXBkYXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NhbiBvbmx5IGZsdXNoIHJlc3BvbmRlcnMgd2hpbGUgZHJhZ2dpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgYXN5bmNNYXJzaGFsLmZsdXNoKCk7XG4gIH07XG5cbiAgdmFyIGRyb3AgPSBmdW5jdGlvbiBkcm9wKHJlc3VsdCkge1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaXJlIG9uRHJhZ0VuZCB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIG9uRHJhZ1N0YXJ0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGRyYWdnaW5nID0gbnVsbDtcbiAgICB3aXRoVGltaW5ncygnb25EcmFnRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGV4ZWN1dGUoZ2V0UmVzcG9uZGVycygpLm9uRHJhZ0VuZCwgcmVzdWx0LCBhbm5vdW5jZSwgcHJlc2V0Lm9uRHJhZ0VuZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGFib3J0ID0gZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgaWYgKCFkcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBfZXh0ZW5kcyh7fSwgZ2V0RHJhZ1N0YXJ0KGRyYWdnaW5nLmxhc3RDcml0aWNhbCwgZHJhZ2dpbmcubW9kZSksIHtcbiAgICAgIGNvbWJpbmU6IG51bGwsXG4gICAgICBkZXN0aW5hdGlvbjogbnVsbCxcbiAgICAgIHJlYXNvbjogJ0NBTkNFTCdcbiAgICB9KTtcblxuICAgIGRyb3AocmVzdWx0KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJlZm9yZUNhcHR1cmU6IGJlZm9yZUNhcHR1cmUsXG4gICAgYmVmb3JlU3RhcnQ6IGJlZm9yZVN0YXJ0LFxuICAgIHN0YXJ0OiBzdGFydCxcbiAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICBmbHVzaDogZmx1c2gsXG4gICAgZHJvcDogZHJvcCxcbiAgICBhYm9ydDogYWJvcnRcbiAgfTtcbn0pO1xuXG52YXIgcmVzcG9uZGVycyA9IChmdW5jdGlvbiAoZ2V0UmVzcG9uZGVycywgYW5ub3VuY2UpIHtcbiAgdmFyIHB1Ymxpc2hlciA9IGdldFB1Ymxpc2hlcihnZXRSZXNwb25kZXJzLCBhbm5vdW5jZSk7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0JFRk9SRV9JTklUSUFMX0NBUFRVUkUnKSB7XG4gICAgICAgICAgcHVibGlzaGVyLmJlZm9yZUNhcHR1cmUoYWN0aW9uLnBheWxvYWQuZHJhZ2dhYmxlSWQsIGFjdGlvbi5wYXlsb2FkLm1vdmVtZW50TW9kZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnSU5JVElBTF9QVUJMSVNIJykge1xuICAgICAgICAgIHZhciBjcml0aWNhbCA9IGFjdGlvbi5wYXlsb2FkLmNyaXRpY2FsO1xuICAgICAgICAgIHB1Ymxpc2hlci5iZWZvcmVTdGFydChjcml0aWNhbCwgYWN0aW9uLnBheWxvYWQubW92ZW1lbnRNb2RlKTtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgcHVibGlzaGVyLnN0YXJ0KGNyaXRpY2FsLCBhY3Rpb24ucGF5bG9hZC5tb3ZlbWVudE1vZGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGFjdGlvbi5wYXlsb2FkLmNvbXBsZXRlZC5yZXN1bHQ7XG4gICAgICAgICAgcHVibGlzaGVyLmZsdXNoKCk7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHB1Ymxpc2hlci5kcm9wKHJlc3VsdCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV4dChhY3Rpb24pO1xuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0ZMVVNIJykge1xuICAgICAgICAgIHB1Ymxpc2hlci5hYm9ydCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgICAgcHVibGlzaGVyLnVwZGF0ZShzdGF0ZS5jcml0aWNhbCwgc3RhdGUuaW1wYWN0KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9O1xufSk7XG5cbnZhciBkcm9wQW5pbWF0aW9uRmluaXNoID0gKGZ1bmN0aW9uIChzdG9yZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgaWYgKGFjdGlvbi50eXBlICE9PSAnRFJPUF9BTklNQVRJT05fRklOSVNIRUQnKSB7XG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgIShzdGF0ZS5waGFzZSA9PT0gJ0RST1BfQU5JTUFUSU5HJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmluaXNoIGEgZHJvcCBhbmltYXRpbmcgd2hlbiBubyBkcm9wIGlzIG9jY3VycmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGNvbXBsZXRlRHJvcCh7XG4gICAgICAgIGNvbXBsZXRlZDogc3RhdGUuY29tcGxldGVkXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZHJvcEFuaW1hdGlvbkZsdXNoT25TY3JvbGwgPSAoZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHZhciB1bmJpbmQgPSBudWxsO1xuICB2YXIgZnJhbWVJZCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGZyYW1lSWQpO1xuICAgICAgZnJhbWVJZCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHVuYmluZCkge1xuICAgICAgdW5iaW5kKCk7XG4gICAgICB1bmJpbmQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdGTFVTSCcgfHwgYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQU5JTUFUSU9OX0ZJTklTSEVEJykge1xuICAgICAgICBjbGVhcigpO1xuICAgICAgfVxuXG4gICAgICBuZXh0KGFjdGlvbik7XG5cbiAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gJ0RST1BfQU5JTUFURScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmluZGluZyA9IHtcbiAgICAgICAgZXZlbnROYW1lOiAnc2Nyb2xsJyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBmbjogZnVuY3Rpb24gZmx1c2hEcm9wQW5pbWF0aW9uKCkge1xuICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgICAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgICAgICAgIHN0b3JlLmRpc3BhdGNoKGRyb3BBbmltYXRpb25GaW5pc2hlZCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnJhbWVJZCA9IG51bGw7XG4gICAgICAgIHVuYmluZCA9IGJpbmRFdmVudHMod2luZG93LCBbYmluZGluZ10pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZGltZW5zaW9uTWFyc2hhbFN0b3BwZXIgPSAoZnVuY3Rpb24gKG1hcnNoYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnIHx8IGFjdGlvbi50eXBlID09PSAnRkxVU0gnIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRFJykge1xuICAgICAgICAgIG1hcnNoYWwuc3RvcFB1Ymxpc2hpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgZm9jdXMgPSAoZnVuY3Rpb24gKG1hcnNoYWwpIHtcbiAgdmFyIGlzV2F0Y2hpbmcgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAgICAgICBpc1dhdGNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICBtYXJzaGFsLnRyeVJlY29yZEZvY3VzKGFjdGlvbi5wYXlsb2FkLmNyaXRpY2FsLmRyYWdnYWJsZS5pZCk7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIG1hcnNoYWwudHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBuZXh0KGFjdGlvbik7XG5cbiAgICAgICAgaWYgKCFpc1dhdGNoaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSAnRkxVU0gnKSB7XG4gICAgICAgICAgaXNXYXRjaGluZyA9IGZhbHNlO1xuICAgICAgICAgIG1hcnNoYWwudHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdEUk9QX0NPTVBMRVRFJykge1xuICAgICAgICAgIGlzV2F0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gYWN0aW9uLnBheWxvYWQuY29tcGxldGVkLnJlc3VsdDtcblxuICAgICAgICAgIGlmIChyZXN1bHQuY29tYmluZSkge1xuICAgICAgICAgICAgbWFyc2hhbC50cnlTaGlmdFJlY29yZChyZXN1bHQuZHJhZ2dhYmxlSWQsIHJlc3VsdC5jb21iaW5lLmRyYWdnYWJsZUlkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXJzaGFsLnRyeVJlc3RvcmVGb2N1c1JlY29yZGVkKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgc2hvdWxkU3RvcCA9IGZ1bmN0aW9uIHNob3VsZFN0b3AoYWN0aW9uKSB7XG4gIHJldHVybiBhY3Rpb24udHlwZSA9PT0gJ0RST1BfQ09NUExFVEUnIHx8IGFjdGlvbi50eXBlID09PSAnRFJPUF9BTklNQVRFJyB8fCBhY3Rpb24udHlwZSA9PT0gJ0ZMVVNIJztcbn07XG5cbnZhciBhdXRvU2Nyb2xsID0gKGZ1bmN0aW9uIChhdXRvU2Nyb2xsZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHNob3VsZFN0b3AoYWN0aW9uKSkge1xuICAgICAgICAgIGF1dG9TY3JvbGxlci5zdG9wKCk7XG4gICAgICAgICAgbmV4dChhY3Rpb24pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ0lOSVRJQUxfUFVCTElTSCcpIHtcbiAgICAgICAgICBuZXh0KGFjdGlvbik7XG4gICAgICAgICAgdmFyIHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgICAhKHN0YXRlLnBoYXNlID09PSAnRFJBR0dJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIHBoYXNlIHRvIGJlIERSQUdHSU5HIGFmdGVyIElOSVRJQUxfUFVCTElTSCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICBhdXRvU2Nyb2xsZXIuc3RhcnQoc3RhdGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5leHQoYWN0aW9uKTtcbiAgICAgICAgYXV0b1Njcm9sbGVyLnNjcm9sbChzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgcGVuZGluZ0Ryb3AgPSAoZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICBuZXh0KGFjdGlvbik7XG5cbiAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gJ1BVQkxJU0hfV0hJTEVfRFJBR0dJTkcnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc3RBY3Rpb25TdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG5cbiAgICAgIGlmIChwb3N0QWN0aW9uU3RhdGUucGhhc2UgIT09ICdEUk9QX1BFTkRJTkcnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvc3RBY3Rpb25TdGF0ZS5pc1dhaXRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdG9yZS5kaXNwYXRjaChkcm9wKHtcbiAgICAgICAgcmVhc29uOiBwb3N0QWN0aW9uU3RhdGUucmVhc29uXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfTtcbn0pO1xuXG52YXIgY29tcG9zZUVuaGFuY2VycyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18oe1xuICBuYW1lOiAncmVhY3QtYmVhdXRpZnVsLWRuZCdcbn0pIDogY29tcG9zZTtcbnZhciBjcmVhdGVTdG9yZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZGltZW5zaW9uTWFyc2hhbCA9IF9yZWYuZGltZW5zaW9uTWFyc2hhbCxcbiAgICAgIGZvY3VzTWFyc2hhbCA9IF9yZWYuZm9jdXNNYXJzaGFsLFxuICAgICAgc3R5bGVNYXJzaGFsID0gX3JlZi5zdHlsZU1hcnNoYWwsXG4gICAgICBnZXRSZXNwb25kZXJzID0gX3JlZi5nZXRSZXNwb25kZXJzLFxuICAgICAgYW5ub3VuY2UgPSBfcmVmLmFubm91bmNlLFxuICAgICAgYXV0b1Njcm9sbGVyID0gX3JlZi5hdXRvU2Nyb2xsZXI7XG4gIHJldHVybiBjcmVhdGVTdG9yZSQxKHJlZHVjZXIsIGNvbXBvc2VFbmhhbmNlcnMoYXBwbHlNaWRkbGV3YXJlKHN0eWxlKHN0eWxlTWFyc2hhbCksIGRpbWVuc2lvbk1hcnNoYWxTdG9wcGVyKGRpbWVuc2lvbk1hcnNoYWwpLCBsaWZ0JDEoZGltZW5zaW9uTWFyc2hhbCksIGRyb3AkMSwgZHJvcEFuaW1hdGlvbkZpbmlzaCwgZHJvcEFuaW1hdGlvbkZsdXNoT25TY3JvbGwsIHBlbmRpbmdEcm9wLCBhdXRvU2Nyb2xsKGF1dG9TY3JvbGxlciksIHNjcm9sbExpc3RlbmVyLCBmb2N1cyhmb2N1c01hcnNoYWwpLCByZXNwb25kZXJzKGdldFJlc3BvbmRlcnMsIGFubm91bmNlKSkpKTtcbn0pO1xuXG52YXIgY2xlYW4kMSA9IGZ1bmN0aW9uIGNsZWFuKCkge1xuICByZXR1cm4ge1xuICAgIGFkZGl0aW9uczoge30sXG4gICAgcmVtb3ZhbHM6IHt9LFxuICAgIG1vZGlmaWVkOiB7fVxuICB9O1xufTtcbmZ1bmN0aW9uIGNyZWF0ZVB1Ymxpc2hlcihfcmVmKSB7XG4gIHZhciByZWdpc3RyeSA9IF9yZWYucmVnaXN0cnksXG4gICAgICBjYWxsYmFja3MgPSBfcmVmLmNhbGxiYWNrcztcbiAgdmFyIHN0YWdpbmcgPSBjbGVhbiQxKCk7XG4gIHZhciBmcmFtZUlkID0gbnVsbDtcblxuICB2YXIgY29sbGVjdCA9IGZ1bmN0aW9uIGNvbGxlY3QoKSB7XG4gICAgaWYgKGZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjYWxsYmFja3MuY29sbGVjdGlvblN0YXJ0aW5nKCk7XG4gICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICBmcmFtZUlkID0gbnVsbDtcbiAgICAgIHN0YXJ0KCk7XG4gICAgICB2YXIgX3N0YWdpbmcgPSBzdGFnaW5nLFxuICAgICAgICAgIGFkZGl0aW9ucyA9IF9zdGFnaW5nLmFkZGl0aW9ucyxcbiAgICAgICAgICByZW1vdmFscyA9IF9zdGFnaW5nLnJlbW92YWxzLFxuICAgICAgICAgIG1vZGlmaWVkID0gX3N0YWdpbmcubW9kaWZpZWQ7XG4gICAgICB2YXIgYWRkZWQgPSBPYmplY3Qua2V5cyhhZGRpdGlvbnMpLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdHJ5LmRyYWdnYWJsZS5nZXRCeUlkKGlkKS5nZXREaW1lbnNpb24ob3JpZ2luKTtcbiAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEuZGVzY3JpcHRvci5pbmRleCAtIGIuZGVzY3JpcHRvci5pbmRleDtcbiAgICAgIH0pO1xuICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhtb2RpZmllZCkubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgZW50cnkgPSByZWdpc3RyeS5kcm9wcGFibGUuZ2V0QnlJZChpZCk7XG4gICAgICAgIHZhciBzY3JvbGwgPSBlbnRyeS5jYWxsYmFja3MuZ2V0U2Nyb2xsV2hpbGVEcmFnZ2luZygpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRyb3BwYWJsZUlkOiBpZCxcbiAgICAgICAgICBzY3JvbGw6IHNjcm9sbFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICBhZGRpdGlvbnM6IGFkZGVkLFxuICAgICAgICByZW1vdmFsczogT2JqZWN0LmtleXMocmVtb3ZhbHMpLFxuICAgICAgICBtb2RpZmllZDogdXBkYXRlZFxuICAgICAgfTtcbiAgICAgIHN0YWdpbmcgPSBjbGVhbiQxKCk7XG4gICAgICBmaW5pc2goKTtcbiAgICAgIGNhbGxiYWNrcy5wdWJsaXNoKHJlc3VsdCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGFkZCA9IGZ1bmN0aW9uIGFkZChlbnRyeSkge1xuICAgIHZhciBpZCA9IGVudHJ5LmRlc2NyaXB0b3IuaWQ7XG4gICAgc3RhZ2luZy5hZGRpdGlvbnNbaWRdID0gZW50cnk7XG4gICAgc3RhZ2luZy5tb2RpZmllZFtlbnRyeS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkXSA9IHRydWU7XG5cbiAgICBpZiAoc3RhZ2luZy5yZW1vdmFsc1tpZF0pIHtcbiAgICAgIGRlbGV0ZSBzdGFnaW5nLnJlbW92YWxzW2lkXTtcbiAgICB9XG5cbiAgICBjb2xsZWN0KCk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShlbnRyeSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gZW50cnkuZGVzY3JpcHRvcjtcbiAgICBzdGFnaW5nLnJlbW92YWxzW2Rlc2NyaXB0b3IuaWRdID0gdHJ1ZTtcbiAgICBzdGFnaW5nLm1vZGlmaWVkW2Rlc2NyaXB0b3IuZHJvcHBhYmxlSWRdID0gdHJ1ZTtcblxuICAgIGlmIChzdGFnaW5nLmFkZGl0aW9uc1tkZXNjcmlwdG9yLmlkXSkge1xuICAgICAgZGVsZXRlIHN0YWdpbmcuYWRkaXRpb25zW2Rlc2NyaXB0b3IuaWRdO1xuICAgIH1cblxuICAgIGNvbGxlY3QoKTtcbiAgfTtcblxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgaWYgKCFmcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVJZCk7XG4gICAgZnJhbWVJZCA9IG51bGw7XG4gICAgc3RhZ2luZyA9IGNsZWFuJDEoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGFkZDogYWRkLFxuICAgIHJlbW92ZTogcmVtb3ZlLFxuICAgIHN0b3A6IHN0b3BcbiAgfTtcbn1cblxudmFyIGdldE1heFNjcm9sbCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc2Nyb2xsSGVpZ2h0ID0gX3JlZi5zY3JvbGxIZWlnaHQsXG4gICAgICBzY3JvbGxXaWR0aCA9IF9yZWYuc2Nyb2xsV2lkdGgsXG4gICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodCxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aDtcbiAgdmFyIG1heFNjcm9sbCA9IHN1YnRyYWN0KHtcbiAgICB4OiBzY3JvbGxXaWR0aCxcbiAgICB5OiBzY3JvbGxIZWlnaHRcbiAgfSwge1xuICAgIHg6IHdpZHRoLFxuICAgIHk6IGhlaWdodFxuICB9KTtcbiAgdmFyIGFkanVzdGVkTWF4U2Nyb2xsID0ge1xuICAgIHg6IE1hdGgubWF4KDAsIG1heFNjcm9sbC54KSxcbiAgICB5OiBNYXRoLm1heCgwLCBtYXhTY3JvbGwueSlcbiAgfTtcbiAgcmV0dXJuIGFkanVzdGVkTWF4U2Nyb2xsO1xufSk7XG5cbnZhciBnZXREb2N1bWVudEVsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAhZG9jID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gZG9jO1xufSk7XG5cbnZhciBnZXRNYXhXaW5kb3dTY3JvbGwgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgZG9jID0gZ2V0RG9jdW1lbnRFbGVtZW50KCk7XG4gIHZhciBtYXhTY3JvbGwgPSBnZXRNYXhTY3JvbGwoe1xuICAgIHNjcm9sbEhlaWdodDogZG9jLnNjcm9sbEhlaWdodCxcbiAgICBzY3JvbGxXaWR0aDogZG9jLnNjcm9sbFdpZHRoLFxuICAgIHdpZHRoOiBkb2MuY2xpZW50V2lkdGgsXG4gICAgaGVpZ2h0OiBkb2MuY2xpZW50SGVpZ2h0XG4gIH0pO1xuICByZXR1cm4gbWF4U2Nyb2xsO1xufSk7XG5cbnZhciBnZXRWaWV3cG9ydCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciBzY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoKTtcbiAgdmFyIG1heFNjcm9sbCA9IGdldE1heFdpbmRvd1Njcm9sbCgpO1xuICB2YXIgdG9wID0gc2Nyb2xsLnk7XG4gIHZhciBsZWZ0ID0gc2Nyb2xsLng7XG4gIHZhciBkb2MgPSBnZXREb2N1bWVudEVsZW1lbnQoKTtcbiAgdmFyIHdpZHRoID0gZG9jLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gZG9jLmNsaWVudEhlaWdodDtcbiAgdmFyIHJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICB2YXIgYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICB2YXIgZnJhbWUgPSBnZXRSZWN0KHtcbiAgICB0b3A6IHRvcCxcbiAgICBsZWZ0OiBsZWZ0LFxuICAgIHJpZ2h0OiByaWdodCxcbiAgICBib3R0b206IGJvdHRvbVxuICB9KTtcbiAgdmFyIHZpZXdwb3J0ID0ge1xuICAgIGZyYW1lOiBmcmFtZSxcbiAgICBzY3JvbGw6IHtcbiAgICAgIGluaXRpYWw6IHNjcm9sbCxcbiAgICAgIGN1cnJlbnQ6IHNjcm9sbCxcbiAgICAgIG1heDogbWF4U2Nyb2xsLFxuICAgICAgZGlmZjoge1xuICAgICAgICB2YWx1ZTogb3JpZ2luLFxuICAgICAgICBkaXNwbGFjZW1lbnQ6IG9yaWdpblxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHZpZXdwb3J0O1xufSk7XG5cbnZhciBnZXRJbml0aWFsUHVibGlzaCA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY3JpdGljYWwgPSBfcmVmLmNyaXRpY2FsLFxuICAgICAgc2Nyb2xsT3B0aW9ucyA9IF9yZWYuc2Nyb2xsT3B0aW9ucyxcbiAgICAgIHJlZ2lzdHJ5ID0gX3JlZi5yZWdpc3RyeTtcbiAgc3RhcnQoKTtcbiAgdmFyIHZpZXdwb3J0ID0gZ2V0Vmlld3BvcnQoKTtcbiAgdmFyIHdpbmRvd1Njcm9sbCA9IHZpZXdwb3J0LnNjcm9sbC5jdXJyZW50O1xuICB2YXIgaG9tZSA9IGNyaXRpY2FsLmRyb3BwYWJsZTtcbiAgdmFyIGRyb3BwYWJsZXMgPSByZWdpc3RyeS5kcm9wcGFibGUuZ2V0QWxsQnlUeXBlKGhvbWUudHlwZSkubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5jYWxsYmFja3MuZ2V0RGltZW5zaW9uQW5kV2F0Y2hTY3JvbGwod2luZG93U2Nyb2xsLCBzY3JvbGxPcHRpb25zKTtcbiAgfSk7XG4gIHZhciBkcmFnZ2FibGVzID0gcmVnaXN0cnkuZHJhZ2dhYmxlLmdldEFsbEJ5VHlwZShjcml0aWNhbC5kcmFnZ2FibGUudHlwZSkubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiBlbnRyeS5nZXREaW1lbnNpb24od2luZG93U2Nyb2xsKTtcbiAgfSk7XG4gIHZhciBkaW1lbnNpb25zID0ge1xuICAgIGRyYWdnYWJsZXM6IHRvRHJhZ2dhYmxlTWFwKGRyYWdnYWJsZXMpLFxuICAgIGRyb3BwYWJsZXM6IHRvRHJvcHBhYmxlTWFwKGRyb3BwYWJsZXMpXG4gIH07XG4gIGZpbmlzaCgpO1xuICB2YXIgcmVzdWx0ID0ge1xuICAgIGRpbWVuc2lvbnM6IGRpbWVuc2lvbnMsXG4gICAgY3JpdGljYWw6IGNyaXRpY2FsLFxuICAgIHZpZXdwb3J0OiB2aWV3cG9ydFxuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbmZ1bmN0aW9uIHNob3VsZFB1Ymxpc2hVcGRhdGUocmVnaXN0cnksIGRyYWdnaW5nLCBlbnRyeSkge1xuICBpZiAoZW50cnkuZGVzY3JpcHRvci5pZCA9PT0gZHJhZ2dpbmcuaWQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoZW50cnkuZGVzY3JpcHRvci50eXBlICE9PSBkcmFnZ2luZy50eXBlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGhvbWUgPSByZWdpc3RyeS5kcm9wcGFibGUuZ2V0QnlJZChlbnRyeS5kZXNjcmlwdG9yLmRyb3BwYWJsZUlkKTtcblxuICBpZiAoaG9tZS5kZXNjcmlwdG9yLm1vZGUgIT09ICd2aXJ0dWFsJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gYWRkIG9yIHJlbW92ZSBhIERyYWdnYWJsZSBbaWQ6IFwiICsgZW50cnkuZGVzY3JpcHRvci5pZCArIFwiXVxcbiAgICAgIHdoaWxlIGEgZHJhZyBpcyBvY2N1cnJpbmcuIFRoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIHZpcnR1YWwgbGlzdHMuXFxuXFxuICAgICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9ibG9iL21hc3Rlci9kb2NzL3BhdHRlcm5zL3ZpcnR1YWwtbGlzdHMubWRcXG4gICAgXCIpIDogdm9pZCAwO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG52YXIgY3JlYXRlRGltZW5zaW9uTWFyc2hhbCA9IChmdW5jdGlvbiAocmVnaXN0cnksIGNhbGxiYWNrcykge1xuICB2YXIgY29sbGVjdGlvbiA9IG51bGw7XG4gIHZhciBwdWJsaXNoZXIgPSBjcmVhdGVQdWJsaXNoZXIoe1xuICAgIGNhbGxiYWNrczoge1xuICAgICAgcHVibGlzaDogY2FsbGJhY2tzLnB1Ymxpc2hXaGlsZURyYWdnaW5nLFxuICAgICAgY29sbGVjdGlvblN0YXJ0aW5nOiBjYWxsYmFja3MuY29sbGVjdGlvblN0YXJ0aW5nXG4gICAgfSxcbiAgICByZWdpc3RyeTogcmVnaXN0cnlcbiAgfSk7XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZChpZCwgaXNFbmFibGVkKSB7XG4gICAgIXJlZ2lzdHJ5LmRyb3BwYWJsZS5leGlzdHMoaWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCB1cGRhdGUgaXMgZW5hYmxlZCBmbGFnIG9mIERyb3BwYWJsZSBcIiArIGlkICsgXCIgYXMgaXQgaXMgbm90IHJlZ2lzdGVyZWRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2tzLnVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZCh7XG4gICAgICBpZDogaWQsXG4gICAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZFxuICAgIH0pO1xuICB9O1xuXG4gIHZhciB1cGRhdGVEcm9wcGFibGVJc0NvbWJpbmVFbmFibGVkID0gZnVuY3Rpb24gdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZChpZCwgaXNDb21iaW5lRW5hYmxlZCkge1xuICAgIGlmICghY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICFyZWdpc3RyeS5kcm9wcGFibGUuZXhpc3RzKGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgdXBkYXRlIGlzQ29tYmluZUVuYWJsZWQgZmxhZyBvZiBEcm9wcGFibGUgXCIgKyBpZCArIFwiIGFzIGl0IGlzIG5vdCByZWdpc3RlcmVkXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBjYWxsYmFja3MudXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCh7XG4gICAgICBpZDogaWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZURyb3BwYWJsZVNjcm9sbCA9IGZ1bmN0aW9uIHVwZGF0ZURyb3BwYWJsZVNjcm9sbChpZCwgbmV3U2Nyb2xsKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgIXJlZ2lzdHJ5LmRyb3BwYWJsZS5leGlzdHMoaWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCB1cGRhdGUgdGhlIHNjcm9sbCBvbiBEcm9wcGFibGUgXCIgKyBpZCArIFwiIGFzIGl0IGlzIG5vdCByZWdpc3RlcmVkXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBjYWxsYmFja3MudXBkYXRlRHJvcHBhYmxlU2Nyb2xsKHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5ld1Njcm9sbDogbmV3U2Nyb2xsXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHNjcm9sbERyb3BwYWJsZSA9IGZ1bmN0aW9uIHNjcm9sbERyb3BwYWJsZShpZCwgY2hhbmdlKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmVnaXN0cnkuZHJvcHBhYmxlLmdldEJ5SWQoaWQpLmNhbGxiYWNrcy5zY3JvbGwoY2hhbmdlKTtcbiAgfTtcblxuICB2YXIgc3RvcFB1Ymxpc2hpbmcgPSBmdW5jdGlvbiBzdG9wUHVibGlzaGluZygpIHtcbiAgICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwdWJsaXNoZXIuc3RvcCgpO1xuICAgIHZhciBob21lID0gY29sbGVjdGlvbi5jcml0aWNhbC5kcm9wcGFibGU7XG4gICAgcmVnaXN0cnkuZHJvcHBhYmxlLmdldEFsbEJ5VHlwZShob21lLnR5cGUpLmZvckVhY2goZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICByZXR1cm4gZW50cnkuY2FsbGJhY2tzLmRyYWdTdG9wcGVkKCk7XG4gICAgfSk7XG4gICAgY29sbGVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIGNvbGxlY3Rpb24gPSBudWxsO1xuICB9O1xuXG4gIHZhciBzdWJzY3JpYmVyID0gZnVuY3Rpb24gc3Vic2NyaWJlcihldmVudCkge1xuICAgICFjb2xsZWN0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnU2hvdWxkIG9ubHkgYmUgc3Vic2NyaWJlZCB3aGVuIGEgY29sbGVjdGlvbiBpcyBvY2N1cnJpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGRyYWdnaW5nID0gY29sbGVjdGlvbi5jcml0aWNhbC5kcmFnZ2FibGU7XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ0FERElUSU9OJykge1xuICAgICAgaWYgKHNob3VsZFB1Ymxpc2hVcGRhdGUocmVnaXN0cnksIGRyYWdnaW5nLCBldmVudC52YWx1ZSkpIHtcbiAgICAgICAgcHVibGlzaGVyLmFkZChldmVudC52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdSRU1PVkFMJykge1xuICAgICAgaWYgKHNob3VsZFB1Ymxpc2hVcGRhdGUocmVnaXN0cnksIGRyYWdnaW5nLCBldmVudC52YWx1ZSkpIHtcbiAgICAgICAgcHVibGlzaGVyLnJlbW92ZShldmVudC52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBzdGFydFB1Ymxpc2hpbmcgPSBmdW5jdGlvbiBzdGFydFB1Ymxpc2hpbmcocmVxdWVzdCkge1xuICAgICEhY29sbGVjdGlvbiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzdGFydCBjYXB0dXJpbmcgY3JpdGljYWwgZGltZW5zaW9ucyBhcyB0aGVyZSBpcyBhbHJlYWR5IGEgY29sbGVjdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgZW50cnkgPSByZWdpc3RyeS5kcmFnZ2FibGUuZ2V0QnlJZChyZXF1ZXN0LmRyYWdnYWJsZUlkKTtcbiAgICB2YXIgaG9tZSA9IHJlZ2lzdHJ5LmRyb3BwYWJsZS5nZXRCeUlkKGVudHJ5LmRlc2NyaXB0b3IuZHJvcHBhYmxlSWQpO1xuICAgIHZhciBjcml0aWNhbCA9IHtcbiAgICAgIGRyYWdnYWJsZTogZW50cnkuZGVzY3JpcHRvcixcbiAgICAgIGRyb3BwYWJsZTogaG9tZS5kZXNjcmlwdG9yXG4gICAgfTtcbiAgICB2YXIgdW5zdWJzY3JpYmUgPSByZWdpc3RyeS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgY29sbGVjdGlvbiA9IHtcbiAgICAgIGNyaXRpY2FsOiBjcml0aWNhbCxcbiAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgIH07XG4gICAgcmV0dXJuIGdldEluaXRpYWxQdWJsaXNoKHtcbiAgICAgIGNyaXRpY2FsOiBjcml0aWNhbCxcbiAgICAgIHJlZ2lzdHJ5OiByZWdpc3RyeSxcbiAgICAgIHNjcm9sbE9wdGlvbnM6IHJlcXVlc3Quc2Nyb2xsT3B0aW9uc1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBtYXJzaGFsID0ge1xuICAgIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZDogdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkLFxuICAgIHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQ6IHVwZGF0ZURyb3BwYWJsZUlzQ29tYmluZUVuYWJsZWQsXG4gICAgc2Nyb2xsRHJvcHBhYmxlOiBzY3JvbGxEcm9wcGFibGUsXG4gICAgdXBkYXRlRHJvcHBhYmxlU2Nyb2xsOiB1cGRhdGVEcm9wcGFibGVTY3JvbGwsXG4gICAgc3RhcnRQdWJsaXNoaW5nOiBzdGFydFB1Ymxpc2hpbmcsXG4gICAgc3RvcFB1Ymxpc2hpbmc6IHN0b3BQdWJsaXNoaW5nXG4gIH07XG4gIHJldHVybiBtYXJzaGFsO1xufSk7XG5cbnZhciBjYW5TdGFydERyYWcgPSAoZnVuY3Rpb24gKHN0YXRlLCBpZCkge1xuICBpZiAoc3RhdGUucGhhc2UgPT09ICdJRExFJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHN0YXRlLnBoYXNlICE9PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHN0YXRlLmNvbXBsZXRlZC5yZXN1bHQuZHJhZ2dhYmxlSWQgPT09IGlkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHN0YXRlLmNvbXBsZXRlZC5yZXN1bHQucmVhc29uID09PSAnRFJPUCc7XG59KTtcblxudmFyIHNjcm9sbFdpbmRvdyA9IChmdW5jdGlvbiAoY2hhbmdlKSB7XG4gIHdpbmRvdy5zY3JvbGxCeShjaGFuZ2UueCwgY2hhbmdlLnkpO1xufSk7XG5cbnZhciBnZXRTY3JvbGxhYmxlRHJvcHBhYmxlcyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKGRyb3BwYWJsZXMpIHtcbiAgcmV0dXJuIHRvRHJvcHBhYmxlTGlzdChkcm9wcGFibGVzKS5maWx0ZXIoZnVuY3Rpb24gKGRyb3BwYWJsZSkge1xuICAgIGlmICghZHJvcHBhYmxlLmlzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghZHJvcHBhYmxlLmZyYW1lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufSk7XG5cbnZhciBnZXRTY3JvbGxhYmxlRHJvcHBhYmxlT3ZlciA9IGZ1bmN0aW9uIGdldFNjcm9sbGFibGVEcm9wcGFibGVPdmVyKHRhcmdldCwgZHJvcHBhYmxlcykge1xuICB2YXIgbWF5YmUgPSBmaW5kKGdldFNjcm9sbGFibGVEcm9wcGFibGVzKGRyb3BwYWJsZXMpLCBmdW5jdGlvbiAoZHJvcHBhYmxlKSB7XG4gICAgIWRyb3BwYWJsZS5mcmFtZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgcmVzdWx0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBpc1Bvc2l0aW9uSW5GcmFtZShkcm9wcGFibGUuZnJhbWUucGFnZU1hcmdpbkJveCkodGFyZ2V0KTtcbiAgfSk7XG4gIHJldHVybiBtYXliZTtcbn07XG5cbnZhciBnZXRCZXN0U2Nyb2xsYWJsZURyb3BwYWJsZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgY2VudGVyID0gX3JlZi5jZW50ZXIsXG4gICAgICBkZXN0aW5hdGlvbiA9IF9yZWYuZGVzdGluYXRpb24sXG4gICAgICBkcm9wcGFibGVzID0gX3JlZi5kcm9wcGFibGVzO1xuXG4gIGlmIChkZXN0aW5hdGlvbikge1xuICAgIHZhciBfZGltZW5zaW9uID0gZHJvcHBhYmxlc1tkZXN0aW5hdGlvbl07XG5cbiAgICBpZiAoIV9kaW1lbnNpb24uZnJhbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBfZGltZW5zaW9uO1xuICB9XG5cbiAgdmFyIGRpbWVuc2lvbiA9IGdldFNjcm9sbGFibGVEcm9wcGFibGVPdmVyKGNlbnRlciwgZHJvcHBhYmxlcyk7XG4gIHJldHVybiBkaW1lbnNpb247XG59KTtcblxudmFyIGNvbmZpZyA9IHtcbiAgc3RhcnRGcm9tUGVyY2VudGFnZTogMC4yNSxcbiAgbWF4U2Nyb2xsQXRQZXJjZW50YWdlOiAwLjA1LFxuICBtYXhQaXhlbFNjcm9sbDogMjgsXG4gIGVhc2U6IGZ1bmN0aW9uIGVhc2UocGVyY2VudGFnZSkge1xuICAgIHJldHVybiBNYXRoLnBvdyhwZXJjZW50YWdlLCAyKTtcbiAgfSxcbiAgZHVyYXRpb25EYW1wZW5pbmc6IHtcbiAgICBzdG9wRGFtcGVuaW5nQXQ6IDEyMDAsXG4gICAgYWNjZWxlcmF0ZUF0OiAzNjBcbiAgfVxufTtcblxudmFyIGdldERpc3RhbmNlVGhyZXNob2xkcyA9IChmdW5jdGlvbiAoY29udGFpbmVyLCBheGlzKSB7XG4gIHZhciBzdGFydFNjcm9sbGluZ0Zyb20gPSBjb250YWluZXJbYXhpcy5zaXplXSAqIGNvbmZpZy5zdGFydEZyb21QZXJjZW50YWdlO1xuICB2YXIgbWF4U2Nyb2xsVmFsdWVBdCA9IGNvbnRhaW5lcltheGlzLnNpemVdICogY29uZmlnLm1heFNjcm9sbEF0UGVyY2VudGFnZTtcbiAgdmFyIHRocmVzaG9sZHMgPSB7XG4gICAgc3RhcnRTY3JvbGxpbmdGcm9tOiBzdGFydFNjcm9sbGluZ0Zyb20sXG4gICAgbWF4U2Nyb2xsVmFsdWVBdDogbWF4U2Nyb2xsVmFsdWVBdFxuICB9O1xuICByZXR1cm4gdGhyZXNob2xkcztcbn0pO1xuXG52YXIgZ2V0UGVyY2VudGFnZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgc3RhcnRPZlJhbmdlID0gX3JlZi5zdGFydE9mUmFuZ2UsXG4gICAgICBlbmRPZlJhbmdlID0gX3JlZi5lbmRPZlJhbmdlLFxuICAgICAgY3VycmVudCA9IF9yZWYuY3VycmVudDtcbiAgdmFyIHJhbmdlID0gZW5kT2ZSYW5nZSAtIHN0YXJ0T2ZSYW5nZTtcblxuICBpZiAocmFuZ2UgPT09IDApIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgRGV0ZWN0ZWQgZGlzdGFuY2UgcmFuZ2Ugb2YgMCBpbiB0aGUgZmx1aWQgYXV0byBzY3JvbGxlclxcbiAgICAgIFRoaXMgaXMgdW5leHBlY3RlZCBhbmQgd291bGQgY2F1c2UgYSBkaXZpZGUgYnkgMCBpc3N1ZS5cXG4gICAgICBOb3QgYWxsb3dpbmcgYW4gYXV0byBzY3JvbGxcXG4gICAgXCIpIDogdm9pZCAwO1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRJblJhbmdlID0gY3VycmVudCAtIHN0YXJ0T2ZSYW5nZTtcbiAgdmFyIHBlcmNlbnRhZ2UgPSBjdXJyZW50SW5SYW5nZSAvIHJhbmdlO1xuICByZXR1cm4gcGVyY2VudGFnZTtcbn0pO1xuXG52YXIgbWluU2Nyb2xsID0gMTtcblxudmFyIGdldFZhbHVlRnJvbURpc3RhbmNlID0gKGZ1bmN0aW9uIChkaXN0YW5jZVRvRWRnZSwgdGhyZXNob2xkcykge1xuICBpZiAoZGlzdGFuY2VUb0VkZ2UgPiB0aHJlc2hvbGRzLnN0YXJ0U2Nyb2xsaW5nRnJvbSkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKGRpc3RhbmNlVG9FZGdlIDw9IHRocmVzaG9sZHMubWF4U2Nyb2xsVmFsdWVBdCkge1xuICAgIHJldHVybiBjb25maWcubWF4UGl4ZWxTY3JvbGw7XG4gIH1cblxuICBpZiAoZGlzdGFuY2VUb0VkZ2UgPT09IHRocmVzaG9sZHMuc3RhcnRTY3JvbGxpbmdGcm9tKSB7XG4gICAgcmV0dXJuIG1pblNjcm9sbDtcbiAgfVxuXG4gIHZhciBwZXJjZW50YWdlRnJvbU1heFNjcm9sbFZhbHVlQXQgPSBnZXRQZXJjZW50YWdlKHtcbiAgICBzdGFydE9mUmFuZ2U6IHRocmVzaG9sZHMubWF4U2Nyb2xsVmFsdWVBdCxcbiAgICBlbmRPZlJhbmdlOiB0aHJlc2hvbGRzLnN0YXJ0U2Nyb2xsaW5nRnJvbSxcbiAgICBjdXJyZW50OiBkaXN0YW5jZVRvRWRnZVxuICB9KTtcbiAgdmFyIHBlcmNlbnRhZ2VGcm9tU3RhcnRTY3JvbGxpbmdGcm9tID0gMSAtIHBlcmNlbnRhZ2VGcm9tTWF4U2Nyb2xsVmFsdWVBdDtcbiAgdmFyIHNjcm9sbCA9IGNvbmZpZy5tYXhQaXhlbFNjcm9sbCAqIGNvbmZpZy5lYXNlKHBlcmNlbnRhZ2VGcm9tU3RhcnRTY3JvbGxpbmdGcm9tKTtcbiAgcmV0dXJuIE1hdGguY2VpbChzY3JvbGwpO1xufSk7XG5cbnZhciBhY2NlbGVyYXRlQXQgPSBjb25maWcuZHVyYXRpb25EYW1wZW5pbmcuYWNjZWxlcmF0ZUF0O1xudmFyIHN0b3BBdCA9IGNvbmZpZy5kdXJhdGlvbkRhbXBlbmluZy5zdG9wRGFtcGVuaW5nQXQ7XG52YXIgZGFtcGVuVmFsdWVCeVRpbWUgPSAoZnVuY3Rpb24gKHByb3Bvc2VkU2Nyb2xsLCBkcmFnU3RhcnRUaW1lKSB7XG4gIHZhciBzdGFydE9mUmFuZ2UgPSBkcmFnU3RhcnRUaW1lO1xuICB2YXIgZW5kT2ZSYW5nZSA9IHN0b3BBdDtcbiAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gIHZhciBydW5UaW1lID0gbm93IC0gc3RhcnRPZlJhbmdlO1xuXG4gIGlmIChydW5UaW1lID49IHN0b3BBdCkge1xuICAgIHJldHVybiBwcm9wb3NlZFNjcm9sbDtcbiAgfVxuXG4gIGlmIChydW5UaW1lIDwgYWNjZWxlcmF0ZUF0KSB7XG4gICAgcmV0dXJuIG1pblNjcm9sbDtcbiAgfVxuXG4gIHZhciBiZXR3ZWVuQWNjZWxlcmF0ZUF0QW5kU3RvcEF0UGVyY2VudGFnZSA9IGdldFBlcmNlbnRhZ2Uoe1xuICAgIHN0YXJ0T2ZSYW5nZTogYWNjZWxlcmF0ZUF0LFxuICAgIGVuZE9mUmFuZ2U6IGVuZE9mUmFuZ2UsXG4gICAgY3VycmVudDogcnVuVGltZVxuICB9KTtcbiAgdmFyIHNjcm9sbCA9IHByb3Bvc2VkU2Nyb2xsICogY29uZmlnLmVhc2UoYmV0d2VlbkFjY2VsZXJhdGVBdEFuZFN0b3BBdFBlcmNlbnRhZ2UpO1xuICByZXR1cm4gTWF0aC5jZWlsKHNjcm9sbCk7XG59KTtcblxudmFyIGdldFZhbHVlID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBkaXN0YW5jZVRvRWRnZSA9IF9yZWYuZGlzdGFuY2VUb0VkZ2UsXG4gICAgICB0aHJlc2hvbGRzID0gX3JlZi50aHJlc2hvbGRzLFxuICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9yZWYuZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciBzY3JvbGwgPSBnZXRWYWx1ZUZyb21EaXN0YW5jZShkaXN0YW5jZVRvRWRnZSwgdGhyZXNob2xkcyk7XG5cbiAgaWYgKHNjcm9sbCA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKCFzaG91bGRVc2VUaW1lRGFtcGVuaW5nKSB7XG4gICAgcmV0dXJuIHNjcm9sbDtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heChkYW1wZW5WYWx1ZUJ5VGltZShzY3JvbGwsIGRyYWdTdGFydFRpbWUpLCBtaW5TY3JvbGwpO1xufSk7XG5cbnZhciBnZXRTY3JvbGxPbkF4aXMgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLFxuICAgICAgZGlzdGFuY2VUb0VkZ2VzID0gX3JlZi5kaXN0YW5jZVRvRWRnZXMsXG4gICAgICBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgYXhpcyA9IF9yZWYuYXhpcyxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciB0aHJlc2hvbGRzID0gZ2V0RGlzdGFuY2VUaHJlc2hvbGRzKGNvbnRhaW5lciwgYXhpcyk7XG4gIHZhciBpc0Nsb3NlclRvRW5kID0gZGlzdGFuY2VUb0VkZ2VzW2F4aXMuZW5kXSA8IGRpc3RhbmNlVG9FZGdlc1theGlzLnN0YXJ0XTtcblxuICBpZiAoaXNDbG9zZXJUb0VuZCkge1xuICAgIHJldHVybiBnZXRWYWx1ZSh7XG4gICAgICBkaXN0YW5jZVRvRWRnZTogZGlzdGFuY2VUb0VkZ2VzW2F4aXMuZW5kXSxcbiAgICAgIHRocmVzaG9sZHM6IHRocmVzaG9sZHMsXG4gICAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC0xICogZ2V0VmFsdWUoe1xuICAgIGRpc3RhbmNlVG9FZGdlOiBkaXN0YW5jZVRvRWRnZXNbYXhpcy5zdGFydF0sXG4gICAgdGhyZXNob2xkczogdGhyZXNob2xkcyxcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgfSk7XG59KTtcblxudmFyIGFkanVzdEZvclNpemVMaW1pdHMgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLFxuICAgICAgc3ViamVjdCA9IF9yZWYuc3ViamVjdCxcbiAgICAgIHByb3Bvc2VkU2Nyb2xsID0gX3JlZi5wcm9wb3NlZFNjcm9sbDtcbiAgdmFyIGlzVG9vQmlnVmVydGljYWxseSA9IHN1YmplY3QuaGVpZ2h0ID4gY29udGFpbmVyLmhlaWdodDtcbiAgdmFyIGlzVG9vQmlnSG9yaXpvbnRhbGx5ID0gc3ViamVjdC53aWR0aCA+IGNvbnRhaW5lci53aWR0aDtcblxuICBpZiAoIWlzVG9vQmlnSG9yaXpvbnRhbGx5ICYmICFpc1Rvb0JpZ1ZlcnRpY2FsbHkpIHtcbiAgICByZXR1cm4gcHJvcG9zZWRTY3JvbGw7XG4gIH1cblxuICBpZiAoaXNUb29CaWdIb3Jpem9udGFsbHkgJiYgaXNUb29CaWdWZXJ0aWNhbGx5KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGlzVG9vQmlnSG9yaXpvbnRhbGx5ID8gMCA6IHByb3Bvc2VkU2Nyb2xsLngsXG4gICAgeTogaXNUb29CaWdWZXJ0aWNhbGx5ID8gMCA6IHByb3Bvc2VkU2Nyb2xsLnlcbiAgfTtcbn0pO1xuXG52YXIgY2xlYW4kMiA9IGFwcGx5KGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG59KTtcbnZhciBnZXRTY3JvbGwgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBjb250YWluZXIgPSBfcmVmLmNvbnRhaW5lcixcbiAgICAgIHN1YmplY3QgPSBfcmVmLnN1YmplY3QsXG4gICAgICBjZW50ZXIgPSBfcmVmLmNlbnRlcixcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfcmVmLnNob3VsZFVzZVRpbWVEYW1wZW5pbmc7XG4gIHZhciBkaXN0YW5jZVRvRWRnZXMgPSB7XG4gICAgdG9wOiBjZW50ZXIueSAtIGNvbnRhaW5lci50b3AsXG4gICAgcmlnaHQ6IGNvbnRhaW5lci5yaWdodCAtIGNlbnRlci54LFxuICAgIGJvdHRvbTogY29udGFpbmVyLmJvdHRvbSAtIGNlbnRlci55LFxuICAgIGxlZnQ6IGNlbnRlci54IC0gY29udGFpbmVyLmxlZnRcbiAgfTtcbiAgdmFyIHkgPSBnZXRTY3JvbGxPbkF4aXMoe1xuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGRpc3RhbmNlVG9FZGdlczogZGlzdGFuY2VUb0VkZ2VzLFxuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgYXhpczogdmVydGljYWwsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcbiAgdmFyIHggPSBnZXRTY3JvbGxPbkF4aXMoe1xuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGRpc3RhbmNlVG9FZGdlczogZGlzdGFuY2VUb0VkZ2VzLFxuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgYXhpczogaG9yaXpvbnRhbCxcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuICB2YXIgcmVxdWlyZWQgPSBjbGVhbiQyKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSk7XG5cbiAgaWYgKGlzRXF1YWwocmVxdWlyZWQsIG9yaWdpbikpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsaW1pdGVkID0gYWRqdXN0Rm9yU2l6ZUxpbWl0cyh7XG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBwcm9wb3NlZFNjcm9sbDogcmVxdWlyZWRcbiAgfSk7XG5cbiAgaWYgKCFsaW1pdGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gaXNFcXVhbChsaW1pdGVkLCBvcmlnaW4pID8gbnVsbCA6IGxpbWl0ZWQ7XG59KTtcblxudmFyIHNtYWxsZXN0U2lnbmVkID0gYXBwbHkoZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlID4gMCA/IDEgOiAtMTtcbn0pO1xudmFyIGdldE92ZXJsYXAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBnZXRSZW1haW5kZXIgPSBmdW5jdGlvbiBnZXRSZW1haW5kZXIodGFyZ2V0LCBtYXgpIHtcbiAgICBpZiAodGFyZ2V0IDwgMCkge1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0ID4gbWF4KSB7XG4gICAgICByZXR1cm4gdGFyZ2V0IC0gbWF4O1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBjdXJyZW50ID0gX3JlZi5jdXJyZW50LFxuICAgICAgICBtYXggPSBfcmVmLm1heCxcbiAgICAgICAgY2hhbmdlID0gX3JlZi5jaGFuZ2U7XG4gICAgdmFyIHRhcmdldFNjcm9sbCA9IGFkZChjdXJyZW50LCBjaGFuZ2UpO1xuICAgIHZhciBvdmVybGFwID0ge1xuICAgICAgeDogZ2V0UmVtYWluZGVyKHRhcmdldFNjcm9sbC54LCBtYXgueCksXG4gICAgICB5OiBnZXRSZW1haW5kZXIodGFyZ2V0U2Nyb2xsLnksIG1heC55KVxuICAgIH07XG5cbiAgICBpZiAoaXNFcXVhbChvdmVybGFwLCBvcmlnaW4pKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3ZlcmxhcDtcbiAgfTtcbn0oKTtcbnZhciBjYW5QYXJ0aWFsbHlTY3JvbGwgPSBmdW5jdGlvbiBjYW5QYXJ0aWFsbHlTY3JvbGwoX3JlZjIpIHtcbiAgdmFyIHJhd01heCA9IF9yZWYyLm1heCxcbiAgICAgIGN1cnJlbnQgPSBfcmVmMi5jdXJyZW50LFxuICAgICAgY2hhbmdlID0gX3JlZjIuY2hhbmdlO1xuICB2YXIgbWF4ID0ge1xuICAgIHg6IE1hdGgubWF4KGN1cnJlbnQueCwgcmF3TWF4LngpLFxuICAgIHk6IE1hdGgubWF4KGN1cnJlbnQueSwgcmF3TWF4LnkpXG4gIH07XG4gIHZhciBzbWFsbGVzdENoYW5nZSA9IHNtYWxsZXN0U2lnbmVkKGNoYW5nZSk7XG4gIHZhciBvdmVybGFwID0gZ2V0T3ZlcmxhcCh7XG4gICAgbWF4OiBtYXgsXG4gICAgY3VycmVudDogY3VycmVudCxcbiAgICBjaGFuZ2U6IHNtYWxsZXN0Q2hhbmdlXG4gIH0pO1xuXG4gIGlmICghb3ZlcmxhcCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNtYWxsZXN0Q2hhbmdlLnggIT09IDAgJiYgb3ZlcmxhcC54ID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc21hbGxlc3RDaGFuZ2UueSAhPT0gMCAmJiBvdmVybGFwLnkgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgY2FuU2Nyb2xsV2luZG93ID0gZnVuY3Rpb24gY2FuU2Nyb2xsV2luZG93KHZpZXdwb3J0LCBjaGFuZ2UpIHtcbiAgcmV0dXJuIGNhblBhcnRpYWxseVNjcm9sbCh7XG4gICAgY3VycmVudDogdmlld3BvcnQuc2Nyb2xsLmN1cnJlbnQsXG4gICAgbWF4OiB2aWV3cG9ydC5zY3JvbGwubWF4LFxuICAgIGNoYW5nZTogY2hhbmdlXG4gIH0pO1xufTtcbnZhciBnZXRXaW5kb3dPdmVybGFwID0gZnVuY3Rpb24gZ2V0V2luZG93T3ZlcmxhcCh2aWV3cG9ydCwgY2hhbmdlKSB7XG4gIGlmICghY2FuU2Nyb2xsV2luZG93KHZpZXdwb3J0LCBjaGFuZ2UpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbWF4ID0gdmlld3BvcnQuc2Nyb2xsLm1heDtcbiAgdmFyIGN1cnJlbnQgPSB2aWV3cG9ydC5zY3JvbGwuY3VycmVudDtcbiAgcmV0dXJuIGdldE92ZXJsYXAoe1xuICAgIGN1cnJlbnQ6IGN1cnJlbnQsXG4gICAgbWF4OiBtYXgsXG4gICAgY2hhbmdlOiBjaGFuZ2VcbiAgfSk7XG59O1xudmFyIGNhblNjcm9sbERyb3BwYWJsZSA9IGZ1bmN0aW9uIGNhblNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUsIGNoYW5nZSkge1xuICB2YXIgZnJhbWUgPSBkcm9wcGFibGUuZnJhbWU7XG5cbiAgaWYgKCFmcmFtZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYW5QYXJ0aWFsbHlTY3JvbGwoe1xuICAgIGN1cnJlbnQ6IGZyYW1lLnNjcm9sbC5jdXJyZW50LFxuICAgIG1heDogZnJhbWUuc2Nyb2xsLm1heCxcbiAgICBjaGFuZ2U6IGNoYW5nZVxuICB9KTtcbn07XG52YXIgZ2V0RHJvcHBhYmxlT3ZlcmxhcCA9IGZ1bmN0aW9uIGdldERyb3BwYWJsZU92ZXJsYXAoZHJvcHBhYmxlLCBjaGFuZ2UpIHtcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuXG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghY2FuU2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZSwgY2hhbmdlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGdldE92ZXJsYXAoe1xuICAgIGN1cnJlbnQ6IGZyYW1lLnNjcm9sbC5jdXJyZW50LFxuICAgIG1heDogZnJhbWUuc2Nyb2xsLm1heCxcbiAgICBjaGFuZ2U6IGNoYW5nZVxuICB9KTtcbn07XG5cbnZhciBnZXRXaW5kb3dTY3JvbGxDaGFuZ2UgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCxcbiAgICAgIHN1YmplY3QgPSBfcmVmLnN1YmplY3QsXG4gICAgICBjZW50ZXIgPSBfcmVmLmNlbnRlcixcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nO1xuICB2YXIgc2Nyb2xsID0gZ2V0U2Nyb2xsKHtcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIGNvbnRhaW5lcjogdmlld3BvcnQuZnJhbWUsXG4gICAgc3ViamVjdDogc3ViamVjdCxcbiAgICBjZW50ZXI6IGNlbnRlcixcbiAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nOiBzaG91bGRVc2VUaW1lRGFtcGVuaW5nXG4gIH0pO1xuICByZXR1cm4gc2Nyb2xsICYmIGNhblNjcm9sbFdpbmRvdyh2aWV3cG9ydCwgc2Nyb2xsKSA/IHNjcm9sbCA6IG51bGw7XG59KTtcblxudmFyIGdldERyb3BwYWJsZVNjcm9sbENoYW5nZSA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZHJvcHBhYmxlID0gX3JlZi5kcm9wcGFibGUsXG4gICAgICBzdWJqZWN0ID0gX3JlZi5zdWJqZWN0LFxuICAgICAgY2VudGVyID0gX3JlZi5jZW50ZXIsXG4gICAgICBkcmFnU3RhcnRUaW1lID0gX3JlZi5kcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZyA9IF9yZWYuc2hvdWxkVXNlVGltZURhbXBlbmluZztcbiAgdmFyIGZyYW1lID0gZHJvcHBhYmxlLmZyYW1lO1xuXG4gIGlmICghZnJhbWUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzY3JvbGwgPSBnZXRTY3JvbGwoe1xuICAgIGRyYWdTdGFydFRpbWU6IGRyYWdTdGFydFRpbWUsXG4gICAgY29udGFpbmVyOiBmcmFtZS5wYWdlTWFyZ2luQm94LFxuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgY2VudGVyOiBjZW50ZXIsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcbiAgcmV0dXJuIHNjcm9sbCAmJiBjYW5TY3JvbGxEcm9wcGFibGUoZHJvcHBhYmxlLCBzY3JvbGwpID8gc2Nyb2xsIDogbnVsbDtcbn0pO1xuXG52YXIgc2Nyb2xsJDEgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIGRyYWdTdGFydFRpbWUgPSBfcmVmLmRyYWdTdGFydFRpbWUsXG4gICAgICBzaG91bGRVc2VUaW1lRGFtcGVuaW5nID0gX3JlZi5zaG91bGRVc2VUaW1lRGFtcGVuaW5nLFxuICAgICAgc2Nyb2xsV2luZG93ID0gX3JlZi5zY3JvbGxXaW5kb3csXG4gICAgICBzY3JvbGxEcm9wcGFibGUgPSBfcmVmLnNjcm9sbERyb3BwYWJsZTtcbiAgdmFyIGNlbnRlciA9IHN0YXRlLmN1cnJlbnQucGFnZS5ib3JkZXJCb3hDZW50ZXI7XG4gIHZhciBkcmFnZ2FibGUgPSBzdGF0ZS5kaW1lbnNpb25zLmRyYWdnYWJsZXNbc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkXTtcbiAgdmFyIHN1YmplY3QgPSBkcmFnZ2FibGUucGFnZS5tYXJnaW5Cb3g7XG5cbiAgaWYgKHN0YXRlLmlzV2luZG93U2Nyb2xsQWxsb3dlZCkge1xuICAgIHZhciB2aWV3cG9ydCA9IHN0YXRlLnZpZXdwb3J0O1xuXG4gICAgdmFyIF9jaGFuZ2UgPSBnZXRXaW5kb3dTY3JvbGxDaGFuZ2Uoe1xuICAgICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCxcbiAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgICBjZW50ZXI6IGNlbnRlcixcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgICB9KTtcblxuICAgIGlmIChfY2hhbmdlKSB7XG4gICAgICBzY3JvbGxXaW5kb3coX2NoYW5nZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgdmFyIGRyb3BwYWJsZSA9IGdldEJlc3RTY3JvbGxhYmxlRHJvcHBhYmxlKHtcbiAgICBjZW50ZXI6IGNlbnRlcixcbiAgICBkZXN0aW5hdGlvbjogd2hhdElzRHJhZ2dlZE92ZXIoc3RhdGUuaW1wYWN0KSxcbiAgICBkcm9wcGFibGVzOiBzdGF0ZS5kaW1lbnNpb25zLmRyb3BwYWJsZXNcbiAgfSk7XG5cbiAgaWYgKCFkcm9wcGFibGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2hhbmdlID0gZ2V0RHJvcHBhYmxlU2Nyb2xsQ2hhbmdlKHtcbiAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlLFxuICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgY2VudGVyOiBjZW50ZXIsXG4gICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogc2hvdWxkVXNlVGltZURhbXBlbmluZ1xuICB9KTtcblxuICBpZiAoY2hhbmdlKSB7XG4gICAgc2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBjaGFuZ2UpO1xuICB9XG59KTtcblxudmFyIGNyZWF0ZUZsdWlkU2Nyb2xsZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIHNjcm9sbFdpbmRvdyA9IF9yZWYuc2Nyb2xsV2luZG93LFxuICAgICAgc2Nyb2xsRHJvcHBhYmxlID0gX3JlZi5zY3JvbGxEcm9wcGFibGU7XG4gIHZhciBzY2hlZHVsZVdpbmRvd1Njcm9sbCA9IHJhZlNjaGQoc2Nyb2xsV2luZG93KTtcbiAgdmFyIHNjaGVkdWxlRHJvcHBhYmxlU2Nyb2xsID0gcmFmU2NoZChzY3JvbGxEcm9wcGFibGUpO1xuICB2YXIgZHJhZ2dpbmcgPSBudWxsO1xuXG4gIHZhciB0cnlTY3JvbGwgPSBmdW5jdGlvbiB0cnlTY3JvbGwoc3RhdGUpIHtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZmx1aWQgc2Nyb2xsIGlmIG5vdCBkcmFnZ2luZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgX2RyYWdnaW5nID0gZHJhZ2dpbmcsXG4gICAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmcgPSBfZHJhZ2dpbmcuc2hvdWxkVXNlVGltZURhbXBlbmluZyxcbiAgICAgICAgZHJhZ1N0YXJ0VGltZSA9IF9kcmFnZ2luZy5kcmFnU3RhcnRUaW1lO1xuICAgIHNjcm9sbCQxKHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNjcm9sbFdpbmRvdzogc2NoZWR1bGVXaW5kb3dTY3JvbGwsXG4gICAgICBzY3JvbGxEcm9wcGFibGU6IHNjaGVkdWxlRHJvcHBhYmxlU2Nyb2xsLFxuICAgICAgZHJhZ1N0YXJ0VGltZTogZHJhZ1N0YXJ0VGltZSxcbiAgICAgIHNob3VsZFVzZVRpbWVEYW1wZW5pbmc6IHNob3VsZFVzZVRpbWVEYW1wZW5pbmdcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgc3RhcnQkMSA9IGZ1bmN0aW9uIHN0YXJ0JDEoc3RhdGUpIHtcbiAgICBzdGFydCgpO1xuICAgICEhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RhcnQgYXV0byBzY3JvbGxpbmcgd2hlbiBhbHJlYWR5IHN0YXJ0ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGRyYWdTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZhciB3YXNTY3JvbGxOZWVkZWQgPSBmYWxzZTtcblxuICAgIHZhciBmYWtlU2Nyb2xsQ2FsbGJhY2sgPSBmdW5jdGlvbiBmYWtlU2Nyb2xsQ2FsbGJhY2soKSB7XG4gICAgICB3YXNTY3JvbGxOZWVkZWQgPSB0cnVlO1xuICAgIH07XG5cbiAgICBzY3JvbGwkMSh7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBkcmFnU3RhcnRUaW1lOiAwLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogZmFsc2UsXG4gICAgICBzY3JvbGxXaW5kb3c6IGZha2VTY3JvbGxDYWxsYmFjayxcbiAgICAgIHNjcm9sbERyb3BwYWJsZTogZmFrZVNjcm9sbENhbGxiYWNrXG4gICAgfSk7XG4gICAgZHJhZ2dpbmcgPSB7XG4gICAgICBkcmFnU3RhcnRUaW1lOiBkcmFnU3RhcnRUaW1lLFxuICAgICAgc2hvdWxkVXNlVGltZURhbXBlbmluZzogd2FzU2Nyb2xsTmVlZGVkXG4gICAgfTtcbiAgICBmaW5pc2goKTtcblxuICAgIGlmICh3YXNTY3JvbGxOZWVkZWQpIHtcbiAgICAgIHRyeVNjcm9sbChzdGF0ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVXaW5kb3dTY3JvbGwuY2FuY2VsKCk7XG4gICAgc2NoZWR1bGVEcm9wcGFibGVTY3JvbGwuY2FuY2VsKCk7XG4gICAgZHJhZ2dpbmcgPSBudWxsO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0JDEsXG4gICAgc3RvcDogc3RvcCxcbiAgICBzY3JvbGw6IHRyeVNjcm9sbFxuICB9O1xufSk7XG5cbnZhciBjcmVhdGVKdW1wU2Nyb2xsZXIgPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIG1vdmUgPSBfcmVmLm1vdmUsXG4gICAgICBzY3JvbGxEcm9wcGFibGUgPSBfcmVmLnNjcm9sbERyb3BwYWJsZSxcbiAgICAgIHNjcm9sbFdpbmRvdyA9IF9yZWYuc2Nyb2xsV2luZG93O1xuXG4gIHZhciBtb3ZlQnlPZmZzZXQgPSBmdW5jdGlvbiBtb3ZlQnlPZmZzZXQoc3RhdGUsIG9mZnNldCkge1xuICAgIHZhciBjbGllbnQgPSBhZGQoc3RhdGUuY3VycmVudC5jbGllbnQuc2VsZWN0aW9uLCBvZmZzZXQpO1xuICAgIG1vdmUoe1xuICAgICAgY2xpZW50OiBjbGllbnRcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgc2Nyb2xsRHJvcHBhYmxlQXNNdWNoQXNJdENhbiA9IGZ1bmN0aW9uIHNjcm9sbERyb3BwYWJsZUFzTXVjaEFzSXRDYW4oZHJvcHBhYmxlLCBjaGFuZ2UpIHtcbiAgICBpZiAoIWNhblNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUsIGNoYW5nZSkpIHtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuXG4gICAgdmFyIG92ZXJsYXAgPSBnZXREcm9wcGFibGVPdmVybGFwKGRyb3BwYWJsZSwgY2hhbmdlKTtcblxuICAgIGlmICghb3ZlcmxhcCkge1xuICAgICAgc2Nyb2xsRHJvcHBhYmxlKGRyb3BwYWJsZS5kZXNjcmlwdG9yLmlkLCBjaGFuZ2UpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHdoYXRUaGVEcm9wcGFibGVDYW5TY3JvbGwgPSBzdWJ0cmFjdChjaGFuZ2UsIG92ZXJsYXApO1xuICAgIHNjcm9sbERyb3BwYWJsZShkcm9wcGFibGUuZGVzY3JpcHRvci5pZCwgd2hhdFRoZURyb3BwYWJsZUNhblNjcm9sbCk7XG4gICAgdmFyIHJlbWFpbmRlciA9IHN1YnRyYWN0KGNoYW5nZSwgd2hhdFRoZURyb3BwYWJsZUNhblNjcm9sbCk7XG4gICAgcmV0dXJuIHJlbWFpbmRlcjtcbiAgfTtcblxuICB2YXIgc2Nyb2xsV2luZG93QXNNdWNoQXNJdENhbiA9IGZ1bmN0aW9uIHNjcm9sbFdpbmRvd0FzTXVjaEFzSXRDYW4oaXNXaW5kb3dTY3JvbGxBbGxvd2VkLCB2aWV3cG9ydCwgY2hhbmdlKSB7XG4gICAgaWYgKCFpc1dpbmRvd1Njcm9sbEFsbG93ZWQpIHtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuXG4gICAgaWYgKCFjYW5TY3JvbGxXaW5kb3codmlld3BvcnQsIGNoYW5nZSkpIHtcbiAgICAgIHJldHVybiBjaGFuZ2U7XG4gICAgfVxuXG4gICAgdmFyIG92ZXJsYXAgPSBnZXRXaW5kb3dPdmVybGFwKHZpZXdwb3J0LCBjaGFuZ2UpO1xuXG4gICAgaWYgKCFvdmVybGFwKSB7XG4gICAgICBzY3JvbGxXaW5kb3coY2hhbmdlKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciB3aGF0VGhlV2luZG93Q2FuU2Nyb2xsID0gc3VidHJhY3QoY2hhbmdlLCBvdmVybGFwKTtcbiAgICBzY3JvbGxXaW5kb3cod2hhdFRoZVdpbmRvd0NhblNjcm9sbCk7XG4gICAgdmFyIHJlbWFpbmRlciA9IHN1YnRyYWN0KGNoYW5nZSwgd2hhdFRoZVdpbmRvd0NhblNjcm9sbCk7XG4gICAgcmV0dXJuIHJlbWFpbmRlcjtcbiAgfTtcblxuICB2YXIganVtcFNjcm9sbGVyID0gZnVuY3Rpb24ganVtcFNjcm9sbGVyKHN0YXRlKSB7XG4gICAgdmFyIHJlcXVlc3QgPSBzdGF0ZS5zY3JvbGxKdW1wUmVxdWVzdDtcblxuICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZXN0aW5hdGlvbiA9IHdoYXRJc0RyYWdnZWRPdmVyKHN0YXRlLmltcGFjdCk7XG4gICAgIWRlc3RpbmF0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHBlcmZvcm0gYSBqdW1wIHNjcm9sbCB3aGVuIHRoZXJlIGlzIG5vIGRlc3RpbmF0aW9uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBkcm9wcGFibGVSZW1haW5kZXIgPSBzY3JvbGxEcm9wcGFibGVBc011Y2hBc0l0Q2FuKHN0YXRlLmRpbWVuc2lvbnMuZHJvcHBhYmxlc1tkZXN0aW5hdGlvbl0sIHJlcXVlc3QpO1xuXG4gICAgaWYgKCFkcm9wcGFibGVSZW1haW5kZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld3BvcnQgPSBzdGF0ZS52aWV3cG9ydDtcbiAgICB2YXIgd2luZG93UmVtYWluZGVyID0gc2Nyb2xsV2luZG93QXNNdWNoQXNJdENhbihzdGF0ZS5pc1dpbmRvd1Njcm9sbEFsbG93ZWQsIHZpZXdwb3J0LCBkcm9wcGFibGVSZW1haW5kZXIpO1xuXG4gICAgaWYgKCF3aW5kb3dSZW1haW5kZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtb3ZlQnlPZmZzZXQoc3RhdGUsIHdpbmRvd1JlbWFpbmRlcik7XG4gIH07XG5cbiAgcmV0dXJuIGp1bXBTY3JvbGxlcjtcbn0pO1xuXG52YXIgY3JlYXRlQXV0b1Njcm9sbGVyID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBzY3JvbGxEcm9wcGFibGUgPSBfcmVmLnNjcm9sbERyb3BwYWJsZSxcbiAgICAgIHNjcm9sbFdpbmRvdyA9IF9yZWYuc2Nyb2xsV2luZG93LFxuICAgICAgbW92ZSA9IF9yZWYubW92ZTtcbiAgdmFyIGZsdWlkU2Nyb2xsZXIgPSBjcmVhdGVGbHVpZFNjcm9sbGVyKHtcbiAgICBzY3JvbGxXaW5kb3c6IHNjcm9sbFdpbmRvdyxcbiAgICBzY3JvbGxEcm9wcGFibGU6IHNjcm9sbERyb3BwYWJsZVxuICB9KTtcbiAgdmFyIGp1bXBTY3JvbGwgPSBjcmVhdGVKdW1wU2Nyb2xsZXIoe1xuICAgIG1vdmU6IG1vdmUsXG4gICAgc2Nyb2xsV2luZG93OiBzY3JvbGxXaW5kb3csXG4gICAgc2Nyb2xsRHJvcHBhYmxlOiBzY3JvbGxEcm9wcGFibGVcbiAgfSk7XG5cbiAgdmFyIHNjcm9sbCA9IGZ1bmN0aW9uIHNjcm9sbChzdGF0ZSkge1xuICAgIGlmIChzdGF0ZS5waGFzZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5tb3ZlbWVudE1vZGUgPT09ICdGTFVJRCcpIHtcbiAgICAgIGZsdWlkU2Nyb2xsZXIuc2Nyb2xsKHN0YXRlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXN0YXRlLnNjcm9sbEp1bXBSZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAganVtcFNjcm9sbChzdGF0ZSk7XG4gIH07XG5cbiAgdmFyIHNjcm9sbGVyID0ge1xuICAgIHNjcm9sbDogc2Nyb2xsLFxuICAgIHN0YXJ0OiBmbHVpZFNjcm9sbGVyLnN0YXJ0LFxuICAgIHN0b3A6IGZsdWlkU2Nyb2xsZXIuc3RvcFxuICB9O1xuICByZXR1cm4gc2Nyb2xsZXI7XG59KTtcblxudmFyIHByZWZpeCQxID0gJ2RhdGEtcmJkJztcbnZhciBkcmFnSGFuZGxlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYmFzZSA9IHByZWZpeCQxICsgXCItZHJhZy1oYW5kbGVcIjtcbiAgcmV0dXJuIHtcbiAgICBiYXNlOiBiYXNlLFxuICAgIGRyYWdnYWJsZUlkOiBiYXNlICsgXCItZHJhZ2dhYmxlLWlkXCIsXG4gICAgY29udGV4dElkOiBiYXNlICsgXCItY29udGV4dC1pZFwiXG4gIH07XG59KCk7XG52YXIgZHJhZ2dhYmxlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYmFzZSA9IHByZWZpeCQxICsgXCItZHJhZ2dhYmxlXCI7XG4gIHJldHVybiB7XG4gICAgYmFzZTogYmFzZSxcbiAgICBjb250ZXh0SWQ6IGJhc2UgKyBcIi1jb250ZXh0LWlkXCIsXG4gICAgaWQ6IGJhc2UgKyBcIi1pZFwiXG4gIH07XG59KCk7XG52YXIgZHJvcHBhYmxlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYmFzZSA9IHByZWZpeCQxICsgXCItZHJvcHBhYmxlXCI7XG4gIHJldHVybiB7XG4gICAgYmFzZTogYmFzZSxcbiAgICBjb250ZXh0SWQ6IGJhc2UgKyBcIi1jb250ZXh0LWlkXCIsXG4gICAgaWQ6IGJhc2UgKyBcIi1pZFwiXG4gIH07XG59KCk7XG52YXIgc2Nyb2xsQ29udGFpbmVyID0ge1xuICBjb250ZXh0SWQ6IHByZWZpeCQxICsgXCItc2Nyb2xsLWNvbnRhaW5lci1jb250ZXh0LWlkXCJcbn07XG5cbnZhciBtYWtlR2V0U2VsZWN0b3IgPSBmdW5jdGlvbiBtYWtlR2V0U2VsZWN0b3IoY29udGV4dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgIHJldHVybiBcIltcIiArIGF0dHJpYnV0ZSArIFwiPVxcXCJcIiArIGNvbnRleHQgKyBcIlxcXCJdXCI7XG4gIH07XG59O1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24gZ2V0U3R5bGVzKHJ1bGVzLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gcnVsZXMubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgdmFyIHZhbHVlID0gcnVsZS5zdHlsZXNbcHJvcGVydHldO1xuXG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHJldHVybiBydWxlLnNlbGVjdG9yICsgXCIgeyBcIiArIHZhbHVlICsgXCIgfVwiO1xuICB9KS5qb2luKCcgJyk7XG59O1xuXG52YXIgbm9Qb2ludGVyRXZlbnRzID0gJ3BvaW50ZXItZXZlbnRzOiBub25lOyc7XG52YXIgZ2V0U3R5bGVzJDEgPSAoZnVuY3Rpb24gKGNvbnRleHRJZCkge1xuICB2YXIgZ2V0U2VsZWN0b3IgPSBtYWtlR2V0U2VsZWN0b3IoY29udGV4dElkKTtcblxuICB2YXIgZHJhZ0hhbmRsZSQxID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBncmFiQ3Vyc29yID0gXCJcXG4gICAgICBjdXJzb3I6IC13ZWJraXQtZ3JhYjtcXG4gICAgICBjdXJzb3I6IGdyYWI7XFxuICAgIFwiO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RvcjogZ2V0U2VsZWN0b3IoZHJhZ0hhbmRsZS5jb250ZXh0SWQpLFxuICAgICAgc3R5bGVzOiB7XG4gICAgICAgIGFsd2F5czogXCJcXG4gICAgICAgICAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xcbiAgICAgICAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwwLDAsMCk7XFxuICAgICAgICAgIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xcbiAgICAgICAgXCIsXG4gICAgICAgIHJlc3Rpbmc6IGdyYWJDdXJzb3IsXG4gICAgICAgIGRyYWdnaW5nOiBub1BvaW50ZXJFdmVudHMsXG4gICAgICAgIGRyb3BBbmltYXRpbmc6IGdyYWJDdXJzb3JcbiAgICAgIH1cbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGRyYWdnYWJsZSQxID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0cmFuc2l0aW9uID0gXCJcXG4gICAgICB0cmFuc2l0aW9uOiBcIiArIHRyYW5zaXRpb25zLm91dE9mVGhlV2F5ICsgXCI7XFxuICAgIFwiO1xuICAgIHJldHVybiB7XG4gICAgICBzZWxlY3RvcjogZ2V0U2VsZWN0b3IoZHJhZ2dhYmxlLmNvbnRleHRJZCksXG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgZHJhZ2dpbmc6IHRyYW5zaXRpb24sXG4gICAgICAgIGRyb3BBbmltYXRpbmc6IHRyYW5zaXRpb24sXG4gICAgICAgIHVzZXJDYW5jZWw6IHRyYW5zaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGRyb3BwYWJsZSQxID0ge1xuICAgIHNlbGVjdG9yOiBnZXRTZWxlY3Rvcihkcm9wcGFibGUuY29udGV4dElkKSxcbiAgICBzdHlsZXM6IHtcbiAgICAgIGFsd2F5czogXCJvdmVyZmxvdy1hbmNob3I6IG5vbmU7XCJcbiAgICB9XG4gIH07XG4gIHZhciBib2R5ID0ge1xuICAgIHNlbGVjdG9yOiAnYm9keScsXG4gICAgc3R5bGVzOiB7XG4gICAgICBkcmFnZ2luZzogXCJcXG4gICAgICAgIGN1cnNvcjogZ3JhYmJpbmc7XFxuICAgICAgICBjdXJzb3I6IC13ZWJraXQtZ3JhYmJpbmc7XFxuICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgICAgICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgICAgb3ZlcmZsb3ctYW5jaG9yOiBub25lO1xcbiAgICAgIFwiXG4gICAgfVxuICB9O1xuICB2YXIgcnVsZXMgPSBbZHJhZ2dhYmxlJDEsIGRyYWdIYW5kbGUkMSwgZHJvcHBhYmxlJDEsIGJvZHldO1xuICByZXR1cm4ge1xuICAgIGFsd2F5czogZ2V0U3R5bGVzKHJ1bGVzLCAnYWx3YXlzJyksXG4gICAgcmVzdGluZzogZ2V0U3R5bGVzKHJ1bGVzLCAncmVzdGluZycpLFxuICAgIGRyYWdnaW5nOiBnZXRTdHlsZXMocnVsZXMsICdkcmFnZ2luZycpLFxuICAgIGRyb3BBbmltYXRpbmc6IGdldFN0eWxlcyhydWxlcywgJ2Ryb3BBbmltYXRpbmcnKSxcbiAgICB1c2VyQ2FuY2VsOiBnZXRTdHlsZXMocnVsZXMsICd1c2VyQ2FuY2VsJylcbiAgfTtcbn0pO1xuXG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7XG5cbnZhciBnZXRIZWFkID0gZnVuY3Rpb24gZ2V0SGVhZCgpIHtcbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJyk7XG4gICFoZWFkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IGZpbmQgdGhlIGhlYWQgdG8gYXBwZW5kIGEgc3R5bGUgdG8nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBoZWFkO1xufTtcblxudmFyIGNyZWF0ZVN0eWxlRWwgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZUVsKG5vbmNlKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdub25jZScsIG5vbmNlKTtcbiAgfVxuXG4gIGVsLnR5cGUgPSAndGV4dC9jc3MnO1xuICByZXR1cm4gZWw7XG59O1xuXG5mdW5jdGlvbiB1c2VTdHlsZU1hcnNoYWwoY29udGV4dElkLCBub25jZSkge1xuICB2YXIgc3R5bGVzID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldFN0eWxlcyQxKGNvbnRleHRJZCk7XG4gIH0sIFtjb250ZXh0SWRdKTtcbiAgdmFyIGFsd2F5c1JlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIGR5bmFtaWNSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBzZXREeW5hbWljU3R5bGUgPSB1c2VDYWxsYmFjayhtZW1vaXplT25lKGZ1bmN0aW9uIChwcm9wb3NlZCkge1xuICAgIHZhciBlbCA9IGR5bmFtaWNSZWYuY3VycmVudDtcbiAgICAhZWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc2V0IGR5bmFtaWMgc3R5bGUgZWxlbWVudCBpZiBpdCBpcyBub3Qgc2V0JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGVsLnRleHRDb250ZW50ID0gcHJvcG9zZWQ7XG4gIH0pLCBbXSk7XG4gIHZhciBzZXRBbHdheXNTdHlsZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChwcm9wb3NlZCkge1xuICAgIHZhciBlbCA9IGFsd2F5c1JlZi5jdXJyZW50O1xuICAgICFlbCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzZXQgZHluYW1pYyBzdHlsZSBlbGVtZW50IGlmIGl0IGlzIG5vdCBzZXQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZWwudGV4dENvbnRlbnQgPSBwcm9wb3NlZDtcbiAgfSwgW10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAhKCFhbHdheXNSZWYuY3VycmVudCAmJiAhZHluYW1pY1JlZi5jdXJyZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ3N0eWxlIGVsZW1lbnRzIGFscmVhZHkgbW91bnRlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgYWx3YXlzID0gY3JlYXRlU3R5bGVFbChub25jZSk7XG4gICAgdmFyIGR5bmFtaWMgPSBjcmVhdGVTdHlsZUVsKG5vbmNlKTtcbiAgICBhbHdheXNSZWYuY3VycmVudCA9IGFsd2F5cztcbiAgICBkeW5hbWljUmVmLmN1cnJlbnQgPSBkeW5hbWljO1xuICAgIGFsd2F5cy5zZXRBdHRyaWJ1dGUocHJlZml4JDEgKyBcIi1hbHdheXNcIiwgY29udGV4dElkKTtcbiAgICBkeW5hbWljLnNldEF0dHJpYnV0ZShwcmVmaXgkMSArIFwiLWR5bmFtaWNcIiwgY29udGV4dElkKTtcbiAgICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoYWx3YXlzKTtcbiAgICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoZHluYW1pYyk7XG4gICAgc2V0QWx3YXlzU3R5bGUoc3R5bGVzLmFsd2F5cyk7XG4gICAgc2V0RHluYW1pY1N0eWxlKHN0eWxlcy5yZXN0aW5nKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShyZWYpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSByZWYuY3VycmVudDtcbiAgICAgICAgIWN1cnJlbnQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgdW5tb3VudCByZWYgYXMgaXQgaXMgbm90IHNldCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgZ2V0SGVhZCgpLnJlbW92ZUNoaWxkKGN1cnJlbnQpO1xuICAgICAgICByZWYuY3VycmVudCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICByZW1vdmUoYWx3YXlzUmVmKTtcbiAgICAgIHJlbW92ZShkeW5hbWljUmVmKTtcbiAgICB9O1xuICB9LCBbbm9uY2UsIHNldEFsd2F5c1N0eWxlLCBzZXREeW5hbWljU3R5bGUsIHN0eWxlcy5hbHdheXMsIHN0eWxlcy5yZXN0aW5nLCBjb250ZXh0SWRdKTtcbiAgdmFyIGRyYWdnaW5nID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzZXREeW5hbWljU3R5bGUoc3R5bGVzLmRyYWdnaW5nKTtcbiAgfSwgW3NldER5bmFtaWNTdHlsZSwgc3R5bGVzLmRyYWdnaW5nXSk7XG4gIHZhciBkcm9wcGluZyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICBpZiAocmVhc29uID09PSAnRFJPUCcpIHtcbiAgICAgIHNldER5bmFtaWNTdHlsZShzdHlsZXMuZHJvcEFuaW1hdGluZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0RHluYW1pY1N0eWxlKHN0eWxlcy51c2VyQ2FuY2VsKTtcbiAgfSwgW3NldER5bmFtaWNTdHlsZSwgc3R5bGVzLmRyb3BBbmltYXRpbmcsIHN0eWxlcy51c2VyQ2FuY2VsXSk7XG4gIHZhciByZXN0aW5nID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICghZHluYW1pY1JlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2V0RHluYW1pY1N0eWxlKHN0eWxlcy5yZXN0aW5nKTtcbiAgfSwgW3NldER5bmFtaWNTdHlsZSwgc3R5bGVzLnJlc3RpbmddKTtcbiAgdmFyIG1hcnNoYWwgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZHJhZ2dpbmc6IGRyYWdnaW5nLFxuICAgICAgZHJvcHBpbmc6IGRyb3BwaW5nLFxuICAgICAgcmVzdGluZzogcmVzdGluZ1xuICAgIH07XG4gIH0sIFtkcmFnZ2luZywgZHJvcHBpbmcsIHJlc3RpbmddKTtcbiAgcmV0dXJuIG1hcnNoYWw7XG59XG5cbnZhciBnZXRXaW5kb3dGcm9tRWwgPSAoZnVuY3Rpb24gKGVsKSB7XG4gIHJldHVybiBlbCAmJiBlbC5vd25lckRvY3VtZW50ID8gZWwub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyA6IHdpbmRvdztcbn0pO1xuXG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KGVsKSB7XG4gIHJldHVybiBlbCBpbnN0YW5jZW9mIGdldFdpbmRvd0Zyb21FbChlbCkuSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGZpbmREcmFnSGFuZGxlKGNvbnRleHRJZCwgZHJhZ2dhYmxlSWQpIHtcbiAgdmFyIHNlbGVjdG9yID0gXCJbXCIgKyBkcmFnSGFuZGxlLmNvbnRleHRJZCArIFwiPVxcXCJcIiArIGNvbnRleHRJZCArIFwiXFxcIl1cIjtcbiAgdmFyIHBvc3NpYmxlID0gdG9BcnJheShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG5cbiAgaWYgKCFwb3NzaWJsZS5sZW5ndGgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiVW5hYmxlIHRvIGZpbmQgYW55IGRyYWcgaGFuZGxlcyBpbiB0aGUgY29udGV4dCBcXFwiXCIgKyBjb250ZXh0SWQgKyBcIlxcXCJcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaGFuZGxlID0gZmluZChwb3NzaWJsZSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShkcmFnSGFuZGxlLmRyYWdnYWJsZUlkKSA9PT0gZHJhZ2dhYmxlSWQ7XG4gIH0pO1xuXG4gIGlmICghaGFuZGxlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlVuYWJsZSB0byBmaW5kIGRyYWcgaGFuZGxlIHdpdGggaWQgXFxcIlwiICsgZHJhZ2dhYmxlSWQgKyBcIlxcXCIgYXMgbm8gaGFuZGxlIHdpdGggYSBtYXRjaGluZyBpZCB3YXMgZm91bmRcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoIWlzSHRtbEVsZW1lbnQoaGFuZGxlKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ2RyYWcgaGFuZGxlIG5lZWRzIHRvIGJlIGEgSFRNTEVsZW1lbnQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBoYW5kbGU7XG59XG5cbmZ1bmN0aW9uIHVzZUZvY3VzTWFyc2hhbChjb250ZXh0SWQpIHtcbiAgdmFyIGVudHJpZXNSZWYgPSB1c2VSZWYoe30pO1xuICB2YXIgcmVjb3JkUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgcmVzdG9yZUZvY3VzRnJhbWVSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBpc01vdW50ZWRSZWYgPSB1c2VSZWYoZmFsc2UpO1xuICB2YXIgcmVnaXN0ZXIgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiByZWdpc3RlcihpZCwgZm9jdXMpIHtcbiAgICB2YXIgZW50cnkgPSB7XG4gICAgICBpZDogaWQsXG4gICAgICBmb2N1czogZm9jdXNcbiAgICB9O1xuICAgIGVudHJpZXNSZWYuY3VycmVudFtpZF0gPSBlbnRyeTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5yZWdpc3RlcigpIHtcbiAgICAgIHZhciBlbnRyaWVzID0gZW50cmllc1JlZi5jdXJyZW50O1xuICAgICAgdmFyIGN1cnJlbnQgPSBlbnRyaWVzW2lkXTtcblxuICAgICAgaWYgKGN1cnJlbnQgIT09IGVudHJ5KSB7XG4gICAgICAgIGRlbGV0ZSBlbnRyaWVzW2lkXTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIHZhciB0cnlHaXZlRm9jdXMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB0cnlHaXZlRm9jdXModHJ5R2l2ZUZvY3VzVG8pIHtcbiAgICB2YXIgaGFuZGxlID0gZmluZERyYWdIYW5kbGUoY29udGV4dElkLCB0cnlHaXZlRm9jdXNUbyk7XG5cbiAgICBpZiAoaGFuZGxlICYmIGhhbmRsZSAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgaGFuZGxlLmZvY3VzKCk7XG4gICAgfVxuICB9LCBbY29udGV4dElkXSk7XG4gIHZhciB0cnlTaGlmdFJlY29yZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeVNoaWZ0UmVjb3JkKHByZXZpb3VzLCByZWRpcmVjdFRvKSB7XG4gICAgaWYgKHJlY29yZFJlZi5jdXJyZW50ID09PSBwcmV2aW91cykge1xuICAgICAgcmVjb3JkUmVmLmN1cnJlbnQgPSByZWRpcmVjdFRvO1xuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgdHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB0cnlSZXN0b3JlRm9jdXNSZWNvcmRlZCgpIHtcbiAgICBpZiAocmVzdG9yZUZvY3VzRnJhbWVSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXN0b3JlRm9jdXNGcmFtZVJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc3RvcmVGb2N1c0ZyYW1lUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgICAgdmFyIHJlY29yZCA9IHJlY29yZFJlZi5jdXJyZW50O1xuXG4gICAgICBpZiAocmVjb3JkKSB7XG4gICAgICAgIHRyeUdpdmVGb2N1cyhyZWNvcmQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCBbdHJ5R2l2ZUZvY3VzXSk7XG4gIHZhciB0cnlSZWNvcmRGb2N1cyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeVJlY29yZEZvY3VzKGlkKSB7XG4gICAgcmVjb3JkUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIHZhciBmb2N1c2VkID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblxuICAgIGlmICghZm9jdXNlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChmb2N1c2VkLmdldEF0dHJpYnV0ZShkcmFnSGFuZGxlLmRyYWdnYWJsZUlkKSAhPT0gaWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZWNvcmRSZWYuY3VycmVudCA9IGlkO1xuICB9LCBbXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2xlYXJGcmFtZU9uVW5tb3VudCgpIHtcbiAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB2YXIgZnJhbWVJZCA9IHJlc3RvcmVGb2N1c0ZyYW1lUmVmLmN1cnJlbnQ7XG5cbiAgICAgIGlmIChmcmFtZUlkKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGZyYW1lSWQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgdmFyIG1hcnNoYWwgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyLFxuICAgICAgdHJ5UmVjb3JkRm9jdXM6IHRyeVJlY29yZEZvY3VzLFxuICAgICAgdHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQ6IHRyeVJlc3RvcmVGb2N1c1JlY29yZGVkLFxuICAgICAgdHJ5U2hpZnRSZWNvcmQ6IHRyeVNoaWZ0UmVjb3JkXG4gICAgfTtcbiAgfSwgW3JlZ2lzdGVyLCB0cnlSZWNvcmRGb2N1cywgdHJ5UmVzdG9yZUZvY3VzUmVjb3JkZWQsIHRyeVNoaWZ0UmVjb3JkXSk7XG4gIHJldHVybiBtYXJzaGFsO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWdpc3RyeSgpIHtcbiAgdmFyIGVudHJpZXMgPSB7XG4gICAgZHJhZ2dhYmxlczoge30sXG4gICAgZHJvcHBhYmxlczoge31cbiAgfTtcbiAgdmFyIHN1YnNjcmliZXJzID0gW107XG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGNiKSB7XG4gICAgc3Vic2NyaWJlcnMucHVzaChjYik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgdmFyIGluZGV4ID0gc3Vic2NyaWJlcnMuaW5kZXhPZihjYik7XG5cbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzdWJzY3JpYmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnkoZXZlbnQpIHtcbiAgICBpZiAoc3Vic2NyaWJlcnMubGVuZ3RoKSB7XG4gICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICByZXR1cm4gY2IoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZERyYWdnYWJsZUJ5SWQoaWQpIHtcbiAgICByZXR1cm4gZW50cmllcy5kcmFnZ2FibGVzW2lkXSB8fCBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RHJhZ2dhYmxlQnlJZChpZCkge1xuICAgIHZhciBlbnRyeSA9IGZpbmREcmFnZ2FibGVCeUlkKGlkKTtcbiAgICAhZW50cnkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQ2Fubm90IGZpbmQgZHJhZ2dhYmxlIGVudHJ5IHdpdGggaWQgW1wiICsgaWQgKyBcIl1cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBlbnRyeTtcbiAgfVxuXG4gIHZhciBkcmFnZ2FibGVBUEkgPSB7XG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGVudHJ5KSB7XG4gICAgICBlbnRyaWVzLmRyYWdnYWJsZXNbZW50cnkuZGVzY3JpcHRvci5pZF0gPSBlbnRyeTtcbiAgICAgIG5vdGlmeSh7XG4gICAgICAgIHR5cGU6ICdBRERJVElPTicsXG4gICAgICAgIHZhbHVlOiBlbnRyeVxuICAgICAgfSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShlbnRyeSwgbGFzdCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBlbnRyaWVzLmRyYWdnYWJsZXNbbGFzdC5kZXNjcmlwdG9yLmlkXTtcblxuICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnQudW5pcXVlSWQgIT09IGVudHJ5LnVuaXF1ZUlkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIGVudHJpZXMuZHJhZ2dhYmxlc1tsYXN0LmRlc2NyaXB0b3IuaWRdO1xuICAgICAgZW50cmllcy5kcmFnZ2FibGVzW2VudHJ5LmRlc2NyaXB0b3IuaWRdID0gZW50cnk7XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVyKGVudHJ5KSB7XG4gICAgICB2YXIgZHJhZ2dhYmxlSWQgPSBlbnRyeS5kZXNjcmlwdG9yLmlkO1xuICAgICAgdmFyIGN1cnJlbnQgPSBmaW5kRHJhZ2dhYmxlQnlJZChkcmFnZ2FibGVJZCk7XG5cbiAgICAgIGlmICghY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChlbnRyeS51bmlxdWVJZCAhPT0gY3VycmVudC51bmlxdWVJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBlbnRyaWVzLmRyYWdnYWJsZXNbZHJhZ2dhYmxlSWRdO1xuICAgICAgbm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ1JFTU9WQUwnLFxuICAgICAgICB2YWx1ZTogZW50cnlcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0QnlJZDogZ2V0RHJhZ2dhYmxlQnlJZCxcbiAgICBmaW5kQnlJZDogZmluZERyYWdnYWJsZUJ5SWQsXG4gICAgZXhpc3RzOiBmdW5jdGlvbiBleGlzdHMoaWQpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKGZpbmREcmFnZ2FibGVCeUlkKGlkKSk7XG4gICAgfSxcbiAgICBnZXRBbGxCeVR5cGU6IGZ1bmN0aW9uIGdldEFsbEJ5VHlwZSh0eXBlKSB7XG4gICAgICByZXR1cm4gdmFsdWVzKGVudHJpZXMuZHJhZ2dhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuZGVzY3JpcHRvci50eXBlID09PSB0eXBlO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbmREcm9wcGFibGVCeUlkKGlkKSB7XG4gICAgcmV0dXJuIGVudHJpZXMuZHJvcHBhYmxlc1tpZF0gfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERyb3BwYWJsZUJ5SWQoaWQpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kRHJvcHBhYmxlQnlJZChpZCk7XG4gICAgIWVudHJ5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkNhbm5vdCBmaW5kIGRyb3BwYWJsZSBlbnRyeSB3aXRoIGlkIFtcIiArIGlkICsgXCJdXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZW50cnk7XG4gIH1cblxuICB2YXIgZHJvcHBhYmxlQVBJID0ge1xuICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcihlbnRyeSkge1xuICAgICAgZW50cmllcy5kcm9wcGFibGVzW2VudHJ5LmRlc2NyaXB0b3IuaWRdID0gZW50cnk7XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyOiBmdW5jdGlvbiB1bnJlZ2lzdGVyKGVudHJ5KSB7XG4gICAgICB2YXIgY3VycmVudCA9IGZpbmREcm9wcGFibGVCeUlkKGVudHJ5LmRlc2NyaXB0b3IuaWQpO1xuXG4gICAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW50cnkudW5pcXVlSWQgIT09IGN1cnJlbnQudW5pcXVlSWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgZW50cmllcy5kcm9wcGFibGVzW2VudHJ5LmRlc2NyaXB0b3IuaWRdO1xuICAgIH0sXG4gICAgZ2V0QnlJZDogZ2V0RHJvcHBhYmxlQnlJZCxcbiAgICBmaW5kQnlJZDogZmluZERyb3BwYWJsZUJ5SWQsXG4gICAgZXhpc3RzOiBmdW5jdGlvbiBleGlzdHMoaWQpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKGZpbmREcm9wcGFibGVCeUlkKGlkKSk7XG4gICAgfSxcbiAgICBnZXRBbGxCeVR5cGU6IGZ1bmN0aW9uIGdldEFsbEJ5VHlwZSh0eXBlKSB7XG4gICAgICByZXR1cm4gdmFsdWVzKGVudHJpZXMuZHJvcHBhYmxlcykuZmlsdGVyKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuZGVzY3JpcHRvci50eXBlID09PSB0eXBlO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGNsZWFuKCkge1xuICAgIGVudHJpZXMuZHJhZ2dhYmxlcyA9IHt9O1xuICAgIGVudHJpZXMuZHJvcHBhYmxlcyA9IHt9O1xuICAgIHN1YnNjcmliZXJzLmxlbmd0aCA9IDA7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRyYWdnYWJsZTogZHJhZ2dhYmxlQVBJLFxuICAgIGRyb3BwYWJsZTogZHJvcHBhYmxlQVBJLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGNsZWFuOiBjbGVhblxuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VSZWdpc3RyeSgpIHtcbiAgdmFyIHJlZ2lzdHJ5ID0gdXNlTWVtbyhjcmVhdGVSZWdpc3RyeSwgW10pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlZ2lzdHJ5LmNsZWFuKTtcbiAgICB9O1xuICB9LCBbcmVnaXN0cnldKTtcbiAgcmV0dXJuIHJlZ2lzdHJ5O1xufVxuXG52YXIgU3RvcmVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxudmFyIGdldEJvZHlFbGVtZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAhYm9keSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBmaW5kIGRvY3VtZW50LmJvZHknKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBib2R5O1xufSk7XG5cbnZhciB2aXN1YWxseUhpZGRlbiA9IHtcbiAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gIHdpZHRoOiAnMXB4JyxcbiAgaGVpZ2h0OiAnMXB4JyxcbiAgbWFyZ2luOiAnLTFweCcsXG4gIGJvcmRlcjogJzAnLFxuICBwYWRkaW5nOiAnMCcsXG4gIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgY2xpcDogJ3JlY3QoMCAwIDAgMCknLFxuICAnY2xpcC1wYXRoJzogJ2luc2V0KDEwMCUpJ1xufTtcblxudmFyIGdldElkID0gZnVuY3Rpb24gZ2V0SWQoY29udGV4dElkKSB7XG4gIHJldHVybiBcInJiZC1hbm5vdW5jZW1lbnQtXCIgKyBjb250ZXh0SWQ7XG59O1xuZnVuY3Rpb24gdXNlQW5ub3VuY2VyKGNvbnRleHRJZCkge1xuICB2YXIgaWQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SWQoY29udGV4dElkKTtcbiAgfSwgW2NvbnRleHRJZF0pO1xuICB2YXIgcmVmID0gdXNlUmVmKG51bGwpO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcmVmLmN1cnJlbnQgPSBlbDtcbiAgICBlbC5pZCA9IGlkO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ2Fzc2VydGl2ZScpO1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnYXJpYS1hdG9taWMnLCAndHJ1ZScpO1xuXG4gICAgX2V4dGVuZHMoZWwuc3R5bGUsIHZpc3VhbGx5SGlkZGVuKTtcblxuICAgIGdldEJvZHlFbGVtZW50KCkuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIHJldHVybiBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICAgIHZhciBib2R5ID0gZ2V0Qm9keUVsZW1lbnQoKTtcblxuICAgICAgICBpZiAoYm9keS5jb250YWlucyhlbCkpIHtcbiAgICAgICAgICBib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbCA9PT0gcmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICByZWYuY3VycmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH0sIFtpZF0pO1xuICB2YXIgYW5ub3VuY2UgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgIHZhciBlbCA9IHJlZi5jdXJyZW50O1xuXG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC50ZXh0Q29udGVudCA9IG1lc3NhZ2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIEEgc2NyZWVuIHJlYWRlciBtZXNzYWdlIHdhcyB0cnlpbmcgdG8gYmUgYW5ub3VuY2VkIGJ1dCBpdCB3YXMgdW5hYmxlIHRvIGRvIHNvLlxcbiAgICAgIFRoaXMgY2FuIG9jY3VyIGlmIHlvdSB1bm1vdW50IHlvdXIgPERyYWdEcm9wQ29udGV4dCAvPiBpbiB5b3VyIG9uRHJhZ0VuZC5cXG4gICAgICBDb25zaWRlciBjYWxsaW5nIHByb3ZpZGVkLmFubm91bmNlKCkgYmVmb3JlIHRoZSB1bm1vdW50IHNvIHRoYXQgdGhlIGluc3RydWN0aW9uIHdpbGxcXG4gICAgICBub3QgYmUgbG9zdCBmb3IgdXNlcnMgcmVseWluZyBvbiBhIHNjcmVlbiByZWFkZXIuXFxuXFxuICAgICAgTWVzc2FnZSBub3QgcGFzc2VkIHRvIHNjcmVlbiByZWFkZXI6XFxuXFxuICAgICAgXFxcIlwiICsgbWVzc2FnZSArIFwiXFxcIlxcbiAgICBcIikgOiB2b2lkIDA7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIGFubm91bmNlO1xufVxuXG52YXIgY291bnQgPSAwO1xudmFyIGRlZmF1bHRzID0ge1xuICBzZXBhcmF0b3I6ICc6Oidcbn07XG5mdW5jdGlvbiByZXNldCgpIHtcbiAgY291bnQgPSAwO1xufVxuZnVuY3Rpb24gdXNlVW5pcXVlSWQocHJlZml4LCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0gZGVmYXVsdHM7XG4gIH1cblxuICByZXR1cm4gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiXCIgKyBwcmVmaXggKyBvcHRpb25zLnNlcGFyYXRvciArIGNvdW50Kys7XG4gIH0sIFtvcHRpb25zLnNlcGFyYXRvciwgcHJlZml4XSk7XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRJZChfcmVmKSB7XG4gIHZhciBjb250ZXh0SWQgPSBfcmVmLmNvbnRleHRJZCxcbiAgICAgIHVuaXF1ZUlkID0gX3JlZi51bmlxdWVJZDtcbiAgcmV0dXJuIFwicmJkLWhpZGRlbi10ZXh0LVwiICsgY29udGV4dElkICsgXCItXCIgKyB1bmlxdWVJZDtcbn1cbmZ1bmN0aW9uIHVzZUhpZGRlblRleHRFbGVtZW50KF9yZWYyKSB7XG4gIHZhciBjb250ZXh0SWQgPSBfcmVmMi5jb250ZXh0SWQsXG4gICAgICB0ZXh0ID0gX3JlZjIudGV4dDtcbiAgdmFyIHVuaXF1ZUlkID0gdXNlVW5pcXVlSWQoJ2hpZGRlbi10ZXh0Jywge1xuICAgIHNlcGFyYXRvcjogJy0nXG4gIH0pO1xuICB2YXIgaWQgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudElkKHtcbiAgICAgIGNvbnRleHRJZDogY29udGV4dElkLFxuICAgICAgdW5pcXVlSWQ6IHVuaXF1ZUlkXG4gICAgfSk7XG4gIH0sIFt1bmlxdWVJZCwgY29udGV4dElkXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiBtb3VudCgpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbC5pZCA9IGlkO1xuICAgIGVsLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGdldEJvZHlFbGVtZW50KCkuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgdmFyIGJvZHkgPSBnZXRCb2R5RWxlbWVudCgpO1xuXG4gICAgICBpZiAoYm9keS5jb250YWlucyhlbCkpIHtcbiAgICAgICAgYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2lkLCB0ZXh0XSk7XG4gIHJldHVybiBpZDtcbn1cblxudmFyIEFwcENvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG52YXIgcGVlckRlcGVuZGVuY2llcyA9IHtcblx0cmVhY3Q6IFwiXjE2LjguNSB8fCBeMTcuMC4wIHx8IF4xOC4wLjBcIixcblx0XCJyZWFjdC1kb21cIjogXCJeMTYuOC41IHx8IF4xNy4wLjAgfHwgXjE4LjAuMFwiXG59O1xuXG52YXIgc2VtdmVyID0gLyhcXGQrKVxcLihcXGQrKVxcLihcXGQrKS87XG5cbnZhciBnZXRWZXJzaW9uID0gZnVuY3Rpb24gZ2V0VmVyc2lvbih2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gc2VtdmVyLmV4ZWModmFsdWUpO1xuICAhKHJlc3VsdCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJVbmFibGUgdG8gcGFyc2UgUmVhY3QgdmVyc2lvbiBcIiArIHZhbHVlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBtYWpvciA9IE51bWJlcihyZXN1bHRbMV0pO1xuICB2YXIgbWlub3IgPSBOdW1iZXIocmVzdWx0WzJdKTtcbiAgdmFyIHBhdGNoID0gTnVtYmVyKHJlc3VsdFszXSk7XG4gIHJldHVybiB7XG4gICAgbWFqb3I6IG1ham9yLFxuICAgIG1pbm9yOiBtaW5vcixcbiAgICBwYXRjaDogcGF0Y2gsXG4gICAgcmF3OiB2YWx1ZVxuICB9O1xufTtcblxudmFyIGlzU2F0aXNmaWVkID0gZnVuY3Rpb24gaXNTYXRpc2ZpZWQoZXhwZWN0ZWQsIGFjdHVhbCkge1xuICBpZiAoYWN0dWFsLm1ham9yID4gZXhwZWN0ZWQubWFqb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChhY3R1YWwubWFqb3IgPCBleHBlY3RlZC5tYWpvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhY3R1YWwubWlub3IgPiBleHBlY3RlZC5taW5vcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGFjdHVhbC5taW5vciA8IGV4cGVjdGVkLm1pbm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGFjdHVhbC5wYXRjaCA+PSBleHBlY3RlZC5wYXRjaDtcbn07XG5cbnZhciBjaGVja1JlYWN0VmVyc2lvbiA9IChmdW5jdGlvbiAocGVlckRlcFZhbHVlLCBhY3R1YWxWYWx1ZSkge1xuICB2YXIgcGVlckRlcCA9IGdldFZlcnNpb24ocGVlckRlcFZhbHVlKTtcbiAgdmFyIGFjdHVhbCA9IGdldFZlcnNpb24oYWN0dWFsVmFsdWUpO1xuXG4gIGlmIChpc1NhdGlzZmllZChwZWVyRGVwLCBhY3R1YWwpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICBSZWFjdCB2ZXJzaW9uOiBbXCIgKyBhY3R1YWwucmF3ICsgXCJdXFxuICAgIGRvZXMgbm90IHNhdGlzZnkgZXhwZWN0ZWQgcGVlciBkZXBlbmRlbmN5IHZlcnNpb246IFtcIiArIHBlZXJEZXAucmF3ICsgXCJdXFxuXFxuICAgIFRoaXMgY2FuIHJlc3VsdCBpbiBydW4gdGltZSBidWdzLCBhbmQgZXZlbiBmYXRhbCBjcmFzaGVzXFxuICBcIikgOiB2b2lkIDA7XG59KTtcblxudmFyIHN1ZmZpeCA9IFwiXFxuICBXZSBleHBlY3QgYSBodG1sNSBkb2N0eXBlOiA8IWRvY3R5cGUgaHRtbD5cXG4gIFRoaXMgaXMgdG8gZW5zdXJlIGNvbnNpc3RlbnQgYnJvd3NlciBsYXlvdXQgYW5kIG1lYXN1cmVtZW50XFxuXFxuICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9ndWlkZXMvZG9jdHlwZS5tZFxcblwiO1xudmFyIGNoZWNrRG9jdHlwZSA9IChmdW5jdGlvbiAoZG9jKSB7XG4gIHZhciBkb2N0eXBlID0gZG9jLmRvY3R5cGU7XG5cbiAgaWYgKCFkb2N0eXBlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIE5vIDwhZG9jdHlwZSBodG1sPiBmb3VuZC5cXG5cXG4gICAgICBcIiArIHN1ZmZpeCArIFwiXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZG9jdHlwZS5uYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdodG1sJykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBVbmV4cGVjdGVkIDwhZG9jdHlwZT4gZm91bmQ6IChcIiArIGRvY3R5cGUubmFtZSArIFwiKVxcblxcbiAgICAgIFwiICsgc3VmZml4ICsgXCJcXG4gICAgXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgaWYgKGRvY3R5cGUucHVibGljSWQgIT09ICcnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICAgIFVuZXhwZWN0ZWQgPCFkb2N0eXBlPiBwdWJsaWNJZCBmb3VuZDogKFwiICsgZG9jdHlwZS5wdWJsaWNJZCArIFwiKVxcbiAgICAgIEEgaHRtbDUgZG9jdHlwZSBkb2VzIG5vdCBoYXZlIGEgcHVibGljSWRcXG5cXG4gICAgICBcIiArIHN1ZmZpeCArIFwiXFxuICAgIFwiKSA6IHZvaWQgMDtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHVzZURldih1c2VIb29rKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdXNlSG9vaygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVzZURldlNldHVwV2FybmluZyhmbiwgaW5wdXRzKSB7XG4gIHVzZURldihmdW5jdGlvbiAoKSB7XG4gICAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yKFwiXFxuICAgICAgICAgIEEgc2V0dXAgcHJvYmxlbSB3YXMgZW5jb3VudGVyZWQuXFxuXFxuICAgICAgICAgID4gXCIgKyBlLm1lc3NhZ2UgKyBcIlxcbiAgICAgICAgXCIpO1xuICAgICAgfVxuICAgIH0sIGlucHV0cyk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1c2VTdGFydHVwVmFsaWRhdGlvbigpIHtcbiAgdXNlRGV2U2V0dXBXYXJuaW5nKGZ1bmN0aW9uICgpIHtcbiAgICBjaGVja1JlYWN0VmVyc2lvbihwZWVyRGVwZW5kZW5jaWVzLnJlYWN0LCBSZWFjdC52ZXJzaW9uKTtcbiAgICBjaGVja0RvY3R5cGUoZG9jdW1lbnQpO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIHVzZVByZXZpb3VzKGN1cnJlbnQpIHtcbiAgdmFyIHJlZiA9IHVzZVJlZihjdXJyZW50KTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZWYuY3VycmVudCA9IGN1cnJlbnQ7XG4gIH0pO1xuICByZXR1cm4gcmVmO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBsb2NrID0gbnVsbDtcblxuICBmdW5jdGlvbiBpc0NsYWltZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4obG9jayk7XG4gIH1cblxuICBmdW5jdGlvbiBpc0FjdGl2ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbG9jaztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYWltKGFiYW5kb24pIHtcbiAgICAhIWxvY2sgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY2xhaW0gbG9jayBhcyBpdCBpcyBhbHJlYWR5IGNsYWltZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIG5ld0xvY2sgPSB7XG4gICAgICBhYmFuZG9uOiBhYmFuZG9uXG4gICAgfTtcbiAgICBsb2NrID0gbmV3TG9jaztcbiAgICByZXR1cm4gbmV3TG9jaztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbGVhc2UoKSB7XG4gICAgIWxvY2sgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcmVsZWFzZSBsb2NrIHdoZW4gdGhlcmUgaXMgbm8gbG9jaycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NrID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeUFiYW5kb24oKSB7XG4gICAgaWYgKGxvY2spIHtcbiAgICAgIGxvY2suYWJhbmRvbigpO1xuICAgICAgcmVsZWFzZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaXNDbGFpbWVkOiBpc0NsYWltZWQsXG4gICAgaXNBY3RpdmU6IGlzQWN0aXZlLFxuICAgIGNsYWltOiBjbGFpbSxcbiAgICByZWxlYXNlOiByZWxlYXNlLFxuICAgIHRyeUFiYW5kb246IHRyeUFiYW5kb25cbiAgfTtcbn1cblxudmFyIHRhYiA9IDk7XG52YXIgZW50ZXIgPSAxMztcbnZhciBlc2NhcGUgPSAyNztcbnZhciBzcGFjZSA9IDMyO1xudmFyIHBhZ2VVcCA9IDMzO1xudmFyIHBhZ2VEb3duID0gMzQ7XG52YXIgZW5kID0gMzU7XG52YXIgaG9tZSA9IDM2O1xudmFyIGFycm93TGVmdCA9IDM3O1xudmFyIGFycm93VXAgPSAzODtcbnZhciBhcnJvd1JpZ2h0ID0gMzk7XG52YXIgYXJyb3dEb3duID0gNDA7XG5cbnZhciBfcHJldmVudGVkS2V5cztcbnZhciBwcmV2ZW50ZWRLZXlzID0gKF9wcmV2ZW50ZWRLZXlzID0ge30sIF9wcmV2ZW50ZWRLZXlzW2VudGVyXSA9IHRydWUsIF9wcmV2ZW50ZWRLZXlzW3RhYl0gPSB0cnVlLCBfcHJldmVudGVkS2V5cyk7XG52YXIgcHJldmVudFN0YW5kYXJkS2V5RXZlbnRzID0gKGZ1bmN0aW9uIChldmVudCkge1xuICBpZiAocHJldmVudGVkS2V5c1tldmVudC5rZXlDb2RlXSkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn0pO1xuXG52YXIgc3VwcG9ydGVkRXZlbnROYW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYmFzZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcblxuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBiYXNlO1xuICB9XG5cbiAgdmFyIGNhbmRpZGF0ZXMgPSBbYmFzZSwgXCJtc1wiICsgYmFzZSwgXCJ3ZWJraXRcIiArIGJhc2UsIFwibW96XCIgKyBiYXNlLCBcIm9cIiArIGJhc2VdO1xuICB2YXIgc3VwcG9ydGVkID0gZmluZChjYW5kaWRhdGVzLCBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIFwib25cIiArIGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcbiAgfSk7XG4gIHJldHVybiBzdXBwb3J0ZWQgfHwgYmFzZTtcbn0oKTtcblxudmFyIHByaW1hcnlCdXR0b24gPSAwO1xudmFyIHNsb3BweUNsaWNrVGhyZXNob2xkID0gNTtcblxuZnVuY3Rpb24gaXNTbG9wcHlDbGlja1RocmVzaG9sZEV4Y2VlZGVkKG9yaWdpbmFsLCBjdXJyZW50KSB7XG4gIHJldHVybiBNYXRoLmFicyhjdXJyZW50LnggLSBvcmlnaW5hbC54KSA+PSBzbG9wcHlDbGlja1RocmVzaG9sZCB8fCBNYXRoLmFicyhjdXJyZW50LnkgLSBvcmlnaW5hbC55KSA+PSBzbG9wcHlDbGlja1RocmVzaG9sZDtcbn1cblxudmFyIGlkbGUkMSA9IHtcbiAgdHlwZTogJ0lETEUnXG59O1xuXG5mdW5jdGlvbiBnZXRDYXB0dXJlQmluZGluZ3MoX3JlZikge1xuICB2YXIgY2FuY2VsID0gX3JlZi5jYW5jZWwsXG4gICAgICBjb21wbGV0ZWQgPSBfcmVmLmNvbXBsZXRlZCxcbiAgICAgIGdldFBoYXNlID0gX3JlZi5nZXRQaGFzZSxcbiAgICAgIHNldFBoYXNlID0gX3JlZi5zZXRQaGFzZTtcbiAgcmV0dXJuIFt7XG4gICAgZXZlbnROYW1lOiAnbW91c2Vtb3ZlJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIHZhciBidXR0b24gPSBldmVudC5idXR0b24sXG4gICAgICAgICAgY2xpZW50WCA9IGV2ZW50LmNsaWVudFgsXG4gICAgICAgICAgY2xpZW50WSA9IGV2ZW50LmNsaWVudFk7XG5cbiAgICAgIGlmIChidXR0b24gIT09IHByaW1hcnlCdXR0b24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcG9pbnQgPSB7XG4gICAgICAgIHg6IGNsaWVudFgsXG4gICAgICAgIHk6IGNsaWVudFlcbiAgICAgIH07XG4gICAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuXG4gICAgICBpZiAocGhhc2UudHlwZSA9PT0gJ0RSQUdHSU5HJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBwaGFzZS5hY3Rpb25zLm1vdmUocG9pbnQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICEocGhhc2UudHlwZSA9PT0gJ1BFTkRJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBiZSBJRExFJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIHBlbmRpbmcgPSBwaGFzZS5wb2ludDtcblxuICAgICAgaWYgKCFpc1Nsb3BweUNsaWNrVGhyZXNob2xkRXhjZWVkZWQocGVuZGluZywgcG9pbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciBhY3Rpb25zID0gcGhhc2UuYWN0aW9ucy5mbHVpZExpZnQocG9pbnQpO1xuICAgICAgc2V0UGhhc2Uoe1xuICAgICAgICB0eXBlOiAnRFJBR0dJTkcnLFxuICAgICAgICBhY3Rpb25zOiBhY3Rpb25zXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdtb3VzZXVwJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIHZhciBwaGFzZSA9IGdldFBoYXNlKCk7XG5cbiAgICAgIGlmIChwaGFzZS50eXBlICE9PSAnRFJBR0dJTkcnKSB7XG4gICAgICAgIGNhbmNlbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBwaGFzZS5hY3Rpb25zLmRyb3Aoe1xuICAgICAgICBzaG91bGRCbG9ja05leHRDbGljazogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBjb21wbGV0ZWQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdtb3VzZWRvd24nLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgaWYgKGdldFBoYXNlKCkudHlwZSA9PT0gJ0RSQUdHSU5HJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBjYW5jZWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdrZXlkb3duJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIHZhciBwaGFzZSA9IGdldFBoYXNlKCk7XG5cbiAgICAgIGlmIChwaGFzZS50eXBlID09PSAnUEVORElORycpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGVzY2FwZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwcmV2ZW50U3RhbmRhcmRLZXlFdmVudHMoZXZlbnQpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3Jlc2l6ZScsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnc2Nyb2xsJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9LFxuICAgIGZuOiBmdW5jdGlvbiBmbigpIHtcbiAgICAgIGlmIChnZXRQaGFzZSgpLnR5cGUgPT09ICdQRU5ESU5HJykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd3ZWJraXRtb3VzZWZvcmNlZG93bicsXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuICAgICAgIShwaGFzZS50eXBlICE9PSAnSURMRScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnVW5leHBlY3RlZCBwaGFzZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgICAgaWYgKHBoYXNlLmFjdGlvbnMuc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MoKSkge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogc3VwcG9ydGVkRXZlbnROYW1lLFxuICAgIGZuOiBjYW5jZWxcbiAgfV07XG59XG5cbmZ1bmN0aW9uIHVzZU1vdXNlU2Vuc29yKGFwaSkge1xuICB2YXIgcGhhc2VSZWYgPSB1c2VSZWYoaWRsZSQxKTtcbiAgdmFyIHVuYmluZEV2ZW50c1JlZiA9IHVzZVJlZihub29wKTtcbiAgdmFyIHN0YXJ0Q2FwdHVyZUJpbmRpbmcgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXZlbnROYW1lOiAnbW91c2Vkb3duJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBvbk1vdXNlRG93bihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5idXR0b24gIT09IHByaW1hcnlCdXR0b24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcmFnZ2FibGVJZCA9IGFwaS5maW5kQ2xvc2VzdERyYWdnYWJsZUlkKGV2ZW50KTtcblxuICAgICAgICBpZiAoIWRyYWdnYWJsZUlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbnMgPSBhcGkudHJ5R2V0TG9jayhkcmFnZ2FibGVJZCwgc3RvcCwge1xuICAgICAgICAgIHNvdXJjZUV2ZW50OiBldmVudFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWFjdGlvbnMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgcG9pbnQgPSB7XG4gICAgICAgICAgeDogZXZlbnQuY2xpZW50WCxcbiAgICAgICAgICB5OiBldmVudC5jbGllbnRZXG4gICAgICAgIH07XG4gICAgICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50KCk7XG4gICAgICAgIHN0YXJ0UGVuZGluZ0RyYWcoYWN0aW9ucywgcG9pbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFthcGldKTtcbiAgdmFyIHByZXZlbnRGb3JjZVByZXNzQmluZGluZyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBldmVudE5hbWU6ICd3ZWJraXRtb3VzZWZvcmNld2lsbGJlZ2luJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpZCA9IGFwaS5maW5kQ2xvc2VzdERyYWdnYWJsZUlkKGV2ZW50KTtcblxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhcGkuZmluZE9wdGlvbnNGb3JEcmFnZ2FibGUoaWQpO1xuXG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3VsZFJlc3BlY3RGb3JjZVByZXNzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhcGkuY2FuR2V0TG9jayhpZCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFthcGldKTtcbiAgdmFyIGxpc3RlbkZvckNhcHR1cmUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiBsaXN0ZW5Gb3JDYXB0dXJlKCkge1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfTtcbiAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCA9IGJpbmRFdmVudHMod2luZG93LCBbcHJldmVudEZvcmNlUHJlc3NCaW5kaW5nLCBzdGFydENhcHR1cmVCaW5kaW5nXSwgb3B0aW9ucyk7XG4gIH0sIFtwcmV2ZW50Rm9yY2VQcmVzc0JpbmRpbmcsIHN0YXJ0Q2FwdHVyZUJpbmRpbmddKTtcbiAgdmFyIHN0b3AgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBwaGFzZVJlZi5jdXJyZW50O1xuXG4gICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ0lETEUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGhhc2VSZWYuY3VycmVudCA9IGlkbGUkMTtcbiAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgIGxpc3RlbkZvckNhcHR1cmUoKTtcbiAgfSwgW2xpc3RlbkZvckNhcHR1cmVdKTtcbiAgdmFyIGNhbmNlbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGhhc2UgPSBwaGFzZVJlZi5jdXJyZW50O1xuICAgIHN0b3AoKTtcblxuICAgIGlmIChwaGFzZS50eXBlID09PSAnRFJBR0dJTkcnKSB7XG4gICAgICBwaGFzZS5hY3Rpb25zLmNhbmNlbCh7XG4gICAgICAgIHNob3VsZEJsb2NrTmV4dENsaWNrOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocGhhc2UudHlwZSA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICBwaGFzZS5hY3Rpb25zLmFib3J0KCk7XG4gICAgfVxuICB9LCBbc3RvcF0pO1xuICB2YXIgYmluZENhcHR1cmluZ0V2ZW50cyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIGJpbmRDYXB0dXJpbmdFdmVudHMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9O1xuICAgIHZhciBiaW5kaW5ncyA9IGdldENhcHR1cmVCaW5kaW5ncyh7XG4gICAgICBjYW5jZWw6IGNhbmNlbCxcbiAgICAgIGNvbXBsZXRlZDogc3RvcCxcbiAgICAgIGdldFBoYXNlOiBmdW5jdGlvbiBnZXRQaGFzZSgpIHtcbiAgICAgICAgcmV0dXJuIHBoYXNlUmVmLmN1cnJlbnQ7XG4gICAgICB9LFxuICAgICAgc2V0UGhhc2U6IGZ1bmN0aW9uIHNldFBoYXNlKHBoYXNlKSB7XG4gICAgICAgIHBoYXNlUmVmLmN1cnJlbnQgPSBwaGFzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCA9IGJpbmRFdmVudHMod2luZG93LCBiaW5kaW5ncywgb3B0aW9ucyk7XG4gIH0sIFtjYW5jZWwsIHN0b3BdKTtcbiAgdmFyIHN0YXJ0UGVuZGluZ0RyYWcgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiBzdGFydFBlbmRpbmdEcmFnKGFjdGlvbnMsIHBvaW50KSB7XG4gICAgIShwaGFzZVJlZi5jdXJyZW50LnR5cGUgPT09ICdJRExFJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCB0byBtb3ZlIGZyb20gSURMRSB0byBQRU5ESU5HIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcGhhc2VSZWYuY3VycmVudCA9IHtcbiAgICAgIHR5cGU6ICdQRU5ESU5HJyxcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGFjdGlvbnM6IGFjdGlvbnNcbiAgICB9O1xuICAgIGJpbmRDYXB0dXJpbmdFdmVudHMoKTtcbiAgfSwgW2JpbmRDYXB0dXJpbmdFdmVudHNdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBsaXN0ZW5Gb3JDYXB0dXJlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgIH07XG4gIH0sIFtsaXN0ZW5Gb3JDYXB0dXJlXSk7XG59XG5cbnZhciBfc2Nyb2xsSnVtcEtleXM7XG5cbmZ1bmN0aW9uIG5vb3AkMSgpIHt9XG5cbnZhciBzY3JvbGxKdW1wS2V5cyA9IChfc2Nyb2xsSnVtcEtleXMgPSB7fSwgX3Njcm9sbEp1bXBLZXlzW3BhZ2VEb3duXSA9IHRydWUsIF9zY3JvbGxKdW1wS2V5c1twYWdlVXBdID0gdHJ1ZSwgX3Njcm9sbEp1bXBLZXlzW2hvbWVdID0gdHJ1ZSwgX3Njcm9sbEp1bXBLZXlzW2VuZF0gPSB0cnVlLCBfc2Nyb2xsSnVtcEtleXMpO1xuXG5mdW5jdGlvbiBnZXREcmFnZ2luZ0JpbmRpbmdzKGFjdGlvbnMsIHN0b3ApIHtcbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIHN0b3AoKTtcbiAgICBhY3Rpb25zLmNhbmNlbCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZHJvcCgpIHtcbiAgICBzdG9wKCk7XG4gICAgYWN0aW9ucy5kcm9wKCk7XG4gIH1cblxuICByZXR1cm4gW3tcbiAgICBldmVudE5hbWU6ICdrZXlkb3duJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBlc2NhcGUpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IHNwYWNlKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGRyb3AoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gYXJyb3dEb3duKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGFjdGlvbnMubW92ZURvd24oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gYXJyb3dVcCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBhY3Rpb25zLm1vdmVVcCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBhcnJvd1JpZ2h0KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGFjdGlvbnMubW92ZVJpZ2h0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGFycm93TGVmdCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBhY3Rpb25zLm1vdmVMZWZ0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjcm9sbEp1bXBLZXlzW2V2ZW50LmtleUNvZGVdKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcHJldmVudFN0YW5kYXJkS2V5RXZlbnRzKGV2ZW50KTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdtb3VzZWRvd24nLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ21vdXNldXAnLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ2NsaWNrJyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICd0b3VjaHN0YXJ0JyxcbiAgICBmbjogY2FuY2VsXG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdyZXNpemUnLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3doZWVsJyxcbiAgICBmbjogY2FuY2VsLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6IHN1cHBvcnRlZEV2ZW50TmFtZSxcbiAgICBmbjogY2FuY2VsXG4gIH1dO1xufVxuXG5mdW5jdGlvbiB1c2VLZXlib2FyZFNlbnNvcihhcGkpIHtcbiAgdmFyIHVuYmluZEV2ZW50c1JlZiA9IHVzZVJlZihub29wJDEpO1xuICB2YXIgc3RhcnRDYXB0dXJlQmluZGluZyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBldmVudE5hbWU6ICdrZXlkb3duJyxcbiAgICAgIGZuOiBmdW5jdGlvbiBvbktleURvd24oZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSAhPT0gc3BhY2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZHJhZ2dhYmxlSWQgPSBhcGkuZmluZENsb3Nlc3REcmFnZ2FibGVJZChldmVudCk7XG5cbiAgICAgICAgaWYgKCFkcmFnZ2FibGVJZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcmVEcmFnID0gYXBpLnRyeUdldExvY2soZHJhZ2dhYmxlSWQsIHN0b3AsIHtcbiAgICAgICAgICBzb3VyY2VFdmVudDogZXZlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFwcmVEcmFnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIGlzQ2FwdHVyaW5nID0gdHJ1ZTtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBwcmVEcmFnLnNuYXBMaWZ0KCk7XG4gICAgICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50KCk7XG5cbiAgICAgICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICAhaXNDYXB0dXJpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RvcCBjYXB0dXJpbmcgYSBrZXlib2FyZCBkcmFnIHdoZW4gbm90IGNhcHR1cmluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICBpc0NhcHR1cmluZyA9IGZhbHNlO1xuICAgICAgICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50KCk7XG4gICAgICAgICAgbGlzdGVuRm9yQ2FwdHVyZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBiaW5kRXZlbnRzKHdpbmRvdywgZ2V0RHJhZ2dpbmdCaW5kaW5ncyhhY3Rpb25zLCBzdG9wKSwge1xuICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2FwaV0pO1xuICB2YXIgbGlzdGVuRm9yQ2FwdHVyZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHRyeVN0YXJ0Q2FwdHVyZSgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH07XG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW3N0YXJ0Q2FwdHVyZUJpbmRpbmddLCBvcHRpb25zKTtcbiAgfSwgW3N0YXJ0Q2FwdHVyZUJpbmRpbmddKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiBtb3VudCgpIHtcbiAgICBsaXN0ZW5Gb3JDYXB0dXJlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgIH07XG4gIH0sIFtsaXN0ZW5Gb3JDYXB0dXJlXSk7XG59XG5cbnZhciBpZGxlJDIgPSB7XG4gIHR5cGU6ICdJRExFJ1xufTtcbnZhciB0aW1lRm9yTG9uZ1ByZXNzID0gMTIwO1xudmFyIGZvcmNlUHJlc3NUaHJlc2hvbGQgPSAwLjE1O1xuXG5mdW5jdGlvbiBnZXRXaW5kb3dCaW5kaW5ncyhfcmVmKSB7XG4gIHZhciBjYW5jZWwgPSBfcmVmLmNhbmNlbCxcbiAgICAgIGdldFBoYXNlID0gX3JlZi5nZXRQaGFzZTtcbiAgcmV0dXJuIFt7XG4gICAgZXZlbnROYW1lOiAnb3JpZW50YXRpb25jaGFuZ2UnLFxuICAgIGZuOiBjYW5jZWxcbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3Jlc2l6ZScsXG4gICAgZm46IGNhbmNlbFxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAnY29udGV4dG1lbnUnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6ICdrZXlkb3duJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGlmIChnZXRQaGFzZSgpLnR5cGUgIT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IGVzY2FwZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBjYW5jZWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6IHN1cHBvcnRlZEV2ZW50TmFtZSxcbiAgICBmbjogY2FuY2VsXG4gIH1dO1xufVxuXG5mdW5jdGlvbiBnZXRIYW5kbGVCaW5kaW5ncyhfcmVmMikge1xuICB2YXIgY2FuY2VsID0gX3JlZjIuY2FuY2VsLFxuICAgICAgY29tcGxldGVkID0gX3JlZjIuY29tcGxldGVkLFxuICAgICAgZ2V0UGhhc2UgPSBfcmVmMi5nZXRQaGFzZTtcbiAgcmV0dXJuIFt7XG4gICAgZXZlbnROYW1lOiAndG91Y2htb3ZlJyxcbiAgICBvcHRpb25zOiB7XG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0sXG4gICAgZm46IGZ1bmN0aW9uIGZuKGV2ZW50KSB7XG4gICAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuXG4gICAgICBpZiAocGhhc2UudHlwZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgICBjYW5jZWwoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwaGFzZS5oYXNNb3ZlZCA9IHRydWU7XG4gICAgICB2YXIgX2V2ZW50JHRvdWNoZXMkID0gZXZlbnQudG91Y2hlc1swXSxcbiAgICAgICAgICBjbGllbnRYID0gX2V2ZW50JHRvdWNoZXMkLmNsaWVudFgsXG4gICAgICAgICAgY2xpZW50WSA9IF9ldmVudCR0b3VjaGVzJC5jbGllbnRZO1xuICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICB4OiBjbGllbnRYLFxuICAgICAgICB5OiBjbGllbnRZXG4gICAgICB9O1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHBoYXNlLmFjdGlvbnMubW92ZShwb2ludCk7XG4gICAgfVxuICB9LCB7XG4gICAgZXZlbnROYW1lOiAndG91Y2hlbmQnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcblxuICAgICAgaWYgKHBoYXNlLnR5cGUgIT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHBoYXNlLmFjdGlvbnMuZHJvcCh7XG4gICAgICAgIHNob3VsZEJsb2NrTmV4dENsaWNrOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGNvbXBsZXRlZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3RvdWNoY2FuY2VsJyxcbiAgICBmbjogZnVuY3Rpb24gZm4oZXZlbnQpIHtcbiAgICAgIGlmIChnZXRQaGFzZSgpLnR5cGUgIT09ICdEUkFHR0lORycpIHtcbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGV2ZW50TmFtZTogJ3RvdWNoZm9yY2VjaGFuZ2UnLFxuICAgIGZuOiBmdW5jdGlvbiBmbihldmVudCkge1xuICAgICAgdmFyIHBoYXNlID0gZ2V0UGhhc2UoKTtcbiAgICAgICEocGhhc2UudHlwZSAhPT0gJ0lETEUnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcblxuICAgICAgaWYgKCF0b3VjaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpc0ZvcmNlUHJlc3MgPSB0b3VjaC5mb3JjZSA+PSBmb3JjZVByZXNzVGhyZXNob2xkO1xuXG4gICAgICBpZiAoIWlzRm9yY2VQcmVzcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG91bGRSZXNwZWN0ID0gcGhhc2UuYWN0aW9ucy5zaG91bGRSZXNwZWN0Rm9yY2VQcmVzcygpO1xuXG4gICAgICBpZiAocGhhc2UudHlwZSA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICAgIGlmIChzaG91bGRSZXNwZWN0KSB7XG4gICAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG91bGRSZXNwZWN0KSB7XG4gICAgICAgIGlmIChwaGFzZS5oYXNNb3ZlZCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FuY2VsKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBldmVudE5hbWU6IHN1cHBvcnRlZEV2ZW50TmFtZSxcbiAgICBmbjogY2FuY2VsXG4gIH1dO1xufVxuXG5mdW5jdGlvbiB1c2VUb3VjaFNlbnNvcihhcGkpIHtcbiAgdmFyIHBoYXNlUmVmID0gdXNlUmVmKGlkbGUkMik7XG4gIHZhciB1bmJpbmRFdmVudHNSZWYgPSB1c2VSZWYobm9vcCk7XG4gIHZhciBnZXRQaGFzZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIGdldFBoYXNlKCkge1xuICAgIHJldHVybiBwaGFzZVJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG4gIHZhciBzZXRQaGFzZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHNldFBoYXNlKHBoYXNlKSB7XG4gICAgcGhhc2VSZWYuY3VycmVudCA9IHBoYXNlO1xuICB9LCBbXSk7XG4gIHZhciBzdGFydENhcHR1cmVCaW5kaW5nID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50TmFtZTogJ3RvdWNoc3RhcnQnLFxuICAgICAgZm46IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcmFnZ2FibGVJZCA9IGFwaS5maW5kQ2xvc2VzdERyYWdnYWJsZUlkKGV2ZW50KTtcblxuICAgICAgICBpZiAoIWRyYWdnYWJsZUlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGlvbnMgPSBhcGkudHJ5R2V0TG9jayhkcmFnZ2FibGVJZCwgc3RvcCwge1xuICAgICAgICAgIHNvdXJjZUV2ZW50OiBldmVudFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWFjdGlvbnMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xuICAgICAgICB2YXIgY2xpZW50WCA9IHRvdWNoLmNsaWVudFgsXG4gICAgICAgICAgICBjbGllbnRZID0gdG91Y2guY2xpZW50WTtcbiAgICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICAgIHg6IGNsaWVudFgsXG4gICAgICAgICAgeTogY2xpZW50WVxuICAgICAgICB9O1xuICAgICAgICB1bmJpbmRFdmVudHNSZWYuY3VycmVudCgpO1xuICAgICAgICBzdGFydFBlbmRpbmdEcmFnKGFjdGlvbnMsIHBvaW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbYXBpXSk7XG4gIHZhciBsaXN0ZW5Gb3JDYXB0dXJlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gbGlzdGVuRm9yQ2FwdHVyZSgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH07XG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBiaW5kRXZlbnRzKHdpbmRvdywgW3N0YXJ0Q2FwdHVyZUJpbmRpbmddLCBvcHRpb25zKTtcbiAgfSwgW3N0YXJ0Q2FwdHVyZUJpbmRpbmddKTtcbiAgdmFyIHN0b3AgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBwaGFzZVJlZi5jdXJyZW50O1xuXG4gICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ0lETEUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICBjbGVhclRpbWVvdXQoY3VycmVudC5sb25nUHJlc3NUaW1lcklkKTtcbiAgICB9XG5cbiAgICBzZXRQaGFzZShpZGxlJDIpO1xuICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50KCk7XG4gICAgbGlzdGVuRm9yQ2FwdHVyZSgpO1xuICB9LCBbbGlzdGVuRm9yQ2FwdHVyZSwgc2V0UGhhc2VdKTtcbiAgdmFyIGNhbmNlbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGhhc2UgPSBwaGFzZVJlZi5jdXJyZW50O1xuICAgIHN0b3AoKTtcblxuICAgIGlmIChwaGFzZS50eXBlID09PSAnRFJBR0dJTkcnKSB7XG4gICAgICBwaGFzZS5hY3Rpb25zLmNhbmNlbCh7XG4gICAgICAgIHNob3VsZEJsb2NrTmV4dENsaWNrOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocGhhc2UudHlwZSA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICBwaGFzZS5hY3Rpb25zLmFib3J0KCk7XG4gICAgfVxuICB9LCBbc3RvcF0pO1xuICB2YXIgYmluZENhcHR1cmluZ0V2ZW50cyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIGJpbmRDYXB0dXJpbmdFdmVudHMoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9O1xuICAgIHZhciBhcmdzID0ge1xuICAgICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgICBjb21wbGV0ZWQ6IHN0b3AsXG4gICAgICBnZXRQaGFzZTogZ2V0UGhhc2VcbiAgICB9O1xuICAgIHZhciB1bmJpbmRUYXJnZXQgPSBiaW5kRXZlbnRzKHdpbmRvdywgZ2V0SGFuZGxlQmluZGluZ3MoYXJncyksIG9wdGlvbnMpO1xuICAgIHZhciB1bmJpbmRXaW5kb3cgPSBiaW5kRXZlbnRzKHdpbmRvdywgZ2V0V2luZG93QmluZGluZ3MoYXJncyksIG9wdGlvbnMpO1xuXG4gICAgdW5iaW5kRXZlbnRzUmVmLmN1cnJlbnQgPSBmdW5jdGlvbiB1bmJpbmRBbGwoKSB7XG4gICAgICB1bmJpbmRUYXJnZXQoKTtcbiAgICAgIHVuYmluZFdpbmRvdygpO1xuICAgIH07XG4gIH0sIFtjYW5jZWwsIGdldFBoYXNlLCBzdG9wXSk7XG4gIHZhciBzdGFydERyYWdnaW5nID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gc3RhcnREcmFnZ2luZygpIHtcbiAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuICAgICEocGhhc2UudHlwZSA9PT0gJ1BFTkRJTkcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3Qgc3RhcnQgZHJhZ2dpbmcgZnJvbSBwaGFzZSBcIiArIHBoYXNlLnR5cGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9ucyA9IHBoYXNlLmFjdGlvbnMuZmx1aWRMaWZ0KHBoYXNlLnBvaW50KTtcbiAgICBzZXRQaGFzZSh7XG4gICAgICB0eXBlOiAnRFJBR0dJTkcnLFxuICAgICAgYWN0aW9uczogYWN0aW9ucyxcbiAgICAgIGhhc01vdmVkOiBmYWxzZVxuICAgIH0pO1xuICB9LCBbZ2V0UGhhc2UsIHNldFBoYXNlXSk7XG4gIHZhciBzdGFydFBlbmRpbmdEcmFnID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gc3RhcnRQZW5kaW5nRHJhZyhhY3Rpb25zLCBwb2ludCkge1xuICAgICEoZ2V0UGhhc2UoKS50eXBlID09PSAnSURMRScpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdG8gbW92ZSBmcm9tIElETEUgdG8gUEVORElORyBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBsb25nUHJlc3NUaW1lcklkID0gc2V0VGltZW91dChzdGFydERyYWdnaW5nLCB0aW1lRm9yTG9uZ1ByZXNzKTtcbiAgICBzZXRQaGFzZSh7XG4gICAgICB0eXBlOiAnUEVORElORycsXG4gICAgICBwb2ludDogcG9pbnQsXG4gICAgICBhY3Rpb25zOiBhY3Rpb25zLFxuICAgICAgbG9uZ1ByZXNzVGltZXJJZDogbG9uZ1ByZXNzVGltZXJJZFxuICAgIH0pO1xuICAgIGJpbmRDYXB0dXJpbmdFdmVudHMoKTtcbiAgfSwgW2JpbmRDYXB0dXJpbmdFdmVudHMsIGdldFBoYXNlLCBzZXRQaGFzZSwgc3RhcnREcmFnZ2luZ10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIGxpc3RlbkZvckNhcHR1cmUoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICAgIHVuYmluZEV2ZW50c1JlZi5jdXJyZW50KCk7XG4gICAgICB2YXIgcGhhc2UgPSBnZXRQaGFzZSgpO1xuXG4gICAgICBpZiAocGhhc2UudHlwZSA9PT0gJ1BFTkRJTkcnKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChwaGFzZS5sb25nUHJlc3NUaW1lcklkKTtcbiAgICAgICAgc2V0UGhhc2UoaWRsZSQyKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZ2V0UGhhc2UsIGxpc3RlbkZvckNhcHR1cmUsIHNldFBoYXNlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gd2Via2l0SGFjaygpIHtcbiAgICB2YXIgdW5iaW5kID0gYmluZEV2ZW50cyh3aW5kb3csIFt7XG4gICAgICBldmVudE5hbWU6ICd0b3VjaG1vdmUnLFxuICAgICAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIGNhcHR1cmU6IGZhbHNlLFxuICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gdW5iaW5kO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIHVzZVZhbGlkYXRlU2Vuc29ySG9va3Moc2Vuc29ySG9va3MpIHtcbiAgdXNlRGV2KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldmlvdXNSZWYgPSB1c2VQcmV2aW91cyhzZW5zb3JIb29rcyk7XG4gICAgdXNlRGV2U2V0dXBXYXJuaW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgICEocHJldmlvdXNSZWYuY3VycmVudC5sZW5ndGggPT09IHNlbnNvckhvb2tzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgY2hhbmdlIHRoZSBhbW91bnQgb2Ygc2Vuc29yIGhvb2tzIGFmdGVyIG1vdW50aW5nJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH0pO1xuICB9KTtcbn1cblxudmFyIGludGVyYWN0aXZlVGFnTmFtZXMgPSB7XG4gIGlucHV0OiB0cnVlLFxuICBidXR0b246IHRydWUsXG4gIHRleHRhcmVhOiB0cnVlLFxuICBzZWxlY3Q6IHRydWUsXG4gIG9wdGlvbjogdHJ1ZSxcbiAgb3B0Z3JvdXA6IHRydWUsXG4gIHZpZGVvOiB0cnVlLFxuICBhdWRpbzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gaXNBbkludGVyYWN0aXZlRWxlbWVudChwYXJlbnQsIGN1cnJlbnQpIHtcbiAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBoYXNBbkludGVyYWN0aXZlVGFnID0gQm9vbGVhbihpbnRlcmFjdGl2ZVRhZ05hbWVzW2N1cnJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXSk7XG5cbiAgaWYgKGhhc0FuSW50ZXJhY3RpdmVUYWcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBhdHRyaWJ1dGUgPSBjdXJyZW50LmdldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJyk7XG5cbiAgaWYgKGF0dHJpYnV0ZSA9PT0gJ3RydWUnIHx8IGF0dHJpYnV0ZSA9PT0gJycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChjdXJyZW50ID09PSBwYXJlbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNBbkludGVyYWN0aXZlRWxlbWVudChwYXJlbnQsIGN1cnJlbnQucGFyZW50RWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIGlzRXZlbnRJbkludGVyYWN0aXZlRWxlbWVudChkcmFnZ2FibGUsIGV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cbiAgaWYgKCFpc0h0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNBbkludGVyYWN0aXZlRWxlbWVudChkcmFnZ2FibGUsIHRhcmdldCk7XG59XG5cbnZhciBnZXRCb3JkZXJCb3hDZW50ZXJQb3NpdGlvbiA9IChmdW5jdGlvbiAoZWwpIHtcbiAgcmV0dXJuIGdldFJlY3QoZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLmNlbnRlcjtcbn0pO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnQoZWwpIHtcbiAgcmV0dXJuIGVsIGluc3RhbmNlb2YgZ2V0V2luZG93RnJvbUVsKGVsKS5FbGVtZW50O1xufVxuXG52YXIgc3VwcG9ydGVkTWF0Y2hlc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBiYXNlID0gJ21hdGNoZXMnO1xuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlcyA9IFtiYXNlLCAnbXNNYXRjaGVzU2VsZWN0b3InLCAnd2Via2l0TWF0Y2hlc1NlbGVjdG9yJ107XG4gIHZhciB2YWx1ZSA9IGZpbmQoY2FuZGlkYXRlcywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZSBpbiBFbGVtZW50LnByb3RvdHlwZTtcbiAgfSk7XG4gIHJldHVybiB2YWx1ZSB8fCBiYXNlO1xufSgpO1xuXG5mdW5jdGlvbiBjbG9zZXN0UG9ueWZpbGwoZWwsIHNlbGVjdG9yKSB7XG4gIGlmIChlbCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoZWxbc3VwcG9ydGVkTWF0Y2hlc05hbWVdKHNlbGVjdG9yKSkge1xuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIHJldHVybiBjbG9zZXN0UG9ueWZpbGwoZWwucGFyZW50RWxlbWVudCwgc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0JDEoZWwsIHNlbGVjdG9yKSB7XG4gIGlmIChlbC5jbG9zZXN0KSB7XG4gICAgcmV0dXJuIGVsLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICB9XG5cbiAgcmV0dXJuIGNsb3Nlc3RQb255ZmlsbChlbCwgc2VsZWN0b3IpO1xufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3Rvcihjb250ZXh0SWQpIHtcbiAgcmV0dXJuIFwiW1wiICsgZHJhZ0hhbmRsZS5jb250ZXh0SWQgKyBcIj1cXFwiXCIgKyBjb250ZXh0SWQgKyBcIlxcXCJdXCI7XG59XG5cbmZ1bmN0aW9uIGZpbmRDbG9zZXN0RHJhZ0hhbmRsZUZyb21FdmVudChjb250ZXh0SWQsIGV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQodGFyZ2V0KSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ2V2ZW50LnRhcmdldCBtdXN0IGJlIGEgRWxlbWVudCcpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoY29udGV4dElkKTtcbiAgdmFyIGhhbmRsZSA9IGNsb3Nlc3QkMSh0YXJnZXQsIHNlbGVjdG9yKTtcblxuICBpZiAoIWhhbmRsZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFpc0h0bWxFbGVtZW50KGhhbmRsZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCdkcmFnIGhhbmRsZSBtdXN0IGJlIGEgSFRNTEVsZW1lbnQnKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBoYW5kbGU7XG59XG5cbmZ1bmN0aW9uIHRyeUdldENsb3Nlc3REcmFnZ2FibGVJZEZyb21FdmVudChjb250ZXh0SWQsIGV2ZW50KSB7XG4gIHZhciBoYW5kbGUgPSBmaW5kQ2xvc2VzdERyYWdIYW5kbGVGcm9tRXZlbnQoY29udGV4dElkLCBldmVudCk7XG5cbiAgaWYgKCFoYW5kbGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBoYW5kbGUuZ2V0QXR0cmlidXRlKGRyYWdIYW5kbGUuZHJhZ2dhYmxlSWQpO1xufVxuXG5mdW5jdGlvbiBmaW5kRHJhZ2dhYmxlKGNvbnRleHRJZCwgZHJhZ2dhYmxlSWQpIHtcbiAgdmFyIHNlbGVjdG9yID0gXCJbXCIgKyBkcmFnZ2FibGUuY29udGV4dElkICsgXCI9XFxcIlwiICsgY29udGV4dElkICsgXCJcXFwiXVwiO1xuICB2YXIgcG9zc2libGUgPSB0b0FycmF5KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgdmFyIGRyYWdnYWJsZSQxID0gZmluZChwb3NzaWJsZSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShkcmFnZ2FibGUuaWQpID09PSBkcmFnZ2FibGVJZDtcbiAgfSk7XG5cbiAgaWYgKCFkcmFnZ2FibGUkMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKCFpc0h0bWxFbGVtZW50KGRyYWdnYWJsZSQxKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ0RyYWdnYWJsZSBlbGVtZW50IGlzIG5vdCBhIEhUTUxFbGVtZW50JykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZHJhZ2dhYmxlJDE7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59XG5cbmZ1bmN0aW9uIF9pc0FjdGl2ZShfcmVmKSB7XG4gIHZhciBleHBlY3RlZCA9IF9yZWYuZXhwZWN0ZWQsXG4gICAgICBwaGFzZSA9IF9yZWYucGhhc2UsXG4gICAgICBpc0xvY2tBY3RpdmUgPSBfcmVmLmlzTG9ja0FjdGl2ZSxcbiAgICAgIHNob3VsZFdhcm4gPSBfcmVmLnNob3VsZFdhcm47XG5cbiAgaWYgKCFpc0xvY2tBY3RpdmUoKSkge1xuICAgIGlmIChzaG91bGRXYXJuKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgICBDYW5ub3QgcGVyZm9ybSBhY3Rpb24uXFxuICAgICAgICBUaGUgc2Vuc29yIG5vIGxvbmdlciBoYXMgYW4gYWN0aW9uIGxvY2suXFxuXFxuICAgICAgICBUaXBzOlxcblxcbiAgICAgICAgLSBUaHJvdyBhd2F5IHlvdXIgYWN0aW9uIGhhbmRsZXJzIHdoZW4gZm9yY2VTdG9wKCkgaXMgY2FsbGVkXFxuICAgICAgICAtIENoZWNrIGFjdGlvbnMuaXNBY3RpdmUoKSBpZiB5b3UgcmVhbGx5IG5lZWQgdG9cXG4gICAgICBcIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGV4cGVjdGVkICE9PSBwaGFzZSkge1xuICAgIGlmIChzaG91bGRXYXJuKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgICAgICBDYW5ub3QgcGVyZm9ybSBhY3Rpb24uXFxuICAgICAgICBUaGUgYWN0aW9ucyB5b3UgdXNlZCBiZWxvbmcgdG8gYW4gb3V0ZGF0ZWQgcGhhc2VcXG5cXG4gICAgICAgIEN1cnJlbnQgcGhhc2U6IFwiICsgZXhwZWN0ZWQgKyBcIlxcbiAgICAgICAgWW91IGNhbGxlZCBhbiBhY3Rpb24gZnJvbSBvdXRkYXRlZCBwaGFzZTogXCIgKyBwaGFzZSArIFwiXFxuXFxuICAgICAgICBUaXBzOlxcblxcbiAgICAgICAgLSBEbyBub3QgdXNlIHByZURyYWdBY3Rpb25zIGFjdGlvbnMgYWZ0ZXIgY2FsbGluZyBwcmVEcmFnQWN0aW9ucy5saWZ0KClcXG4gICAgICBcIikgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNhblN0YXJ0KF9yZWYyKSB7XG4gIHZhciBsb2NrQVBJID0gX3JlZjIubG9ja0FQSSxcbiAgICAgIHN0b3JlID0gX3JlZjIuc3RvcmUsXG4gICAgICByZWdpc3RyeSA9IF9yZWYyLnJlZ2lzdHJ5LFxuICAgICAgZHJhZ2dhYmxlSWQgPSBfcmVmMi5kcmFnZ2FibGVJZDtcblxuICBpZiAobG9ja0FQSS5pc0NsYWltZWQoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbnRyeSA9IHJlZ2lzdHJ5LmRyYWdnYWJsZS5maW5kQnlJZChkcmFnZ2FibGVJZCk7XG5cbiAgaWYgKCFlbnRyeSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJVbmFibGUgdG8gZmluZCBkcmFnZ2FibGUgd2l0aCBpZDogXCIgKyBkcmFnZ2FibGVJZCkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCFlbnRyeS5vcHRpb25zLmlzRW5hYmxlZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICghY2FuU3RhcnREcmFnKHN0b3JlLmdldFN0YXRlKCksIGRyYWdnYWJsZUlkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB0cnlTdGFydChfcmVmMykge1xuICB2YXIgbG9ja0FQSSA9IF9yZWYzLmxvY2tBUEksXG4gICAgICBjb250ZXh0SWQgPSBfcmVmMy5jb250ZXh0SWQsXG4gICAgICBzdG9yZSA9IF9yZWYzLnN0b3JlLFxuICAgICAgcmVnaXN0cnkgPSBfcmVmMy5yZWdpc3RyeSxcbiAgICAgIGRyYWdnYWJsZUlkID0gX3JlZjMuZHJhZ2dhYmxlSWQsXG4gICAgICBmb3JjZVNlbnNvclN0b3AgPSBfcmVmMy5mb3JjZVNlbnNvclN0b3AsXG4gICAgICBzb3VyY2VFdmVudCA9IF9yZWYzLnNvdXJjZUV2ZW50O1xuICB2YXIgc2hvdWxkU3RhcnQgPSBjYW5TdGFydCh7XG4gICAgbG9ja0FQSTogbG9ja0FQSSxcbiAgICBzdG9yZTogc3RvcmUsXG4gICAgcmVnaXN0cnk6IHJlZ2lzdHJ5LFxuICAgIGRyYWdnYWJsZUlkOiBkcmFnZ2FibGVJZFxuICB9KTtcblxuICBpZiAoIXNob3VsZFN0YXJ0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZW50cnkgPSByZWdpc3RyeS5kcmFnZ2FibGUuZ2V0QnlJZChkcmFnZ2FibGVJZCk7XG4gIHZhciBlbCA9IGZpbmREcmFnZ2FibGUoY29udGV4dElkLCBlbnRyeS5kZXNjcmlwdG9yLmlkKTtcblxuICBpZiAoIWVsKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlVuYWJsZSB0byBmaW5kIGRyYWdnYWJsZSBlbGVtZW50IHdpdGggaWQ6IFwiICsgZHJhZ2dhYmxlSWQpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHNvdXJjZUV2ZW50ICYmICFlbnRyeS5vcHRpb25zLmNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzICYmIGlzRXZlbnRJbkludGVyYWN0aXZlRWxlbWVudChlbCwgc291cmNlRXZlbnQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbG9jayA9IGxvY2tBUEkuY2xhaW0oZm9yY2VTZW5zb3JTdG9wIHx8IG5vb3ApO1xuICB2YXIgcGhhc2UgPSAnUFJFX0RSQUcnO1xuXG4gIGZ1bmN0aW9uIGdldFNob3VsZFJlc3BlY3RGb3JjZVByZXNzKCkge1xuICAgIHJldHVybiBlbnRyeS5vcHRpb25zLnNob3VsZFJlc3BlY3RGb3JjZVByZXNzO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNMb2NrQWN0aXZlKCkge1xuICAgIHJldHVybiBsb2NrQVBJLmlzQWN0aXZlKGxvY2spO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5RGlzcGF0Y2goZXhwZWN0ZWQsIGdldEFjdGlvbikge1xuICAgIGlmIChfaXNBY3RpdmUoe1xuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgcGhhc2U6IHBoYXNlLFxuICAgICAgaXNMb2NrQWN0aXZlOiBpc0xvY2tBY3RpdmUsXG4gICAgICBzaG91bGRXYXJuOiB0cnVlXG4gICAgfSkpIHtcbiAgICAgIHN0b3JlLmRpc3BhdGNoKGdldEFjdGlvbigpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdHJ5RGlzcGF0Y2hXaGVuRHJhZ2dpbmcgPSB0cnlEaXNwYXRjaC5iaW5kKG51bGwsICdEUkFHR0lORycpO1xuXG4gIGZ1bmN0aW9uIGxpZnQkMShhcmdzKSB7XG4gICAgZnVuY3Rpb24gY29tcGxldGVkKCkge1xuICAgICAgbG9ja0FQSS5yZWxlYXNlKCk7XG4gICAgICBwaGFzZSA9ICdDT01QTEVURUQnO1xuICAgIH1cblxuICAgIGlmIChwaGFzZSAhPT0gJ1BSRV9EUkFHJykge1xuICAgICAgY29tcGxldGVkKCk7XG4gICAgICAhKHBoYXNlID09PSAnUFJFX0RSQUcnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDYW5ub3QgbGlmdCBpbiBwaGFzZSBcIiArIHBoYXNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgc3RvcmUuZGlzcGF0Y2gobGlmdChhcmdzLmxpZnRBY3Rpb25BcmdzKSk7XG4gICAgcGhhc2UgPSAnRFJBR0dJTkcnO1xuXG4gICAgZnVuY3Rpb24gZmluaXNoKHJlYXNvbiwgb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgIHNob3VsZEJsb2NrTmV4dENsaWNrOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBhcmdzLmNsZWFudXAoKTtcblxuICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkQmxvY2tOZXh0Q2xpY2spIHtcbiAgICAgICAgdmFyIHVuYmluZCA9IGJpbmRFdmVudHMod2luZG93LCBbe1xuICAgICAgICAgIGV2ZW50TmFtZTogJ2NsaWNrJyxcbiAgICAgICAgICBmbjogcHJldmVudERlZmF1bHQsXG4gICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgb25jZTogdHJ1ZSxcbiAgICAgICAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuICAgICAgICBzZXRUaW1lb3V0KHVuYmluZCk7XG4gICAgICB9XG5cbiAgICAgIGNvbXBsZXRlZCgpO1xuICAgICAgc3RvcmUuZGlzcGF0Y2goZHJvcCh7XG4gICAgICAgIHJlYXNvbjogcmVhc29uXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGlzQWN0aXZlOiBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9pc0FjdGl2ZSh7XG4gICAgICAgICAgZXhwZWN0ZWQ6ICdEUkFHR0lORycsXG4gICAgICAgICAgcGhhc2U6IHBoYXNlLFxuICAgICAgICAgIGlzTG9ja0FjdGl2ZTogaXNMb2NrQWN0aXZlLFxuICAgICAgICAgIHNob3VsZFdhcm46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNob3VsZFJlc3BlY3RGb3JjZVByZXNzOiBnZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyxcbiAgICAgIGRyb3A6IGZ1bmN0aW9uIGRyb3Aob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZmluaXNoKCdEUk9QJywgb3B0aW9ucyk7XG4gICAgICB9LFxuICAgICAgY2FuY2VsOiBmdW5jdGlvbiBjYW5jZWwob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZmluaXNoKCdDQU5DRUwnLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LCBhcmdzLmFjdGlvbnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmx1aWRMaWZ0KGNsaWVudFNlbGVjdGlvbikge1xuICAgIHZhciBtb3ZlJDEgPSByYWZTY2hkKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG1vdmUoe1xuICAgICAgICAgIGNsaWVudDogY2xpZW50XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGFwaSA9IGxpZnQkMSh7XG4gICAgICBsaWZ0QWN0aW9uQXJnczoge1xuICAgICAgICBpZDogZHJhZ2dhYmxlSWQsXG4gICAgICAgIGNsaWVudFNlbGVjdGlvbjogY2xpZW50U2VsZWN0aW9uLFxuICAgICAgICBtb3ZlbWVudE1vZGU6ICdGTFVJRCdcbiAgICAgIH0sXG4gICAgICBjbGVhbnVwOiBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICByZXR1cm4gbW92ZSQxLmNhbmNlbCgpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgbW92ZTogbW92ZSQxXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhcGksIHtcbiAgICAgIG1vdmU6IG1vdmUkMVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc25hcExpZnQoKSB7XG4gICAgdmFyIGFjdGlvbnMgPSB7XG4gICAgICBtb3ZlVXA6IGZ1bmN0aW9uIG1vdmVVcCQxKCkge1xuICAgICAgICByZXR1cm4gdHJ5RGlzcGF0Y2hXaGVuRHJhZ2dpbmcobW92ZVVwKTtcbiAgICAgIH0sXG4gICAgICBtb3ZlUmlnaHQ6IGZ1bmN0aW9uIG1vdmVSaWdodCQxKCkge1xuICAgICAgICByZXR1cm4gdHJ5RGlzcGF0Y2hXaGVuRHJhZ2dpbmcobW92ZVJpZ2h0KTtcbiAgICAgIH0sXG4gICAgICBtb3ZlRG93bjogZnVuY3Rpb24gbW92ZURvd24kMSgpIHtcbiAgICAgICAgcmV0dXJuIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nKG1vdmVEb3duKTtcbiAgICAgIH0sXG4gICAgICBtb3ZlTGVmdDogZnVuY3Rpb24gbW92ZUxlZnQkMSgpIHtcbiAgICAgICAgcmV0dXJuIHRyeURpc3BhdGNoV2hlbkRyYWdnaW5nKG1vdmVMZWZ0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBsaWZ0JDEoe1xuICAgICAgbGlmdEFjdGlvbkFyZ3M6IHtcbiAgICAgICAgaWQ6IGRyYWdnYWJsZUlkLFxuICAgICAgICBjbGllbnRTZWxlY3Rpb246IGdldEJvcmRlckJveENlbnRlclBvc2l0aW9uKGVsKSxcbiAgICAgICAgbW92ZW1lbnRNb2RlOiAnU05BUCdcbiAgICAgIH0sXG4gICAgICBjbGVhbnVwOiBub29wLFxuICAgICAgYWN0aW9uczogYWN0aW9uc1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWJvcnRQcmVEcmFnKCkge1xuICAgIHZhciBzaG91bGRSZWxlYXNlID0gX2lzQWN0aXZlKHtcbiAgICAgIGV4cGVjdGVkOiAnUFJFX0RSQUcnLFxuICAgICAgcGhhc2U6IHBoYXNlLFxuICAgICAgaXNMb2NrQWN0aXZlOiBpc0xvY2tBY3RpdmUsXG4gICAgICBzaG91bGRXYXJuOiB0cnVlXG4gICAgfSk7XG5cbiAgICBpZiAoc2hvdWxkUmVsZWFzZSkge1xuICAgICAgbG9ja0FQSS5yZWxlYXNlKCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByZURyYWcgPSB7XG4gICAgaXNBY3RpdmU6IGZ1bmN0aW9uIGlzQWN0aXZlKCkge1xuICAgICAgcmV0dXJuIF9pc0FjdGl2ZSh7XG4gICAgICAgIGV4cGVjdGVkOiAnUFJFX0RSQUcnLFxuICAgICAgICBwaGFzZTogcGhhc2UsXG4gICAgICAgIGlzTG9ja0FjdGl2ZTogaXNMb2NrQWN0aXZlLFxuICAgICAgICBzaG91bGRXYXJuOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogZ2V0U2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsXG4gICAgZmx1aWRMaWZ0OiBmbHVpZExpZnQsXG4gICAgc25hcExpZnQ6IHNuYXBMaWZ0LFxuICAgIGFib3J0OiBhYm9ydFByZURyYWdcbiAgfTtcbiAgcmV0dXJuIHByZURyYWc7XG59XG5cbnZhciBkZWZhdWx0U2Vuc29ycyA9IFt1c2VNb3VzZVNlbnNvciwgdXNlS2V5Ym9hcmRTZW5zb3IsIHVzZVRvdWNoU2Vuc29yXTtcbmZ1bmN0aW9uIHVzZVNlbnNvck1hcnNoYWwoX3JlZjQpIHtcbiAgdmFyIGNvbnRleHRJZCA9IF9yZWY0LmNvbnRleHRJZCxcbiAgICAgIHN0b3JlID0gX3JlZjQuc3RvcmUsXG4gICAgICByZWdpc3RyeSA9IF9yZWY0LnJlZ2lzdHJ5LFxuICAgICAgY3VzdG9tU2Vuc29ycyA9IF9yZWY0LmN1c3RvbVNlbnNvcnMsXG4gICAgICBlbmFibGVEZWZhdWx0U2Vuc29ycyA9IF9yZWY0LmVuYWJsZURlZmF1bHRTZW5zb3JzO1xuICB2YXIgdXNlU2Vuc29ycyA9IFtdLmNvbmNhdChlbmFibGVEZWZhdWx0U2Vuc29ycyA/IGRlZmF1bHRTZW5zb3JzIDogW10sIGN1c3RvbVNlbnNvcnMgfHwgW10pO1xuICB2YXIgbG9ja0FQSSA9IHVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlKCk7XG4gIH0pWzBdO1xuICB2YXIgdHJ5QWJhbmRvbkxvY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB0cnlBYmFuZG9uTG9jayhwcmV2aW91cywgY3VycmVudCkge1xuICAgIGlmIChwcmV2aW91cy5pc0RyYWdnaW5nICYmICFjdXJyZW50LmlzRHJhZ2dpbmcpIHtcbiAgICAgIGxvY2tBUEkudHJ5QWJhbmRvbigpO1xuICAgIH1cbiAgfSwgW2xvY2tBUEldKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiBsaXN0ZW5Ub1N0b3JlKCkge1xuICAgIHZhciBwcmV2aW91cyA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgdmFyIHVuc3Vic2NyaWJlID0gc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgIHRyeUFiYW5kb25Mb2NrKHByZXZpb3VzLCBjdXJyZW50KTtcbiAgICAgIHByZXZpb3VzID0gY3VycmVudDtcbiAgICB9KTtcbiAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gIH0sIFtsb2NrQVBJLCBzdG9yZSwgdHJ5QWJhbmRvbkxvY2tdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGxvY2tBUEkudHJ5QWJhbmRvbjtcbiAgfSwgW2xvY2tBUEkudHJ5QWJhbmRvbl0pO1xuICB2YXIgY2FuR2V0TG9jayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChkcmFnZ2FibGVJZCkge1xuICAgIHJldHVybiBjYW5TdGFydCh7XG4gICAgICBsb2NrQVBJOiBsb2NrQVBJLFxuICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5LFxuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgZHJhZ2dhYmxlSWQ6IGRyYWdnYWJsZUlkXG4gICAgfSk7XG4gIH0sIFtsb2NrQVBJLCByZWdpc3RyeSwgc3RvcmVdKTtcbiAgdmFyIHRyeUdldExvY2sgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZHJhZ2dhYmxlSWQsIGZvcmNlU3RvcCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0cnlTdGFydCh7XG4gICAgICBsb2NrQVBJOiBsb2NrQVBJLFxuICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5LFxuICAgICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBkcmFnZ2FibGVJZDogZHJhZ2dhYmxlSWQsXG4gICAgICBmb3JjZVNlbnNvclN0b3A6IGZvcmNlU3RvcCxcbiAgICAgIHNvdXJjZUV2ZW50OiBvcHRpb25zICYmIG9wdGlvbnMuc291cmNlRXZlbnQgPyBvcHRpb25zLnNvdXJjZUV2ZW50IDogbnVsbFxuICAgIH0pO1xuICB9LCBbY29udGV4dElkLCBsb2NrQVBJLCByZWdpc3RyeSwgc3RvcmVdKTtcbiAgdmFyIGZpbmRDbG9zZXN0RHJhZ2dhYmxlSWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gdHJ5R2V0Q2xvc2VzdERyYWdnYWJsZUlkRnJvbUV2ZW50KGNvbnRleHRJZCwgZXZlbnQpO1xuICB9LCBbY29udGV4dElkXSk7XG4gIHZhciBmaW5kT3B0aW9uc0ZvckRyYWdnYWJsZSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBlbnRyeSA9IHJlZ2lzdHJ5LmRyYWdnYWJsZS5maW5kQnlJZChpZCk7XG4gICAgcmV0dXJuIGVudHJ5ID8gZW50cnkub3B0aW9ucyA6IG51bGw7XG4gIH0sIFtyZWdpc3RyeS5kcmFnZ2FibGVdKTtcbiAgdmFyIHRyeVJlbGVhc2VMb2NrID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdHJ5UmVsZWFzZUxvY2soKSB7XG4gICAgaWYgKCFsb2NrQVBJLmlzQ2xhaW1lZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9ja0FQSS50cnlBYmFuZG9uKCk7XG5cbiAgICBpZiAoc3RvcmUuZ2V0U3RhdGUoKS5waGFzZSAhPT0gJ0lETEUnKSB7XG4gICAgICBzdG9yZS5kaXNwYXRjaChmbHVzaCgpKTtcbiAgICB9XG4gIH0sIFtsb2NrQVBJLCBzdG9yZV0pO1xuICB2YXIgaXNMb2NrQ2xhaW1lZCA9IHVzZUNhbGxiYWNrKGxvY2tBUEkuaXNDbGFpbWVkLCBbbG9ja0FQSV0pO1xuICB2YXIgYXBpID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbkdldExvY2s6IGNhbkdldExvY2ssXG4gICAgICB0cnlHZXRMb2NrOiB0cnlHZXRMb2NrLFxuICAgICAgZmluZENsb3Nlc3REcmFnZ2FibGVJZDogZmluZENsb3Nlc3REcmFnZ2FibGVJZCxcbiAgICAgIGZpbmRPcHRpb25zRm9yRHJhZ2dhYmxlOiBmaW5kT3B0aW9uc0ZvckRyYWdnYWJsZSxcbiAgICAgIHRyeVJlbGVhc2VMb2NrOiB0cnlSZWxlYXNlTG9jayxcbiAgICAgIGlzTG9ja0NsYWltZWQ6IGlzTG9ja0NsYWltZWRcbiAgICB9O1xuICB9LCBbY2FuR2V0TG9jaywgdHJ5R2V0TG9jaywgZmluZENsb3Nlc3REcmFnZ2FibGVJZCwgZmluZE9wdGlvbnNGb3JEcmFnZ2FibGUsIHRyeVJlbGVhc2VMb2NrLCBpc0xvY2tDbGFpbWVkXSk7XG4gIHVzZVZhbGlkYXRlU2Vuc29ySG9va3ModXNlU2Vuc29ycyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB1c2VTZW5zb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgdXNlU2Vuc29yc1tpXShhcGkpO1xuICB9XG59XG5cbnZhciBjcmVhdGVSZXNwb25kZXJzID0gZnVuY3Rpb24gY3JlYXRlUmVzcG9uZGVycyhwcm9wcykge1xuICByZXR1cm4ge1xuICAgIG9uQmVmb3JlQ2FwdHVyZTogcHJvcHMub25CZWZvcmVDYXB0dXJlLFxuICAgIG9uQmVmb3JlRHJhZ1N0YXJ0OiBwcm9wcy5vbkJlZm9yZURyYWdTdGFydCxcbiAgICBvbkRyYWdTdGFydDogcHJvcHMub25EcmFnU3RhcnQsXG4gICAgb25EcmFnRW5kOiBwcm9wcy5vbkRyYWdFbmQsXG4gICAgb25EcmFnVXBkYXRlOiBwcm9wcy5vbkRyYWdVcGRhdGVcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGdldFN0b3JlKGxhenlSZWYpIHtcbiAgIWxhenlSZWYuY3VycmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBmaW5kIHN0b3JlIGZyb20gbGF6eSByZWYnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBsYXp5UmVmLmN1cnJlbnQ7XG59XG5cbmZ1bmN0aW9uIEFwcChwcm9wcykge1xuICB2YXIgY29udGV4dElkID0gcHJvcHMuY29udGV4dElkLFxuICAgICAgc2V0Q2FsbGJhY2tzID0gcHJvcHMuc2V0Q2FsbGJhY2tzLFxuICAgICAgc2Vuc29ycyA9IHByb3BzLnNlbnNvcnMsXG4gICAgICBub25jZSA9IHByb3BzLm5vbmNlLFxuICAgICAgZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zID0gcHJvcHMuZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zO1xuICB2YXIgbGF6eVN0b3JlUmVmID0gdXNlUmVmKG51bGwpO1xuICB1c2VTdGFydHVwVmFsaWRhdGlvbigpO1xuICB2YXIgbGFzdFByb3BzUmVmID0gdXNlUHJldmlvdXMocHJvcHMpO1xuICB2YXIgZ2V0UmVzcG9uZGVycyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlUmVzcG9uZGVycyhsYXN0UHJvcHNSZWYuY3VycmVudCk7XG4gIH0sIFtsYXN0UHJvcHNSZWZdKTtcbiAgdmFyIGFubm91bmNlID0gdXNlQW5ub3VuY2VyKGNvbnRleHRJZCk7XG4gIHZhciBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCA9IHVzZUhpZGRlblRleHRFbGVtZW50KHtcbiAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCxcbiAgICB0ZXh0OiBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNcbiAgfSk7XG4gIHZhciBzdHlsZU1hcnNoYWwgPSB1c2VTdHlsZU1hcnNoYWwoY29udGV4dElkLCBub25jZSk7XG4gIHZhciBsYXp5RGlzcGF0Y2ggPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgZ2V0U3RvcmUobGF6eVN0b3JlUmVmKS5kaXNwYXRjaChhY3Rpb24pO1xuICB9LCBbXSk7XG4gIHZhciBtYXJzaGFsQ2FsbGJhY2tzID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7XG4gICAgICBwdWJsaXNoV2hpbGVEcmFnZ2luZzogcHVibGlzaFdoaWxlRHJhZ2dpbmcsXG4gICAgICB1cGRhdGVEcm9wcGFibGVTY3JvbGw6IHVwZGF0ZURyb3BwYWJsZVNjcm9sbCxcbiAgICAgIHVwZGF0ZURyb3BwYWJsZUlzRW5hYmxlZDogdXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkLFxuICAgICAgdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZDogdXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCxcbiAgICAgIGNvbGxlY3Rpb25TdGFydGluZzogY29sbGVjdGlvblN0YXJ0aW5nXG4gICAgfSwgbGF6eURpc3BhdGNoKTtcbiAgfSwgW2xhenlEaXNwYXRjaF0pO1xuICB2YXIgcmVnaXN0cnkgPSB1c2VSZWdpc3RyeSgpO1xuICB2YXIgZGltZW5zaW9uTWFyc2hhbCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVEaW1lbnNpb25NYXJzaGFsKHJlZ2lzdHJ5LCBtYXJzaGFsQ2FsbGJhY2tzKTtcbiAgfSwgW3JlZ2lzdHJ5LCBtYXJzaGFsQ2FsbGJhY2tzXSk7XG4gIHZhciBhdXRvU2Nyb2xsZXIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlQXV0b1Njcm9sbGVyKF9leHRlbmRzKHtcbiAgICAgIHNjcm9sbFdpbmRvdzogc2Nyb2xsV2luZG93LFxuICAgICAgc2Nyb2xsRHJvcHBhYmxlOiBkaW1lbnNpb25NYXJzaGFsLnNjcm9sbERyb3BwYWJsZVxuICAgIH0sIGJpbmRBY3Rpb25DcmVhdG9ycyh7XG4gICAgICBtb3ZlOiBtb3ZlXG4gICAgfSwgbGF6eURpc3BhdGNoKSkpO1xuICB9LCBbZGltZW5zaW9uTWFyc2hhbC5zY3JvbGxEcm9wcGFibGUsIGxhenlEaXNwYXRjaF0pO1xuICB2YXIgZm9jdXNNYXJzaGFsID0gdXNlRm9jdXNNYXJzaGFsKGNvbnRleHRJZCk7XG4gIHZhciBzdG9yZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVTdG9yZSh7XG4gICAgICBhbm5vdW5jZTogYW5ub3VuY2UsXG4gICAgICBhdXRvU2Nyb2xsZXI6IGF1dG9TY3JvbGxlcixcbiAgICAgIGRpbWVuc2lvbk1hcnNoYWw6IGRpbWVuc2lvbk1hcnNoYWwsXG4gICAgICBmb2N1c01hcnNoYWw6IGZvY3VzTWFyc2hhbCxcbiAgICAgIGdldFJlc3BvbmRlcnM6IGdldFJlc3BvbmRlcnMsXG4gICAgICBzdHlsZU1hcnNoYWw6IHN0eWxlTWFyc2hhbFxuICAgIH0pO1xuICB9LCBbYW5ub3VuY2UsIGF1dG9TY3JvbGxlciwgZGltZW5zaW9uTWFyc2hhbCwgZm9jdXNNYXJzaGFsLCBnZXRSZXNwb25kZXJzLCBzdHlsZU1hcnNoYWxdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChsYXp5U3RvcmVSZWYuY3VycmVudCAmJiBsYXp5U3RvcmVSZWYuY3VycmVudCAhPT0gc3RvcmUpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ3VuZXhwZWN0ZWQgc3RvcmUgY2hhbmdlJykgOiB2b2lkIDA7XG4gICAgfVxuICB9XG5cbiAgbGF6eVN0b3JlUmVmLmN1cnJlbnQgPSBzdG9yZTtcbiAgdmFyIHRyeVJlc2V0U3RvcmUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBnZXRTdG9yZShsYXp5U3RvcmVSZWYpO1xuICAgIHZhciBzdGF0ZSA9IGN1cnJlbnQuZ2V0U3RhdGUoKTtcblxuICAgIGlmIChzdGF0ZS5waGFzZSAhPT0gJ0lETEUnKSB7XG4gICAgICBjdXJyZW50LmRpc3BhdGNoKGZsdXNoKCkpO1xuICAgIH1cbiAgfSwgW10pO1xuICB2YXIgaXNEcmFnZ2luZyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRTdG9yZShsYXp5U3RvcmVSZWYpLmdldFN0YXRlKCk7XG4gICAgcmV0dXJuIHN0YXRlLmlzRHJhZ2dpbmcgfHwgc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORyc7XG4gIH0sIFtdKTtcbiAgdmFyIGFwcENhbGxiYWNrcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpc0RyYWdnaW5nOiBpc0RyYWdnaW5nLFxuICAgICAgdHJ5QWJvcnQ6IHRyeVJlc2V0U3RvcmVcbiAgICB9O1xuICB9LCBbaXNEcmFnZ2luZywgdHJ5UmVzZXRTdG9yZV0pO1xuICBzZXRDYWxsYmFja3MoYXBwQ2FsbGJhY2tzKTtcbiAgdmFyIGdldENhbkxpZnQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gY2FuU3RhcnREcmFnKGdldFN0b3JlKGxhenlTdG9yZVJlZikuZ2V0U3RhdGUoKSwgaWQpO1xuICB9LCBbXSk7XG4gIHZhciBnZXRJc01vdmVtZW50QWxsb3dlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNNb3ZlbWVudEFsbG93ZWQoZ2V0U3RvcmUobGF6eVN0b3JlUmVmKS5nZXRTdGF0ZSgpKTtcbiAgfSwgW10pO1xuICB2YXIgYXBwQ29udGV4dCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXJzaGFsOiBkaW1lbnNpb25NYXJzaGFsLFxuICAgICAgZm9jdXM6IGZvY3VzTWFyc2hhbCxcbiAgICAgIGNvbnRleHRJZDogY29udGV4dElkLFxuICAgICAgY2FuTGlmdDogZ2V0Q2FuTGlmdCxcbiAgICAgIGlzTW92ZW1lbnRBbGxvd2VkOiBnZXRJc01vdmVtZW50QWxsb3dlZCxcbiAgICAgIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uc0lkOiBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCxcbiAgICAgIHJlZ2lzdHJ5OiByZWdpc3RyeVxuICAgIH07XG4gIH0sIFtjb250ZXh0SWQsIGRpbWVuc2lvbk1hcnNoYWwsIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uc0lkLCBmb2N1c01hcnNoYWwsIGdldENhbkxpZnQsIGdldElzTW92ZW1lbnRBbGxvd2VkLCByZWdpc3RyeV0pO1xuICB1c2VTZW5zb3JNYXJzaGFsKHtcbiAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCxcbiAgICBzdG9yZTogc3RvcmUsXG4gICAgcmVnaXN0cnk6IHJlZ2lzdHJ5LFxuICAgIGN1c3RvbVNlbnNvcnM6IHNlbnNvcnMsXG4gICAgZW5hYmxlRGVmYXVsdFNlbnNvcnM6IHByb3BzLmVuYWJsZURlZmF1bHRTZW5zb3JzICE9PSBmYWxzZVxuICB9KTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHJ5UmVzZXRTdG9yZTtcbiAgfSwgW3RyeVJlc2V0U3RvcmVdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBhcHBDb250ZXh0XG4gIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJvdmlkZXIsIHtcbiAgICBjb250ZXh0OiBTdG9yZUNvbnRleHQsXG4gICAgc3RvcmU6IHN0b3JlXG4gIH0sIHByb3BzLmNoaWxkcmVuKSk7XG59XG5cbnZhciBjb3VudCQxID0gMDtcbmZ1bmN0aW9uIHJlc2V0JDEoKSB7XG4gIGNvdW50JDEgPSAwO1xufVxuZnVuY3Rpb24gdXNlSW5zdGFuY2VDb3VudCgpIHtcbiAgcmV0dXJuIHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIlwiICsgY291bnQkMSsrO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0U2VydmVyQ29udGV4dCgpIHtcbiAgcmVzZXQkMSgpO1xuICByZXNldCgpO1xufVxuZnVuY3Rpb24gRHJhZ0Ryb3BDb250ZXh0KHByb3BzKSB7XG4gIHZhciBjb250ZXh0SWQgPSB1c2VJbnN0YW5jZUNvdW50KCk7XG4gIHZhciBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnMgPSBwcm9wcy5kcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnMgfHwgcHJlc2V0LmRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9ucztcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRXJyb3JCb3VuZGFyeSwgbnVsbCwgZnVuY3Rpb24gKHNldENhbGxiYWNrcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEFwcCwge1xuICAgICAgbm9uY2U6IHByb3BzLm5vbmNlLFxuICAgICAgY29udGV4dElkOiBjb250ZXh0SWQsXG4gICAgICBzZXRDYWxsYmFja3M6IHNldENhbGxiYWNrcyxcbiAgICAgIGRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uczogZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zLFxuICAgICAgZW5hYmxlRGVmYXVsdFNlbnNvcnM6IHByb3BzLmVuYWJsZURlZmF1bHRTZW5zb3JzLFxuICAgICAgc2Vuc29yczogcHJvcHMuc2Vuc29ycyxcbiAgICAgIG9uQmVmb3JlQ2FwdHVyZTogcHJvcHMub25CZWZvcmVDYXB0dXJlLFxuICAgICAgb25CZWZvcmVEcmFnU3RhcnQ6IHByb3BzLm9uQmVmb3JlRHJhZ1N0YXJ0LFxuICAgICAgb25EcmFnU3RhcnQ6IHByb3BzLm9uRHJhZ1N0YXJ0LFxuICAgICAgb25EcmFnVXBkYXRlOiBwcm9wcy5vbkRyYWdVcGRhdGUsXG4gICAgICBvbkRyYWdFbmQ6IHByb3BzLm9uRHJhZ0VuZFxuICAgIH0sIHByb3BzLmNoaWxkcmVuKTtcbiAgfSk7XG59XG5cbnZhciBpc0VxdWFsJDEgPSBmdW5jdGlvbiBpc0VxdWFsKGJhc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBiYXNlID09PSB2YWx1ZTtcbiAgfTtcbn07XG5cbnZhciBpc1Njcm9sbCA9IGlzRXF1YWwkMSgnc2Nyb2xsJyk7XG52YXIgaXNBdXRvID0gaXNFcXVhbCQxKCdhdXRvJyk7XG52YXIgaXNWaXNpYmxlJDEgPSBpc0VxdWFsJDEoJ3Zpc2libGUnKTtcblxudmFyIGlzRWl0aGVyID0gZnVuY3Rpb24gaXNFaXRoZXIob3ZlcmZsb3csIGZuKSB7XG4gIHJldHVybiBmbihvdmVyZmxvdy5vdmVyZmxvd1gpIHx8IGZuKG92ZXJmbG93Lm92ZXJmbG93WSk7XG59O1xuXG52YXIgaXNCb3RoID0gZnVuY3Rpb24gaXNCb3RoKG92ZXJmbG93LCBmbikge1xuICByZXR1cm4gZm4ob3ZlcmZsb3cub3ZlcmZsb3dYKSAmJiBmbihvdmVyZmxvdy5vdmVyZmxvd1kpO1xufTtcblxudmFyIGlzRWxlbWVudFNjcm9sbGFibGUgPSBmdW5jdGlvbiBpc0VsZW1lbnRTY3JvbGxhYmxlKGVsKSB7XG4gIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIG92ZXJmbG93ID0ge1xuICAgIG92ZXJmbG93WDogc3R5bGUub3ZlcmZsb3dYLFxuICAgIG92ZXJmbG93WTogc3R5bGUub3ZlcmZsb3dZXG4gIH07XG4gIHJldHVybiBpc0VpdGhlcihvdmVyZmxvdywgaXNTY3JvbGwpIHx8IGlzRWl0aGVyKG92ZXJmbG93LCBpc0F1dG8pO1xufTtcblxudmFyIGlzQm9keVNjcm9sbGFibGUgPSBmdW5jdGlvbiBpc0JvZHlTY3JvbGxhYmxlKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBib2R5ID0gZ2V0Qm9keUVsZW1lbnQoKTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICFodG1sID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgaWYgKCFpc0VsZW1lbnRTY3JvbGxhYmxlKGJvZHkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGh0bWxTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGh0bWwpO1xuICB2YXIgaHRtbE92ZXJmbG93ID0ge1xuICAgIG92ZXJmbG93WDogaHRtbFN0eWxlLm92ZXJmbG93WCxcbiAgICBvdmVyZmxvd1k6IGh0bWxTdHlsZS5vdmVyZmxvd1lcbiAgfTtcblxuICBpZiAoaXNCb3RoKGh0bWxPdmVyZmxvdywgaXNWaXNpYmxlJDEpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhcIlxcbiAgICBXZSBoYXZlIGRldGVjdGVkIHRoYXQgeW91ciA8Ym9keT4gZWxlbWVudCBtaWdodCBiZSBhIHNjcm9sbCBjb250YWluZXIuXFxuICAgIFdlIGhhdmUgZm91bmQgbm8gcmVsaWFibGUgd2F5IG9mIGRldGVjdGluZyB3aGV0aGVyIHRoZSA8Ym9keT4gZWxlbWVudCBpcyBhIHNjcm9sbCBjb250YWluZXIuXFxuICAgIFVuZGVyIG1vc3QgY2lyY3Vtc3RhbmNlcyBhIDxib2R5PiBzY3JvbGwgYmFyIHdpbGwgYmUgb24gdGhlIDxodG1sPiBlbGVtZW50IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpXFxuXFxuICAgIEJlY2F1c2Ugd2UgY2Fubm90IGRldGVybWluZSBpZiB0aGUgPGJvZHk+IGlzIGEgc2Nyb2xsIGNvbnRhaW5lciwgYW5kIGdlbmVyYWxseSBpdCBpcyBub3Qgb25lLFxcbiAgICB3ZSB3aWxsIGJlIHRyZWF0aW5nIHRoZSA8Ym9keT4gYXMgKm5vdCogYSBzY3JvbGwgY29udGFpbmVyXFxuXFxuICAgIE1vcmUgaW5mb3JtYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9hdGxhc3NpYW4vcmVhY3QtYmVhdXRpZnVsLWRuZC9ibG9iL21hc3Rlci9kb2NzL2d1aWRlcy9ob3ctd2UtZGV0ZWN0LXNjcm9sbC1jb250YWluZXJzLm1kXFxuICBcIikgOiB2b2lkIDA7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbnZhciBnZXRDbG9zZXN0U2Nyb2xsYWJsZSA9IGZ1bmN0aW9uIGdldENsb3Nlc3RTY3JvbGxhYmxlKGVsKSB7XG4gIGlmIChlbCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoZWwgPT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gaXNCb2R5U2Nyb2xsYWJsZSgpID8gZWwgOiBudWxsO1xuICB9XG5cbiAgaWYgKGVsID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICghaXNFbGVtZW50U2Nyb2xsYWJsZShlbCkpIHtcbiAgICByZXR1cm4gZ2V0Q2xvc2VzdFNjcm9sbGFibGUoZWwucGFyZW50RWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gZWw7XG59O1xuXG52YXIgY2hlY2tGb3JOZXN0ZWRTY3JvbGxDb250YWluZXJzID0gKGZ1bmN0aW9uIChzY3JvbGxhYmxlKSB7XG4gIGlmICghc2Nyb2xsYWJsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBhbm90aGVyU2Nyb2xsUGFyZW50ID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGUoc2Nyb2xsYWJsZS5wYXJlbnRFbGVtZW50KTtcblxuICBpZiAoIWFub3RoZXJTY3JvbGxQYXJlbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKFwiXFxuICAgIERyb3BwYWJsZTogdW5zdXBwb3J0ZWQgbmVzdGVkIHNjcm9sbCBjb250YWluZXIgZGV0ZWN0ZWQuXFxuICAgIEEgRHJvcHBhYmxlIGNhbiBvbmx5IGhhdmUgb25lIHNjcm9sbCBwYXJlbnQgKHdoaWNoIGNhbiBiZSBpdHNlbGYpXFxuICAgIE5lc3RlZCBzY3JvbGwgY29udGFpbmVycyBhcmUgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQuXFxuXFxuICAgIFdlIGhvcGUgdG8gc3VwcG9ydCBuZXN0ZWQgc2Nyb2xsIGNvbnRhaW5lcnMgc29vbjogaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2lzc3Vlcy8xMzFcXG4gIFwiKSA6IHZvaWQgMDtcbn0pO1xuXG52YXIgZ2V0U2Nyb2xsJDEgPSAoZnVuY3Rpb24gKGVsKSB7XG4gIHJldHVybiB7XG4gICAgeDogZWwuc2Nyb2xsTGVmdCxcbiAgICB5OiBlbC5zY3JvbGxUb3BcbiAgfTtcbn0pO1xuXG52YXIgZ2V0SXNGaXhlZCA9IGZ1bmN0aW9uIGdldElzRml4ZWQoZWwpIHtcbiAgaWYgKCFlbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcblxuICBpZiAoc3R5bGUucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBnZXRJc0ZpeGVkKGVsLnBhcmVudEVsZW1lbnQpO1xufTtcblxudmFyIGdldEVudiA9IChmdW5jdGlvbiAoc3RhcnQpIHtcbiAgdmFyIGNsb3Nlc3RTY3JvbGxhYmxlID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGUoc3RhcnQpO1xuICB2YXIgaXNGaXhlZE9uUGFnZSA9IGdldElzRml4ZWQoc3RhcnQpO1xuICByZXR1cm4ge1xuICAgIGNsb3Nlc3RTY3JvbGxhYmxlOiBjbG9zZXN0U2Nyb2xsYWJsZSxcbiAgICBpc0ZpeGVkT25QYWdlOiBpc0ZpeGVkT25QYWdlXG4gIH07XG59KTtcblxudmFyIGdldERyb3BwYWJsZURpbWVuc2lvbiA9IChmdW5jdGlvbiAoX3JlZikge1xuICB2YXIgZGVzY3JpcHRvciA9IF9yZWYuZGVzY3JpcHRvcixcbiAgICAgIGlzRW5hYmxlZCA9IF9yZWYuaXNFbmFibGVkLFxuICAgICAgaXNDb21iaW5lRW5hYmxlZCA9IF9yZWYuaXNDb21iaW5lRW5hYmxlZCxcbiAgICAgIGlzRml4ZWRPblBhZ2UgPSBfcmVmLmlzRml4ZWRPblBhZ2UsXG4gICAgICBkaXJlY3Rpb24gPSBfcmVmLmRpcmVjdGlvbixcbiAgICAgIGNsaWVudCA9IF9yZWYuY2xpZW50LFxuICAgICAgcGFnZSA9IF9yZWYucGFnZSxcbiAgICAgIGNsb3Nlc3QgPSBfcmVmLmNsb3Nlc3Q7XG5cbiAgdmFyIGZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2xvc2VzdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFNpemUgPSBjbG9zZXN0LnNjcm9sbFNpemUsXG4gICAgICAgIGZyYW1lQ2xpZW50ID0gY2xvc2VzdC5jbGllbnQ7XG4gICAgdmFyIG1heFNjcm9sbCA9IGdldE1heFNjcm9sbCh7XG4gICAgICBzY3JvbGxIZWlnaHQ6IHNjcm9sbFNpemUuc2Nyb2xsSGVpZ2h0LFxuICAgICAgc2Nyb2xsV2lkdGg6IHNjcm9sbFNpemUuc2Nyb2xsV2lkdGgsXG4gICAgICBoZWlnaHQ6IGZyYW1lQ2xpZW50LnBhZGRpbmdCb3guaGVpZ2h0LFxuICAgICAgd2lkdGg6IGZyYW1lQ2xpZW50LnBhZGRpbmdCb3gud2lkdGhcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgcGFnZU1hcmdpbkJveDogY2xvc2VzdC5wYWdlLm1hcmdpbkJveCxcbiAgICAgIGZyYW1lQ2xpZW50OiBmcmFtZUNsaWVudCxcbiAgICAgIHNjcm9sbFNpemU6IHNjcm9sbFNpemUsXG4gICAgICBzaG91bGRDbGlwU3ViamVjdDogY2xvc2VzdC5zaG91bGRDbGlwU3ViamVjdCxcbiAgICAgIHNjcm9sbDoge1xuICAgICAgICBpbml0aWFsOiBjbG9zZXN0LnNjcm9sbCxcbiAgICAgICAgY3VycmVudDogY2xvc2VzdC5zY3JvbGwsXG4gICAgICAgIG1heDogbWF4U2Nyb2xsLFxuICAgICAgICBkaWZmOiB7XG4gICAgICAgICAgdmFsdWU6IG9yaWdpbixcbiAgICAgICAgICBkaXNwbGFjZW1lbnQ6IG9yaWdpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBheGlzID0gZGlyZWN0aW9uID09PSAndmVydGljYWwnID8gdmVydGljYWwgOiBob3Jpem9udGFsO1xuICB2YXIgc3ViamVjdCA9IGdldFN1YmplY3Qoe1xuICAgIHBhZ2U6IHBhZ2UsXG4gICAgd2l0aFBsYWNlaG9sZGVyOiBudWxsLFxuICAgIGF4aXM6IGF4aXMsXG4gICAgZnJhbWU6IGZyYW1lXG4gIH0pO1xuICB2YXIgZGltZW5zaW9uID0ge1xuICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgaXNDb21iaW5lRW5hYmxlZDogaXNDb21iaW5lRW5hYmxlZCxcbiAgICBpc0ZpeGVkT25QYWdlOiBpc0ZpeGVkT25QYWdlLFxuICAgIGF4aXM6IGF4aXMsXG4gICAgaXNFbmFibGVkOiBpc0VuYWJsZWQsXG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZSxcbiAgICBmcmFtZTogZnJhbWUsXG4gICAgc3ViamVjdDogc3ViamVjdFxuICB9O1xuICByZXR1cm4gZGltZW5zaW9uO1xufSk7XG5cbnZhciBnZXRDbGllbnQgPSBmdW5jdGlvbiBnZXRDbGllbnQodGFyZ2V0UmVmLCBjbG9zZXN0U2Nyb2xsYWJsZSkge1xuICB2YXIgYmFzZSA9IGdldEJveCh0YXJnZXRSZWYpO1xuXG4gIGlmICghY2xvc2VzdFNjcm9sbGFibGUpIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIGlmICh0YXJnZXRSZWYgIT09IGNsb3Nlc3RTY3JvbGxhYmxlKSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cblxuICB2YXIgdG9wID0gYmFzZS5wYWRkaW5nQm94LnRvcCAtIGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbFRvcDtcbiAgdmFyIGxlZnQgPSBiYXNlLnBhZGRpbmdCb3gubGVmdCAtIGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbExlZnQ7XG4gIHZhciBib3R0b20gPSB0b3AgKyBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxIZWlnaHQ7XG4gIHZhciByaWdodCA9IGxlZnQgKyBjbG9zZXN0U2Nyb2xsYWJsZS5zY3JvbGxXaWR0aDtcbiAgdmFyIHBhZGRpbmdCb3ggPSB7XG4gICAgdG9wOiB0b3AsXG4gICAgcmlnaHQ6IHJpZ2h0LFxuICAgIGJvdHRvbTogYm90dG9tLFxuICAgIGxlZnQ6IGxlZnRcbiAgfTtcbiAgdmFyIGJvcmRlckJveCA9IGV4cGFuZChwYWRkaW5nQm94LCBiYXNlLmJvcmRlcik7XG4gIHZhciBjbGllbnQgPSBjcmVhdGVCb3goe1xuICAgIGJvcmRlckJveDogYm9yZGVyQm94LFxuICAgIG1hcmdpbjogYmFzZS5tYXJnaW4sXG4gICAgYm9yZGVyOiBiYXNlLmJvcmRlcixcbiAgICBwYWRkaW5nOiBiYXNlLnBhZGRpbmdcbiAgfSk7XG4gIHJldHVybiBjbGllbnQ7XG59O1xuXG52YXIgZ2V0RGltZW5zaW9uID0gKGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciByZWYgPSBfcmVmLnJlZixcbiAgICAgIGRlc2NyaXB0b3IgPSBfcmVmLmRlc2NyaXB0b3IsXG4gICAgICBlbnYgPSBfcmVmLmVudixcbiAgICAgIHdpbmRvd1Njcm9sbCA9IF9yZWYud2luZG93U2Nyb2xsLFxuICAgICAgZGlyZWN0aW9uID0gX3JlZi5kaXJlY3Rpb24sXG4gICAgICBpc0Ryb3BEaXNhYmxlZCA9IF9yZWYuaXNEcm9wRGlzYWJsZWQsXG4gICAgICBpc0NvbWJpbmVFbmFibGVkID0gX3JlZi5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgc2hvdWxkQ2xpcFN1YmplY3QgPSBfcmVmLnNob3VsZENsaXBTdWJqZWN0O1xuICB2YXIgY2xvc2VzdFNjcm9sbGFibGUgPSBlbnYuY2xvc2VzdFNjcm9sbGFibGU7XG4gIHZhciBjbGllbnQgPSBnZXRDbGllbnQocmVmLCBjbG9zZXN0U2Nyb2xsYWJsZSk7XG4gIHZhciBwYWdlID0gd2l0aFNjcm9sbChjbGllbnQsIHdpbmRvd1Njcm9sbCk7XG5cbiAgdmFyIGNsb3Nlc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjbG9zZXN0U2Nyb2xsYWJsZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZyYW1lQ2xpZW50ID0gZ2V0Qm94KGNsb3Nlc3RTY3JvbGxhYmxlKTtcbiAgICB2YXIgc2Nyb2xsU2l6ZSA9IHtcbiAgICAgIHNjcm9sbEhlaWdodDogY2xvc2VzdFNjcm9sbGFibGUuc2Nyb2xsSGVpZ2h0LFxuICAgICAgc2Nyb2xsV2lkdGg6IGNsb3Nlc3RTY3JvbGxhYmxlLnNjcm9sbFdpZHRoXG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50OiBmcmFtZUNsaWVudCxcbiAgICAgIHBhZ2U6IHdpdGhTY3JvbGwoZnJhbWVDbGllbnQsIHdpbmRvd1Njcm9sbCksXG4gICAgICBzY3JvbGw6IGdldFNjcm9sbCQxKGNsb3Nlc3RTY3JvbGxhYmxlKSxcbiAgICAgIHNjcm9sbFNpemU6IHNjcm9sbFNpemUsXG4gICAgICBzaG91bGRDbGlwU3ViamVjdDogc2hvdWxkQ2xpcFN1YmplY3RcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGRpbWVuc2lvbiA9IGdldERyb3BwYWJsZURpbWVuc2lvbih7XG4gICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICBpc0VuYWJsZWQ6ICFpc0Ryb3BEaXNhYmxlZCxcbiAgICBpc0NvbWJpbmVFbmFibGVkOiBpc0NvbWJpbmVFbmFibGVkLFxuICAgIGlzRml4ZWRPblBhZ2U6IGVudi5pc0ZpeGVkT25QYWdlLFxuICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uLFxuICAgIGNsaWVudDogY2xpZW50LFxuICAgIHBhZ2U6IHBhZ2UsXG4gICAgY2xvc2VzdDogY2xvc2VzdFxuICB9KTtcbiAgcmV0dXJuIGRpbWVuc2lvbjtcbn0pO1xuXG52YXIgaW1tZWRpYXRlID0ge1xuICBwYXNzaXZlOiBmYWxzZVxufTtcbnZhciBkZWxheWVkID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xudmFyIGdldExpc3RlbmVyT3B0aW9ucyA9IChmdW5jdGlvbiAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zaG91bGRQdWJsaXNoSW1tZWRpYXRlbHkgPyBpbW1lZGlhdGUgOiBkZWxheWVkO1xufSk7XG5cbmZ1bmN0aW9uIHVzZVJlcXVpcmVkQ29udGV4dChDb250ZXh0KSB7XG4gIHZhciByZXN1bHQgPSB1c2VDb250ZXh0KENvbnRleHQpO1xuICAhcmVzdWx0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ291bGQgbm90IGZpbmQgcmVxdWlyZWQgY29udGV4dCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIGdldENsb3Nlc3RTY3JvbGxhYmxlRnJvbURyYWcgPSBmdW5jdGlvbiBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnKGRyYWdnaW5nKSB7XG4gIHJldHVybiBkcmFnZ2luZyAmJiBkcmFnZ2luZy5lbnYuY2xvc2VzdFNjcm9sbGFibGUgfHwgbnVsbDtcbn07XG5cbmZ1bmN0aW9uIHVzZURyb3BwYWJsZVB1Ymxpc2hlcihhcmdzKSB7XG4gIHZhciB3aGlsZURyYWdnaW5nUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgYXBwQ29udGV4dCA9IHVzZVJlcXVpcmVkQ29udGV4dChBcHBDb250ZXh0KTtcbiAgdmFyIHVuaXF1ZUlkID0gdXNlVW5pcXVlSWQoJ2Ryb3BwYWJsZScpO1xuICB2YXIgcmVnaXN0cnkgPSBhcHBDb250ZXh0LnJlZ2lzdHJ5LFxuICAgICAgbWFyc2hhbCA9IGFwcENvbnRleHQubWFyc2hhbDtcbiAgdmFyIHByZXZpb3VzUmVmID0gdXNlUHJldmlvdXMoYXJncyk7XG4gIHZhciBkZXNjcmlwdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBhcmdzLmRyb3BwYWJsZUlkLFxuICAgICAgdHlwZTogYXJncy50eXBlLFxuICAgICAgbW9kZTogYXJncy5tb2RlXG4gICAgfTtcbiAgfSwgW2FyZ3MuZHJvcHBhYmxlSWQsIGFyZ3MubW9kZSwgYXJncy50eXBlXSk7XG4gIHZhciBwdWJsaXNoZWREZXNjcmlwdG9yUmVmID0gdXNlUmVmKGRlc2NyaXB0b3IpO1xuICB2YXIgbWVtb2l6ZWRVcGRhdGVTY3JvbGwgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbWVtb2l6ZU9uZShmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgIXdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NhbiBvbmx5IHVwZGF0ZSBzY3JvbGwgd2hlbiBkcmFnZ2luZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBzY3JvbGwgPSB7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHlcbiAgICAgIH07XG4gICAgICBtYXJzaGFsLnVwZGF0ZURyb3BwYWJsZVNjcm9sbChkZXNjcmlwdG9yLmlkLCBzY3JvbGwpO1xuICAgIH0pO1xuICB9LCBbZGVzY3JpcHRvci5pZCwgbWFyc2hhbF0pO1xuICB2YXIgZ2V0Q2xvc2VzdFNjcm9sbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZHJhZ2dpbmcgPSB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQ7XG5cbiAgICBpZiAoIWRyYWdnaW5nIHx8ICFkcmFnZ2luZy5lbnYuY2xvc2VzdFNjcm9sbGFibGUpIHtcbiAgICAgIHJldHVybiBvcmlnaW47XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldFNjcm9sbCQxKGRyYWdnaW5nLmVudi5jbG9zZXN0U2Nyb2xsYWJsZSk7XG4gIH0sIFtdKTtcbiAgdmFyIHVwZGF0ZVNjcm9sbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2Nyb2xsID0gZ2V0Q2xvc2VzdFNjcm9sbCgpO1xuICAgIG1lbW9pemVkVXBkYXRlU2Nyb2xsKHNjcm9sbC54LCBzY3JvbGwueSk7XG4gIH0sIFtnZXRDbG9zZXN0U2Nyb2xsLCBtZW1vaXplZFVwZGF0ZVNjcm9sbF0pO1xuICB2YXIgc2NoZWR1bGVTY3JvbGxVcGRhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmFmU2NoZCh1cGRhdGVTY3JvbGwpO1xuICB9LCBbdXBkYXRlU2Nyb2xsXSk7XG4gIHZhciBvbkNsb3Nlc3RTY3JvbGwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRyYWdnaW5nID0gd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50O1xuICAgIHZhciBjbG9zZXN0ID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyhkcmFnZ2luZyk7XG4gICAgIShkcmFnZ2luZyAmJiBjbG9zZXN0KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0NvdWxkIG5vdCBmaW5kIHNjcm9sbCBvcHRpb25zIHdoaWxlIHNjcm9sbGluZycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgb3B0aW9ucyA9IGRyYWdnaW5nLnNjcm9sbE9wdGlvbnM7XG5cbiAgICBpZiAob3B0aW9ucy5zaG91bGRQdWJsaXNoSW1tZWRpYXRlbHkpIHtcbiAgICAgIHVwZGF0ZVNjcm9sbCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNjaGVkdWxlU2Nyb2xsVXBkYXRlKCk7XG4gIH0sIFtzY2hlZHVsZVNjcm9sbFVwZGF0ZSwgdXBkYXRlU2Nyb2xsXSk7XG4gIHZhciBnZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh3aW5kb3dTY3JvbGwsIG9wdGlvbnMpIHtcbiAgICAhIXdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBjb2xsZWN0IGEgZHJvcHBhYmxlIHdoaWxlIGEgZHJhZyBpcyBvY2N1cnJpbmcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHByZXZpb3VzID0gcHJldmlvdXNSZWYuY3VycmVudDtcbiAgICB2YXIgcmVmID0gcHJldmlvdXMuZ2V0RHJvcHBhYmxlUmVmKCk7XG4gICAgIXJlZiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBjb2xsZWN0IHdpdGhvdXQgYSBkcm9wcGFibGUgcmVmJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBlbnYgPSBnZXRFbnYocmVmKTtcbiAgICB2YXIgZHJhZ2dpbmcgPSB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgICBlbnY6IGVudixcbiAgICAgIHNjcm9sbE9wdGlvbnM6IG9wdGlvbnNcbiAgICB9O1xuICAgIHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCA9IGRyYWdnaW5nO1xuICAgIHZhciBkaW1lbnNpb24gPSBnZXREaW1lbnNpb24oe1xuICAgICAgcmVmOiByZWYsXG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgZW52OiBlbnYsXG4gICAgICB3aW5kb3dTY3JvbGw6IHdpbmRvd1Njcm9sbCxcbiAgICAgIGRpcmVjdGlvbjogcHJldmlvdXMuZGlyZWN0aW9uLFxuICAgICAgaXNEcm9wRGlzYWJsZWQ6IHByZXZpb3VzLmlzRHJvcERpc2FibGVkLFxuICAgICAgaXNDb21iaW5lRW5hYmxlZDogcHJldmlvdXMuaXNDb21iaW5lRW5hYmxlZCxcbiAgICAgIHNob3VsZENsaXBTdWJqZWN0OiAhcHJldmlvdXMuaWdub3JlQ29udGFpbmVyQ2xpcHBpbmdcbiAgICB9KTtcbiAgICB2YXIgc2Nyb2xsYWJsZSA9IGVudi5jbG9zZXN0U2Nyb2xsYWJsZTtcblxuICAgIGlmIChzY3JvbGxhYmxlKSB7XG4gICAgICBzY3JvbGxhYmxlLnNldEF0dHJpYnV0ZShzY3JvbGxDb250YWluZXIuY29udGV4dElkLCBhcHBDb250ZXh0LmNvbnRleHRJZCk7XG4gICAgICBzY3JvbGxhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uQ2xvc2VzdFNjcm9sbCwgZ2V0TGlzdGVuZXJPcHRpb25zKGRyYWdnaW5nLnNjcm9sbE9wdGlvbnMpKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgY2hlY2tGb3JOZXN0ZWRTY3JvbGxDb250YWluZXJzKHNjcm9sbGFibGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkaW1lbnNpb247XG4gIH0sIFthcHBDb250ZXh0LmNvbnRleHRJZCwgZGVzY3JpcHRvciwgb25DbG9zZXN0U2Nyb2xsLCBwcmV2aW91c1JlZl0pO1xuICB2YXIgZ2V0U2Nyb2xsV2hpbGVEcmFnZ2luZyA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZHJhZ2dpbmcgPSB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQ7XG4gICAgdmFyIGNsb3Nlc3QgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnKGRyYWdnaW5nKTtcbiAgICAhKGRyYWdnaW5nICYmIGNsb3Nlc3QpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQ2FuIG9ubHkgcmVjb2xsZWN0IERyb3BwYWJsZSBjbGllbnQgZm9yIERyb3BwYWJsZXMgdGhhdCBoYXZlIGEgc2Nyb2xsIGNvbnRhaW5lcicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZ2V0U2Nyb2xsJDEoY2xvc2VzdCk7XG4gIH0sIFtdKTtcbiAgdmFyIGRyYWdTdG9wcGVkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBkcmFnZ2luZyA9IHdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudDtcbiAgICAhZHJhZ2dpbmcgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc3RvcCBkcmFnIHdoZW4gbm8gYWN0aXZlIGRyYWcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGNsb3Nlc3QgPSBnZXRDbG9zZXN0U2Nyb2xsYWJsZUZyb21EcmFnKGRyYWdnaW5nKTtcbiAgICB3aGlsZURyYWdnaW5nUmVmLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgaWYgKCFjbG9zZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2NoZWR1bGVTY3JvbGxVcGRhdGUuY2FuY2VsKCk7XG4gICAgY2xvc2VzdC5yZW1vdmVBdHRyaWJ1dGUoc2Nyb2xsQ29udGFpbmVyLmNvbnRleHRJZCk7XG4gICAgY2xvc2VzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvbkNsb3Nlc3RTY3JvbGwsIGdldExpc3RlbmVyT3B0aW9ucyhkcmFnZ2luZy5zY3JvbGxPcHRpb25zKSk7XG4gIH0sIFtvbkNsb3Nlc3RTY3JvbGwsIHNjaGVkdWxlU2Nyb2xsVXBkYXRlXSk7XG4gIHZhciBzY3JvbGwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgdmFyIGRyYWdnaW5nID0gd2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50O1xuICAgICFkcmFnZ2luZyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBzY3JvbGwgd2hlbiB0aGVyZSBpcyBubyBkcmFnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjbG9zZXN0ID0gZ2V0Q2xvc2VzdFNjcm9sbGFibGVGcm9tRHJhZyhkcmFnZ2luZyk7XG4gICAgIWNsb3Nlc3QgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3Qgc2Nyb2xsIGEgZHJvcHBhYmxlIHdpdGggbm8gY2xvc2VzdCBzY3JvbGxhYmxlJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGNsb3Nlc3Quc2Nyb2xsVG9wICs9IGNoYW5nZS55O1xuICAgIGNsb3Nlc3Quc2Nyb2xsTGVmdCArPSBjaGFuZ2UueDtcbiAgfSwgW10pO1xuICB2YXIgY2FsbGJhY2tzID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldERpbWVuc2lvbkFuZFdhdGNoU2Nyb2xsOiBnZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbCxcbiAgICAgIGdldFNjcm9sbFdoaWxlRHJhZ2dpbmc6IGdldFNjcm9sbFdoaWxlRHJhZ2dpbmcsXG4gICAgICBkcmFnU3RvcHBlZDogZHJhZ1N0b3BwZWQsXG4gICAgICBzY3JvbGw6IHNjcm9sbFxuICAgIH07XG4gIH0sIFtkcmFnU3RvcHBlZCwgZ2V0RGltZW5zaW9uQW5kV2F0Y2hTY3JvbGwsIGdldFNjcm9sbFdoaWxlRHJhZ2dpbmcsIHNjcm9sbF0pO1xuICB2YXIgZW50cnkgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdW5pcXVlSWQ6IHVuaXF1ZUlkLFxuICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgIGNhbGxiYWNrczogY2FsbGJhY2tzXG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrcywgZGVzY3JpcHRvciwgdW5pcXVlSWRdKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcHVibGlzaGVkRGVzY3JpcHRvclJlZi5jdXJyZW50ID0gZW50cnkuZGVzY3JpcHRvcjtcbiAgICByZWdpc3RyeS5kcm9wcGFibGUucmVnaXN0ZXIoZW50cnkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAod2hpbGVEcmFnZ2luZ1JlZi5jdXJyZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoJ1Vuc3VwcG9ydGVkOiBjaGFuZ2luZyB0aGUgZHJvcHBhYmxlSWQgb3IgdHlwZSBvZiBhIERyb3BwYWJsZSBkdXJpbmcgYSBkcmFnJykgOiB2b2lkIDA7XG4gICAgICAgIGRyYWdTdG9wcGVkKCk7XG4gICAgICB9XG5cbiAgICAgIHJlZ2lzdHJ5LmRyb3BwYWJsZS51bnJlZ2lzdGVyKGVudHJ5KTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2tzLCBkZXNjcmlwdG9yLCBkcmFnU3RvcHBlZCwgZW50cnksIG1hcnNoYWwsIHJlZ2lzdHJ5LmRyb3BwYWJsZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1hcnNoYWwudXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkKHB1Ymxpc2hlZERlc2NyaXB0b3JSZWYuY3VycmVudC5pZCwgIWFyZ3MuaXNEcm9wRGlzYWJsZWQpO1xuICB9LCBbYXJncy5pc0Ryb3BEaXNhYmxlZCwgbWFyc2hhbF0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXdoaWxlRHJhZ2dpbmdSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1hcnNoYWwudXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZChwdWJsaXNoZWREZXNjcmlwdG9yUmVmLmN1cnJlbnQuaWQsIGFyZ3MuaXNDb21iaW5lRW5hYmxlZCk7XG4gIH0sIFthcmdzLmlzQ29tYmluZUVuYWJsZWQsIG1hcnNoYWxdKTtcbn1cblxuZnVuY3Rpb24gbm9vcCQyKCkge31cblxudmFyIGVtcHR5ID0ge1xuICB3aWR0aDogMCxcbiAgaGVpZ2h0OiAwLFxuICBtYXJnaW46IG5vU3BhY2luZ1xufTtcblxudmFyIGdldFNpemUgPSBmdW5jdGlvbiBnZXRTaXplKF9yZWYpIHtcbiAgdmFyIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQgPSBfcmVmLmlzQW5pbWF0aW5nT3Blbk9uTW91bnQsXG4gICAgICBwbGFjZWhvbGRlciA9IF9yZWYucGxhY2Vob2xkZXIsXG4gICAgICBhbmltYXRlID0gX3JlZi5hbmltYXRlO1xuXG4gIGlmIChpc0FuaW1hdGluZ09wZW5Pbk1vdW50KSB7XG4gICAgcmV0dXJuIGVtcHR5O1xuICB9XG5cbiAgaWYgKGFuaW1hdGUgPT09ICdjbG9zZScpIHtcbiAgICByZXR1cm4gZW1wdHk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogcGxhY2Vob2xkZXIuY2xpZW50LmJvcmRlckJveC5oZWlnaHQsXG4gICAgd2lkdGg6IHBsYWNlaG9sZGVyLmNsaWVudC5ib3JkZXJCb3gud2lkdGgsXG4gICAgbWFyZ2luOiBwbGFjZWhvbGRlci5jbGllbnQubWFyZ2luXG4gIH07XG59O1xuXG52YXIgZ2V0U3R5bGUgPSBmdW5jdGlvbiBnZXRTdHlsZShfcmVmMikge1xuICB2YXIgaXNBbmltYXRpbmdPcGVuT25Nb3VudCA9IF9yZWYyLmlzQW5pbWF0aW5nT3Blbk9uTW91bnQsXG4gICAgICBwbGFjZWhvbGRlciA9IF9yZWYyLnBsYWNlaG9sZGVyLFxuICAgICAgYW5pbWF0ZSA9IF9yZWYyLmFuaW1hdGU7XG4gIHZhciBzaXplID0gZ2V0U2l6ZSh7XG4gICAgaXNBbmltYXRpbmdPcGVuT25Nb3VudDogaXNBbmltYXRpbmdPcGVuT25Nb3VudCxcbiAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgYW5pbWF0ZTogYW5pbWF0ZVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBkaXNwbGF5OiBwbGFjZWhvbGRlci5kaXNwbGF5LFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIHdpZHRoOiBzaXplLndpZHRoLFxuICAgIGhlaWdodDogc2l6ZS5oZWlnaHQsXG4gICAgbWFyZ2luVG9wOiBzaXplLm1hcmdpbi50b3AsXG4gICAgbWFyZ2luUmlnaHQ6IHNpemUubWFyZ2luLnJpZ2h0LFxuICAgIG1hcmdpbkJvdHRvbTogc2l6ZS5tYXJnaW4uYm90dG9tLFxuICAgIG1hcmdpbkxlZnQ6IHNpemUubWFyZ2luLmxlZnQsXG4gICAgZmxleFNocmluazogJzAnLFxuICAgIGZsZXhHcm93OiAnMCcsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIHRyYW5zaXRpb246IGFuaW1hdGUgIT09ICdub25lJyA/IHRyYW5zaXRpb25zLnBsYWNlaG9sZGVyIDogbnVsbFxuICB9O1xufTtcblxuZnVuY3Rpb24gUGxhY2Vob2xkZXIocHJvcHMpIHtcbiAgdmFyIGFuaW1hdGVPcGVuVGltZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciB0cnlDbGVhckFuaW1hdGVPcGVuVGltZXIgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFhbmltYXRlT3BlblRpbWVyUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjbGVhclRpbWVvdXQoYW5pbWF0ZU9wZW5UaW1lclJlZi5jdXJyZW50KTtcbiAgICBhbmltYXRlT3BlblRpbWVyUmVmLmN1cnJlbnQgPSBudWxsO1xuICB9LCBbXSk7XG4gIHZhciBhbmltYXRlID0gcHJvcHMuYW5pbWF0ZSxcbiAgICAgIG9uVHJhbnNpdGlvbkVuZCA9IHByb3BzLm9uVHJhbnNpdGlvbkVuZCxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgY29udGV4dElkID0gcHJvcHMuY29udGV4dElkO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShwcm9wcy5hbmltYXRlID09PSAnb3BlbicpLFxuICAgICAgaXNBbmltYXRpbmdPcGVuT25Nb3VudCA9IF91c2VTdGF0ZVswXSxcbiAgICAgIHNldElzQW5pbWF0aW5nT3Blbk9uTW91bnQgPSBfdXNlU3RhdGVbMV07XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWlzQW5pbWF0aW5nT3Blbk9uTW91bnQpIHtcbiAgICAgIHJldHVybiBub29wJDI7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGUgIT09ICdvcGVuJykge1xuICAgICAgdHJ5Q2xlYXJBbmltYXRlT3BlblRpbWVyKCk7XG4gICAgICBzZXRJc0FuaW1hdGluZ09wZW5Pbk1vdW50KGZhbHNlKTtcbiAgICAgIHJldHVybiBub29wJDI7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVPcGVuVGltZXJSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuIG5vb3AkMjtcbiAgICB9XG5cbiAgICBhbmltYXRlT3BlblRpbWVyUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGFuaW1hdGVPcGVuVGltZXJSZWYuY3VycmVudCA9IG51bGw7XG4gICAgICBzZXRJc0FuaW1hdGluZ09wZW5Pbk1vdW50KGZhbHNlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ5Q2xlYXJBbmltYXRlT3BlblRpbWVyO1xuICB9LCBbYW5pbWF0ZSwgaXNBbmltYXRpbmdPcGVuT25Nb3VudCwgdHJ5Q2xlYXJBbmltYXRlT3BlblRpbWVyXSk7XG4gIHZhciBvblNpemVDaGFuZ2VFbmQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQucHJvcGVydHlOYW1lICE9PSAnaGVpZ2h0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG9uVHJhbnNpdGlvbkVuZCgpO1xuXG4gICAgaWYgKGFuaW1hdGUgPT09ICdjbG9zZScpIHtcbiAgICAgIG9uQ2xvc2UoKTtcbiAgICB9XG4gIH0sIFthbmltYXRlLCBvbkNsb3NlLCBvblRyYW5zaXRpb25FbmRdKTtcbiAgdmFyIHN0eWxlID0gZ2V0U3R5bGUoe1xuICAgIGlzQW5pbWF0aW5nT3Blbk9uTW91bnQ6IGlzQW5pbWF0aW5nT3Blbk9uTW91bnQsXG4gICAgYW5pbWF0ZTogcHJvcHMuYW5pbWF0ZSxcbiAgICBwbGFjZWhvbGRlcjogcHJvcHMucGxhY2Vob2xkZXJcbiAgfSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzLnBsYWNlaG9sZGVyLnRhZ05hbWUsIHtcbiAgICBzdHlsZTogc3R5bGUsXG4gICAgJ2RhdGEtcmJkLXBsYWNlaG9sZGVyLWNvbnRleHQtaWQnOiBjb250ZXh0SWQsXG4gICAgb25UcmFuc2l0aW9uRW5kOiBvblNpemVDaGFuZ2VFbmQsXG4gICAgcmVmOiBwcm9wcy5pbm5lclJlZlxuICB9KTtcbn1cblxudmFyIFBsYWNlaG9sZGVyJDEgPSBSZWFjdC5tZW1vKFBsYWNlaG9sZGVyKTtcblxudmFyIERyb3BwYWJsZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5mdW5jdGlvbiBjaGVja0lzVmFsaWRJbm5lclJlZihlbCkge1xuICAhKGVsICYmIGlzSHRtbEVsZW1lbnQoZWwpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJcXG4gICAgcHJvdmlkZWQuaW5uZXJSZWYgaGFzIG5vdCBiZWVuIHByb3ZpZGVkIHdpdGggYSBIVE1MRWxlbWVudC5cXG5cXG4gICAgWW91IGNhbiBmaW5kIGEgZ3VpZGUgb24gdXNpbmcgdGhlIGlubmVyUmVmIGNhbGxiYWNrIGZ1bmN0aW9ucyBhdDpcXG4gICAgaHR0cHM6Ly9naXRodWIuY29tL2F0bGFzc2lhbi9yZWFjdC1iZWF1dGlmdWwtZG5kL2Jsb2IvbWFzdGVyL2RvY3MvZ3VpZGVzL3VzaW5nLWlubmVyLXJlZi5tZFxcbiAgXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuZnVuY3Rpb24gcnVuQ2hlY2tzKGFyZ3MsIGNoZWNrcykge1xuICBjaGVja3MuZm9yRWFjaChmdW5jdGlvbiAoY2hlY2spIHtcbiAgICByZXR1cm4gY2hlY2soYXJncyk7XG4gIH0pO1xufVxuXG52YXIgc2hhcmVkID0gW2Z1bmN0aW9uIHJlcXVpcmVkKF9yZWYpIHtcbiAgdmFyIHByb3BzID0gX3JlZi5wcm9wcztcbiAgIXByb3BzLmRyb3BwYWJsZUlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnQSBEcm9wcGFibGUgcmVxdWlyZXMgYSBkcm9wcGFibGVJZCBwcm9wJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhKHR5cGVvZiBwcm9wcy5kcm9wcGFibGVJZCA9PT0gJ3N0cmluZycpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkEgRHJvcHBhYmxlIHJlcXVpcmVzIGEgW3N0cmluZ10gZHJvcHBhYmxlSWQuIFByb3ZpZGVkOiBbXCIgKyB0eXBlb2YgcHJvcHMuZHJvcHBhYmxlSWQgKyBcIl1cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufSwgZnVuY3Rpb24gX2Jvb2xlYW4oX3JlZjIpIHtcbiAgdmFyIHByb3BzID0gX3JlZjIucHJvcHM7XG4gICFpc0Jvb2xlYW4ocHJvcHMuaXNEcm9wRGlzYWJsZWQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnaXNEcm9wRGlzYWJsZWQgbXVzdCBiZSBhIGJvb2xlYW4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICFpc0Jvb2xlYW4ocHJvcHMuaXNDb21iaW5lRW5hYmxlZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0NvbWJpbmVFbmFibGVkIG11c3QgYmUgYSBib29sZWFuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhaXNCb29sZWFuKHByb3BzLmlnbm9yZUNvbnRhaW5lckNsaXBwaW5nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ2lnbm9yZUNvbnRhaW5lckNsaXBwaW5nIG11c3QgYmUgYSBib29sZWFuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufSwgZnVuY3Rpb24gcmVmKF9yZWYzKSB7XG4gIHZhciBnZXREcm9wcGFibGVSZWYgPSBfcmVmMy5nZXREcm9wcGFibGVSZWY7XG4gIGNoZWNrSXNWYWxpZElubmVyUmVmKGdldERyb3BwYWJsZVJlZigpKTtcbn1dO1xudmFyIHN0YW5kYXJkID0gW2Z1bmN0aW9uIHBsYWNlaG9sZGVyKF9yZWY0KSB7XG4gIHZhciBwcm9wcyA9IF9yZWY0LnByb3BzLFxuICAgICAgZ2V0UGxhY2Vob2xkZXJSZWYgPSBfcmVmNC5nZXRQbGFjZWhvbGRlclJlZjtcblxuICBpZiAoIXByb3BzLnBsYWNlaG9sZGVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJlZiA9IGdldFBsYWNlaG9sZGVyUmVmKCk7XG5cbiAgaWYgKHJlZikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoXCJcXG4gICAgICBEcm9wcGFibGUgc2V0dXAgaXNzdWUgW2Ryb3BwYWJsZUlkOiBcXFwiXCIgKyBwcm9wcy5kcm9wcGFibGVJZCArIFwiXFxcIl06XFxuICAgICAgRHJvcHBhYmxlUHJvdmlkZWQgPiBwbGFjZWhvbGRlciBjb3VsZCBub3QgYmUgZm91bmQuXFxuXFxuICAgICAgUGxlYXNlIGJlIHN1cmUgdG8gYWRkIHRoZSB7cHJvdmlkZWQucGxhY2Vob2xkZXJ9IFJlYWN0IE5vZGUgYXMgYSBjaGlsZCBvZiB5b3VyIERyb3BwYWJsZS5cXG4gICAgICBNb3JlIGluZm9ybWF0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vYXRsYXNzaWFuL3JlYWN0LWJlYXV0aWZ1bC1kbmQvYmxvYi9tYXN0ZXIvZG9jcy9hcGkvZHJvcHBhYmxlLm1kXFxuICAgIFwiKSA6IHZvaWQgMDtcbn1dO1xudmFyIHZpcnR1YWwgPSBbZnVuY3Rpb24gaGFzQ2xvbmUoX3JlZjUpIHtcbiAgdmFyIHByb3BzID0gX3JlZjUucHJvcHM7XG4gICFwcm9wcy5yZW5kZXJDbG9uZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ011c3QgcHJvdmlkZSBhIGNsb25lIHJlbmRlciBmdW5jdGlvbiAocmVuZGVyQ2xvbmUpIGZvciB2aXJ0dWFsIGxpc3RzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xufSwgZnVuY3Rpb24gaGFzTm9QbGFjZWhvbGRlcihfcmVmNikge1xuICB2YXIgZ2V0UGxhY2Vob2xkZXJSZWYgPSBfcmVmNi5nZXRQbGFjZWhvbGRlclJlZjtcbiAgISFnZXRQbGFjZWhvbGRlclJlZigpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgdmlydHVhbCBsaXN0IHRvIG5vdCBoYXZlIGEgcGxhY2Vob2xkZXInKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG59XTtcbmZ1bmN0aW9uIHVzZVZhbGlkYXRpb24oYXJncykge1xuICB1c2VEZXZTZXR1cFdhcm5pbmcoZnVuY3Rpb24gKCkge1xuICAgIHJ1bkNoZWNrcyhhcmdzLCBzaGFyZWQpO1xuXG4gICAgaWYgKGFyZ3MucHJvcHMubW9kZSA9PT0gJ3N0YW5kYXJkJykge1xuICAgICAgcnVuQ2hlY2tzKGFyZ3MsIHN0YW5kYXJkKTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5wcm9wcy5tb2RlID09PSAndmlydHVhbCcpIHtcbiAgICAgIHJ1bkNoZWNrcyhhcmdzLCB2aXJ0dWFsKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgQW5pbWF0ZUluT3V0ID0gZnVuY3Rpb24gKF9SZWFjdCRQdXJlQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEFuaW1hdGVJbk91dCwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEFuaW1hdGVJbk91dCgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkUHVyZUNvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRQdXJlQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaXNWaXNpYmxlOiBCb29sZWFuKF90aGlzLnByb3BzLm9uKSxcbiAgICAgIGRhdGE6IF90aGlzLnByb3BzLm9uLFxuICAgICAgYW5pbWF0ZTogX3RoaXMucHJvcHMuc2hvdWxkQW5pbWF0ZSAmJiBfdGhpcy5wcm9wcy5vbiA/ICdvcGVuJyA6ICdub25lJ1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLmFuaW1hdGUgIT09ICdjbG9zZScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzVmlzaWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBBbmltYXRlSW5PdXQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIGlmICghcHJvcHMuc2hvdWxkQW5pbWF0ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNWaXNpYmxlOiBCb29sZWFuKHByb3BzLm9uKSxcbiAgICAgICAgZGF0YTogcHJvcHMub24sXG4gICAgICAgIGFuaW1hdGU6ICdub25lJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMub24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgZGF0YTogcHJvcHMub24sXG4gICAgICAgIGFuaW1hdGU6ICdvcGVuJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgIGRhdGE6IHN0YXRlLmRhdGEsXG4gICAgICAgIGFuaW1hdGU6ICdjbG9zZSdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgICBhbmltYXRlOiAnY2xvc2UnLFxuICAgICAgZGF0YTogbnVsbFxuICAgIH07XG4gIH07XG5cbiAgdmFyIF9wcm90byA9IEFuaW1hdGVJbk91dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvdmlkZWQgPSB7XG4gICAgICBvbkNsb3NlOiB0aGlzLm9uQ2xvc2UsXG4gICAgICBkYXRhOiB0aGlzLnN0YXRlLmRhdGEsXG4gICAgICBhbmltYXRlOiB0aGlzLnN0YXRlLmFuaW1hdGVcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHByb3ZpZGVkKTtcbiAgfTtcblxuICByZXR1cm4gQW5pbWF0ZUluT3V0O1xufShSZWFjdC5QdXJlQ29tcG9uZW50KTtcblxudmFyIHpJbmRleE9wdGlvbnMgPSB7XG4gIGRyYWdnaW5nOiA1MDAwLFxuICBkcm9wQW5pbWF0aW5nOiA0NTAwXG59O1xuXG52YXIgZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uID0gZnVuY3Rpb24gZ2V0RHJhZ2dpbmdUcmFuc2l0aW9uKHNob3VsZEFuaW1hdGVEcmFnTW92ZW1lbnQsIGRyb3BwaW5nKSB7XG4gIGlmIChkcm9wcGluZykge1xuICAgIHJldHVybiB0cmFuc2l0aW9ucy5kcm9wKGRyb3BwaW5nLmR1cmF0aW9uKTtcbiAgfVxuXG4gIGlmIChzaG91bGRBbmltYXRlRHJhZ01vdmVtZW50KSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25zLnNuYXA7XG4gIH1cblxuICByZXR1cm4gdHJhbnNpdGlvbnMuZmx1aWQ7XG59O1xuXG52YXIgZ2V0RHJhZ2dpbmdPcGFjaXR5ID0gZnVuY3Rpb24gZ2V0RHJhZ2dpbmdPcGFjaXR5KGlzQ29tYmluaW5nLCBpc0Ryb3BBbmltYXRpbmcpIHtcbiAgaWYgKCFpc0NvbWJpbmluZykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGlzRHJvcEFuaW1hdGluZyA/IGNvbWJpbmUub3BhY2l0eS5kcm9wIDogY29tYmluZS5vcGFjaXR5LmNvbWJpbmluZztcbn07XG5cbnZhciBnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUgPSBmdW5jdGlvbiBnZXRTaG91bGREcmFnZ2luZ0FuaW1hdGUoZHJhZ2dpbmcpIHtcbiAgaWYgKGRyYWdnaW5nLmZvcmNlU2hvdWxkQW5pbWF0ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGRyYWdnaW5nLmZvcmNlU2hvdWxkQW5pbWF0ZTtcbiAgfVxuXG4gIHJldHVybiBkcmFnZ2luZy5tb2RlID09PSAnU05BUCc7XG59O1xuXG5mdW5jdGlvbiBnZXREcmFnZ2luZ1N0eWxlKGRyYWdnaW5nKSB7XG4gIHZhciBkaW1lbnNpb24gPSBkcmFnZ2luZy5kaW1lbnNpb247XG4gIHZhciBib3ggPSBkaW1lbnNpb24uY2xpZW50O1xuICB2YXIgb2Zmc2V0ID0gZHJhZ2dpbmcub2Zmc2V0LFxuICAgICAgY29tYmluZVdpdGggPSBkcmFnZ2luZy5jb21iaW5lV2l0aCxcbiAgICAgIGRyb3BwaW5nID0gZHJhZ2dpbmcuZHJvcHBpbmc7XG4gIHZhciBpc0NvbWJpbmluZyA9IEJvb2xlYW4oY29tYmluZVdpdGgpO1xuICB2YXIgc2hvdWxkQW5pbWF0ZSA9IGdldFNob3VsZERyYWdnaW5nQW5pbWF0ZShkcmFnZ2luZyk7XG4gIHZhciBpc0Ryb3BBbmltYXRpbmcgPSBCb29sZWFuKGRyb3BwaW5nKTtcbiAgdmFyIHRyYW5zZm9ybSA9IGlzRHJvcEFuaW1hdGluZyA/IHRyYW5zZm9ybXMuZHJvcChvZmZzZXQsIGlzQ29tYmluaW5nKSA6IHRyYW5zZm9ybXMubW92ZVRvKG9mZnNldCk7XG4gIHZhciBzdHlsZSA9IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICB0b3A6IGJveC5tYXJnaW5Cb3gudG9wLFxuICAgIGxlZnQ6IGJveC5tYXJnaW5Cb3gubGVmdCxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICB3aWR0aDogYm94LmJvcmRlckJveC53aWR0aCxcbiAgICBoZWlnaHQ6IGJveC5ib3JkZXJCb3guaGVpZ2h0LFxuICAgIHRyYW5zaXRpb246IGdldERyYWdnaW5nVHJhbnNpdGlvbihzaG91bGRBbmltYXRlLCBkcm9wcGluZyksXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgb3BhY2l0eTogZ2V0RHJhZ2dpbmdPcGFjaXR5KGlzQ29tYmluaW5nLCBpc0Ryb3BBbmltYXRpbmcpLFxuICAgIHpJbmRleDogaXNEcm9wQW5pbWF0aW5nID8gekluZGV4T3B0aW9ucy5kcm9wQW5pbWF0aW5nIDogekluZGV4T3B0aW9ucy5kcmFnZ2luZyxcbiAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgfTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBnZXRTZWNvbmRhcnlTdHlsZShzZWNvbmRhcnkpIHtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybXMubW92ZVRvKHNlY29uZGFyeS5vZmZzZXQpLFxuICAgIHRyYW5zaXRpb246IHNlY29uZGFyeS5zaG91bGRBbmltYXRlRGlzcGxhY2VtZW50ID8gbnVsbCA6ICdub25lJ1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZSQxKG1hcHBlZCkge1xuICByZXR1cm4gbWFwcGVkLnR5cGUgPT09ICdEUkFHR0lORycgPyBnZXREcmFnZ2luZ1N0eWxlKG1hcHBlZCkgOiBnZXRTZWNvbmRhcnlTdHlsZShtYXBwZWQpO1xufVxuXG5mdW5jdGlvbiBnZXREaW1lbnNpb24kMShkZXNjcmlwdG9yLCBlbCwgd2luZG93U2Nyb2xsKSB7XG4gIGlmICh3aW5kb3dTY3JvbGwgPT09IHZvaWQgMCkge1xuICAgIHdpbmRvd1Njcm9sbCA9IG9yaWdpbjtcbiAgfVxuXG4gIHZhciBjb21wdXRlZFN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIGJvcmRlckJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgY2xpZW50ID0gY2FsY3VsYXRlQm94KGJvcmRlckJveCwgY29tcHV0ZWRTdHlsZXMpO1xuICB2YXIgcGFnZSA9IHdpdGhTY3JvbGwoY2xpZW50LCB3aW5kb3dTY3JvbGwpO1xuICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgdGFnTmFtZTogZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgIGRpc3BsYXk6IGNvbXB1dGVkU3R5bGVzLmRpc3BsYXlcbiAgfTtcbiAgdmFyIGRpc3BsYWNlQnkgPSB7XG4gICAgeDogY2xpZW50Lm1hcmdpbkJveC53aWR0aCxcbiAgICB5OiBjbGllbnQubWFyZ2luQm94LmhlaWdodFxuICB9O1xuICB2YXIgZGltZW5zaW9uID0ge1xuICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3IsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGRpc3BsYWNlQnk6IGRpc3BsYWNlQnksXG4gICAgY2xpZW50OiBjbGllbnQsXG4gICAgcGFnZTogcGFnZVxuICB9O1xuICByZXR1cm4gZGltZW5zaW9uO1xufVxuXG5mdW5jdGlvbiB1c2VEcmFnZ2FibGVQdWJsaXNoZXIoYXJncykge1xuICB2YXIgdW5pcXVlSWQgPSB1c2VVbmlxdWVJZCgnZHJhZ2dhYmxlJyk7XG4gIHZhciBkZXNjcmlwdG9yID0gYXJncy5kZXNjcmlwdG9yLFxuICAgICAgcmVnaXN0cnkgPSBhcmdzLnJlZ2lzdHJ5LFxuICAgICAgZ2V0RHJhZ2dhYmxlUmVmID0gYXJncy5nZXREcmFnZ2FibGVSZWYsXG4gICAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cyA9IGFyZ3MuY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyA9IGFyZ3Muc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsXG4gICAgICBpc0VuYWJsZWQgPSBhcmdzLmlzRW5hYmxlZDtcbiAgdmFyIG9wdGlvbnMgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHM6IGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzLFxuICAgICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3M6IHNob3VsZFJlc3BlY3RGb3JjZVByZXNzLFxuICAgICAgaXNFbmFibGVkOiBpc0VuYWJsZWRcbiAgICB9O1xuICB9LCBbY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsIGlzRW5hYmxlZCwgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3NdKTtcbiAgdmFyIGdldERpbWVuc2lvbiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh3aW5kb3dTY3JvbGwpIHtcbiAgICB2YXIgZWwgPSBnZXREcmFnZ2FibGVSZWYoKTtcbiAgICAhZWwgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgZ2V0IGRpbWVuc2lvbiB3aGVuIG5vIHJlZiBpcyBzZXQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGdldERpbWVuc2lvbiQxKGRlc2NyaXB0b3IsIGVsLCB3aW5kb3dTY3JvbGwpO1xuICB9LCBbZGVzY3JpcHRvciwgZ2V0RHJhZ2dhYmxlUmVmXSk7XG4gIHZhciBlbnRyeSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB1bmlxdWVJZDogdW5pcXVlSWQsXG4gICAgICBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yLFxuICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgIGdldERpbWVuc2lvbjogZ2V0RGltZW5zaW9uXG4gICAgfTtcbiAgfSwgW2Rlc2NyaXB0b3IsIGdldERpbWVuc2lvbiwgb3B0aW9ucywgdW5pcXVlSWRdKTtcbiAgdmFyIHB1Ymxpc2hlZFJlZiA9IHVzZVJlZihlbnRyeSk7XG4gIHZhciBpc0ZpcnN0UHVibGlzaFJlZiA9IHVzZVJlZih0cnVlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmVnaXN0cnkuZHJhZ2dhYmxlLnJlZ2lzdGVyKHB1Ymxpc2hlZFJlZi5jdXJyZW50KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlZ2lzdHJ5LmRyYWdnYWJsZS51bnJlZ2lzdGVyKHB1Ymxpc2hlZFJlZi5jdXJyZW50KTtcbiAgICB9O1xuICB9LCBbcmVnaXN0cnkuZHJhZ2dhYmxlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc0ZpcnN0UHVibGlzaFJlZi5jdXJyZW50KSB7XG4gICAgICBpc0ZpcnN0UHVibGlzaFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhc3QgPSBwdWJsaXNoZWRSZWYuY3VycmVudDtcbiAgICBwdWJsaXNoZWRSZWYuY3VycmVudCA9IGVudHJ5O1xuICAgIHJlZ2lzdHJ5LmRyYWdnYWJsZS51cGRhdGUoZW50cnksIGxhc3QpO1xuICB9LCBbZW50cnksIHJlZ2lzdHJ5LmRyYWdnYWJsZV0pO1xufVxuXG5mdW5jdGlvbiB1c2VWYWxpZGF0aW9uJDEocHJvcHMsIGNvbnRleHRJZCwgZ2V0UmVmKSB7XG4gIHVzZURldlNldHVwV2FybmluZyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gcHJlZml4KGlkKSB7XG4gICAgICByZXR1cm4gXCJEcmFnZ2FibGVbaWQ6IFwiICsgaWQgKyBcIl06IFwiO1xuICAgIH1cblxuICAgIHZhciBpZCA9IHByb3BzLmRyYWdnYWJsZUlkO1xuICAgICFpZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RyYWdnYWJsZSByZXF1aXJlcyBhIGRyYWdnYWJsZUlkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEodHlwZW9mIGlkID09PSAnc3RyaW5nJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiRHJhZ2dhYmxlIHJlcXVpcmVzIGEgW3N0cmluZ10gZHJhZ2dhYmxlSWQuXFxuICAgICAgUHJvdmlkZWQ6IFt0eXBlOiBcIiArIHR5cGVvZiBpZCArIFwiXSAodmFsdWU6IFwiICsgaWQgKyBcIilcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICFpc0ludGVnZXIocHJvcHMuaW5kZXgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBwcmVmaXgoaWQpICsgXCIgcmVxdWlyZXMgYW4gaW50ZWdlciBpbmRleCBwcm9wXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9wcy5tYXBwZWQudHlwZSA9PT0gJ0RSQUdHSU5HJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNoZWNrSXNWYWxpZElubmVyUmVmKGdldFJlZigpKTtcblxuICAgIGlmIChwcm9wcy5pc0VuYWJsZWQpIHtcbiAgICAgICFmaW5kRHJhZ0hhbmRsZShjb250ZXh0SWQsIGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgcHJlZml4KGlkKSArIFwiIFVuYWJsZSB0byBmaW5kIGRyYWcgaGFuZGxlXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gdXNlQ2xvbmVQcm9wVmFsaWRhdGlvbihpc0Nsb25lKSB7XG4gIHVzZURldihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluaXRpYWxSZWYgPSB1c2VSZWYoaXNDbG9uZSk7XG4gICAgdXNlRGV2U2V0dXBXYXJuaW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgICEoaXNDbG9uZSA9PT0gaW5pdGlhbFJlZi5jdXJyZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0RyYWdnYWJsZSBpc0Nsb25lIHByb3AgdmFsdWUgY2hhbmdlZCBkdXJpbmcgY29tcG9uZW50IGxpZmUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfSwgW2lzQ2xvbmVdKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByZXZlbnRIdG1sNURuZChldmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG5mdW5jdGlvbiBEcmFnZ2FibGUocHJvcHMpIHtcbiAgdmFyIHJlZiA9IHVzZVJlZihudWxsKTtcbiAgdmFyIHNldFJlZiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChlbCkge1xuICAgIHJlZi5jdXJyZW50ID0gZWw7XG4gIH0sIFtdKTtcbiAgdmFyIGdldFJlZiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmVmLmN1cnJlbnQ7XG4gIH0sIFtdKTtcblxuICB2YXIgX3VzZVJlcXVpcmVkQ29udGV4dCA9IHVzZVJlcXVpcmVkQ29udGV4dChBcHBDb250ZXh0KSxcbiAgICAgIGNvbnRleHRJZCA9IF91c2VSZXF1aXJlZENvbnRleHQuY29udGV4dElkLFxuICAgICAgZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zSWQgPSBfdXNlUmVxdWlyZWRDb250ZXh0LmRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uc0lkLFxuICAgICAgcmVnaXN0cnkgPSBfdXNlUmVxdWlyZWRDb250ZXh0LnJlZ2lzdHJ5O1xuXG4gIHZhciBfdXNlUmVxdWlyZWRDb250ZXh0MiA9IHVzZVJlcXVpcmVkQ29udGV4dChEcm9wcGFibGVDb250ZXh0KSxcbiAgICAgIHR5cGUgPSBfdXNlUmVxdWlyZWRDb250ZXh0Mi50eXBlLFxuICAgICAgZHJvcHBhYmxlSWQgPSBfdXNlUmVxdWlyZWRDb250ZXh0Mi5kcm9wcGFibGVJZDtcblxuICB2YXIgZGVzY3JpcHRvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogcHJvcHMuZHJhZ2dhYmxlSWQsXG4gICAgICBpbmRleDogcHJvcHMuaW5kZXgsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZHJvcHBhYmxlSWQ6IGRyb3BwYWJsZUlkXG4gICAgfTtcbiAgfSwgW3Byb3BzLmRyYWdnYWJsZUlkLCBwcm9wcy5pbmRleCwgdHlwZSwgZHJvcHBhYmxlSWRdKTtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBkcmFnZ2FibGVJZCA9IHByb3BzLmRyYWdnYWJsZUlkLFxuICAgICAgaXNFbmFibGVkID0gcHJvcHMuaXNFbmFibGVkLFxuICAgICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MgPSBwcm9wcy5zaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyxcbiAgICAgIGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzID0gcHJvcHMuY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgICBpc0Nsb25lID0gcHJvcHMuaXNDbG9uZSxcbiAgICAgIG1hcHBlZCA9IHByb3BzLm1hcHBlZCxcbiAgICAgIGRyb3BBbmltYXRpb25GaW5pc2hlZEFjdGlvbiA9IHByb3BzLmRyb3BBbmltYXRpb25GaW5pc2hlZDtcbiAgdXNlVmFsaWRhdGlvbiQxKHByb3BzLCBjb250ZXh0SWQsIGdldFJlZik7XG4gIHVzZUNsb25lUHJvcFZhbGlkYXRpb24oaXNDbG9uZSk7XG5cbiAgaWYgKCFpc0Nsb25lKSB7XG4gICAgdmFyIGZvclB1Ymxpc2hlciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvcixcbiAgICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5LFxuICAgICAgICBnZXREcmFnZ2FibGVSZWY6IGdldFJlZixcbiAgICAgICAgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHM6IGNhbkRyYWdJbnRlcmFjdGl2ZUVsZW1lbnRzLFxuICAgICAgICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsXG4gICAgICAgIGlzRW5hYmxlZDogaXNFbmFibGVkXG4gICAgICB9O1xuICAgIH0sIFtkZXNjcmlwdG9yLCByZWdpc3RyeSwgZ2V0UmVmLCBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50cywgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MsIGlzRW5hYmxlZF0pO1xuICAgIHVzZURyYWdnYWJsZVB1Ymxpc2hlcihmb3JQdWJsaXNoZXIpO1xuICB9XG5cbiAgdmFyIGRyYWdIYW5kbGVQcm9wcyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0VuYWJsZWQgPyB7XG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgIHJvbGU6ICdidXR0b24nLFxuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiBkcmFnSGFuZGxlVXNhZ2VJbnN0cnVjdGlvbnNJZCxcbiAgICAgICdkYXRhLXJiZC1kcmFnLWhhbmRsZS1kcmFnZ2FibGUtaWQnOiBkcmFnZ2FibGVJZCxcbiAgICAgICdkYXRhLXJiZC1kcmFnLWhhbmRsZS1jb250ZXh0LWlkJzogY29udGV4dElkLFxuICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgIG9uRHJhZ1N0YXJ0OiBwcmV2ZW50SHRtbDVEbmRcbiAgICB9IDogbnVsbDtcbiAgfSwgW2NvbnRleHRJZCwgZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zSWQsIGRyYWdnYWJsZUlkLCBpc0VuYWJsZWRdKTtcbiAgdmFyIG9uTW92ZUVuZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChtYXBwZWQudHlwZSAhPT0gJ0RSQUdHSU5HJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghbWFwcGVkLmRyb3BwaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkcm9wQW5pbWF0aW9uRmluaXNoZWRBY3Rpb24oKTtcbiAgfSwgW2Ryb3BBbmltYXRpb25GaW5pc2hlZEFjdGlvbiwgbWFwcGVkXSk7XG4gIHZhciBwcm92aWRlZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHlsZSA9IGdldFN0eWxlJDEobWFwcGVkKTtcbiAgICB2YXIgb25UcmFuc2l0aW9uRW5kID0gbWFwcGVkLnR5cGUgPT09ICdEUkFHR0lORycgJiYgbWFwcGVkLmRyb3BwaW5nID8gb25Nb3ZlRW5kIDogbnVsbDtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgaW5uZXJSZWY6IHNldFJlZixcbiAgICAgIGRyYWdnYWJsZVByb3BzOiB7XG4gICAgICAgICdkYXRhLXJiZC1kcmFnZ2FibGUtY29udGV4dC1pZCc6IGNvbnRleHRJZCxcbiAgICAgICAgJ2RhdGEtcmJkLWRyYWdnYWJsZS1pZCc6IGRyYWdnYWJsZUlkLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIG9uVHJhbnNpdGlvbkVuZDogb25UcmFuc2l0aW9uRW5kXG4gICAgICB9LFxuICAgICAgZHJhZ0hhbmRsZVByb3BzOiBkcmFnSGFuZGxlUHJvcHNcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIFtjb250ZXh0SWQsIGRyYWdIYW5kbGVQcm9wcywgZHJhZ2dhYmxlSWQsIG1hcHBlZCwgb25Nb3ZlRW5kLCBzZXRSZWZdKTtcbiAgdmFyIHJ1YnJpYyA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkcmFnZ2FibGVJZDogZGVzY3JpcHRvci5pZCxcbiAgICAgIHR5cGU6IGRlc2NyaXB0b3IudHlwZSxcbiAgICAgIHNvdXJjZToge1xuICAgICAgICBpbmRleDogZGVzY3JpcHRvci5pbmRleCxcbiAgICAgICAgZHJvcHBhYmxlSWQ6IGRlc2NyaXB0b3IuZHJvcHBhYmxlSWRcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbZGVzY3JpcHRvci5kcm9wcGFibGVJZCwgZGVzY3JpcHRvci5pZCwgZGVzY3JpcHRvci5pbmRleCwgZGVzY3JpcHRvci50eXBlXSk7XG4gIHJldHVybiBjaGlsZHJlbihwcm92aWRlZCwgbWFwcGVkLnNuYXBzaG90LCBydWJyaWMpO1xufVxuXG52YXIgaXNTdHJpY3RFcXVhbCA9IChmdW5jdGlvbiAoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn0pO1xuXG52YXIgd2hhdElzRHJhZ2dlZE92ZXJGcm9tUmVzdWx0ID0gKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgdmFyIGNvbWJpbmUgPSByZXN1bHQuY29tYmluZSxcbiAgICAgIGRlc3RpbmF0aW9uID0gcmVzdWx0LmRlc3RpbmF0aW9uO1xuXG4gIGlmIChkZXN0aW5hdGlvbikge1xuICAgIHJldHVybiBkZXN0aW5hdGlvbi5kcm9wcGFibGVJZDtcbiAgfVxuXG4gIGlmIChjb21iaW5lKSB7XG4gICAgcmV0dXJuIGNvbWJpbmUuZHJvcHBhYmxlSWQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0pO1xuXG52YXIgZ2V0Q29tYmluZVdpdGhGcm9tUmVzdWx0ID0gZnVuY3Rpb24gZ2V0Q29tYmluZVdpdGhGcm9tUmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0LmNvbWJpbmUgPyByZXN1bHQuY29tYmluZS5kcmFnZ2FibGVJZCA6IG51bGw7XG59O1xuXG52YXIgZ2V0Q29tYmluZVdpdGhGcm9tSW1wYWN0ID0gZnVuY3Rpb24gZ2V0Q29tYmluZVdpdGhGcm9tSW1wYWN0KGltcGFjdCkge1xuICByZXR1cm4gaW1wYWN0LmF0ICYmIGltcGFjdC5hdC50eXBlID09PSAnQ09NQklORScgPyBpbXBhY3QuYXQuY29tYmluZS5kcmFnZ2FibGVJZCA6IG51bGw7XG59O1xuXG5mdW5jdGlvbiBnZXREcmFnZ2FibGVTZWxlY3RvcigpIHtcbiAgdmFyIG1lbW9pemVkT2Zmc2V0ID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeVxuICAgIH07XG4gIH0pO1xuICB2YXIgZ2V0TWVtb2l6ZWRTbmFwc2hvdCA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKG1vZGUsIGlzQ2xvbmUsIGRyYWdnaW5nT3ZlciwgY29tYmluZVdpdGgsIGRyb3BwaW5nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlzRHJhZ2dpbmc6IHRydWUsXG4gICAgICBpc0Nsb25lOiBpc0Nsb25lLFxuICAgICAgaXNEcm9wQW5pbWF0aW5nOiBCb29sZWFuKGRyb3BwaW5nKSxcbiAgICAgIGRyb3BBbmltYXRpb246IGRyb3BwaW5nLFxuICAgICAgbW9kZTogbW9kZSxcbiAgICAgIGRyYWdnaW5nT3ZlcjogZHJhZ2dpbmdPdmVyLFxuICAgICAgY29tYmluZVdpdGg6IGNvbWJpbmVXaXRoLFxuICAgICAgY29tYmluZVRhcmdldEZvcjogbnVsbFxuICAgIH07XG4gIH0pO1xuICB2YXIgZ2V0TWVtb2l6ZWRQcm9wcyA9IG1lbW9pemVPbmUoZnVuY3Rpb24gKG9mZnNldCwgbW9kZSwgZGltZW5zaW9uLCBpc0Nsb25lLCBkcmFnZ2luZ092ZXIsIGNvbWJpbmVXaXRoLCBmb3JjZVNob3VsZEFuaW1hdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFwcGVkOiB7XG4gICAgICAgIHR5cGU6ICdEUkFHR0lORycsXG4gICAgICAgIGRyb3BwaW5nOiBudWxsLFxuICAgICAgICBkcmFnZ2luZ092ZXI6IGRyYWdnaW5nT3ZlcixcbiAgICAgICAgY29tYmluZVdpdGg6IGNvbWJpbmVXaXRoLFxuICAgICAgICBtb2RlOiBtb2RlLFxuICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgZGltZW5zaW9uOiBkaW1lbnNpb24sXG4gICAgICAgIGZvcmNlU2hvdWxkQW5pbWF0ZTogZm9yY2VTaG91bGRBbmltYXRlLFxuICAgICAgICBzbmFwc2hvdDogZ2V0TWVtb2l6ZWRTbmFwc2hvdChtb2RlLCBpc0Nsb25lLCBkcmFnZ2luZ092ZXIsIGNvbWJpbmVXaXRoLCBudWxsKVxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG4gIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIGlmIChzdGF0ZS5pc0RyYWdnaW5nKSB7XG4gICAgICBpZiAoc3RhdGUuY3JpdGljYWwuZHJhZ2dhYmxlLmlkICE9PSBvd25Qcm9wcy5kcmFnZ2FibGVJZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIG9mZnNldCA9IHN0YXRlLmN1cnJlbnQuY2xpZW50Lm9mZnNldDtcbiAgICAgIHZhciBkaW1lbnNpb24gPSBzdGF0ZS5kaW1lbnNpb25zLmRyYWdnYWJsZXNbb3duUHJvcHMuZHJhZ2dhYmxlSWRdO1xuICAgICAgdmFyIGRyYWdnaW5nT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyKHN0YXRlLmltcGFjdCk7XG4gICAgICB2YXIgY29tYmluZVdpdGggPSBnZXRDb21iaW5lV2l0aEZyb21JbXBhY3Qoc3RhdGUuaW1wYWN0KTtcbiAgICAgIHZhciBmb3JjZVNob3VsZEFuaW1hdGUgPSBzdGF0ZS5mb3JjZVNob3VsZEFuaW1hdGU7XG4gICAgICByZXR1cm4gZ2V0TWVtb2l6ZWRQcm9wcyhtZW1vaXplZE9mZnNldChvZmZzZXQueCwgb2Zmc2V0LnkpLCBzdGF0ZS5tb3ZlbWVudE1vZGUsIGRpbWVuc2lvbiwgb3duUHJvcHMuaXNDbG9uZSwgZHJhZ2dpbmdPdmVyLCBjb21iaW5lV2l0aCwgZm9yY2VTaG91bGRBbmltYXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSBzdGF0ZS5jb21wbGV0ZWQ7XG5cbiAgICAgIGlmIChjb21wbGV0ZWQucmVzdWx0LmRyYWdnYWJsZUlkICE9PSBvd25Qcm9wcy5kcmFnZ2FibGVJZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzQ2xvbmUgPSBvd25Qcm9wcy5pc0Nsb25lO1xuICAgICAgdmFyIF9kaW1lbnNpb24gPSBzdGF0ZS5kaW1lbnNpb25zLmRyYWdnYWJsZXNbb3duUHJvcHMuZHJhZ2dhYmxlSWRdO1xuICAgICAgdmFyIHJlc3VsdCA9IGNvbXBsZXRlZC5yZXN1bHQ7XG4gICAgICB2YXIgbW9kZSA9IHJlc3VsdC5tb2RlO1xuXG4gICAgICB2YXIgX2RyYWdnaW5nT3ZlciA9IHdoYXRJc0RyYWdnZWRPdmVyRnJvbVJlc3VsdChyZXN1bHQpO1xuXG4gICAgICB2YXIgX2NvbWJpbmVXaXRoID0gZ2V0Q29tYmluZVdpdGhGcm9tUmVzdWx0KHJlc3VsdCk7XG5cbiAgICAgIHZhciBkdXJhdGlvbiA9IHN0YXRlLmRyb3BEdXJhdGlvbjtcbiAgICAgIHZhciBkcm9wcGluZyA9IHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBjdXJ2ZTogY3VydmVzLmRyb3AsXG4gICAgICAgIG1vdmVUbzogc3RhdGUubmV3SG9tZUNsaWVudE9mZnNldCxcbiAgICAgICAgb3BhY2l0eTogX2NvbWJpbmVXaXRoID8gY29tYmluZS5vcGFjaXR5LmRyb3AgOiBudWxsLFxuICAgICAgICBzY2FsZTogX2NvbWJpbmVXaXRoID8gY29tYmluZS5zY2FsZS5kcm9wIDogbnVsbFxuICAgICAgfTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hcHBlZDoge1xuICAgICAgICAgIHR5cGU6ICdEUkFHR0lORycsXG4gICAgICAgICAgb2Zmc2V0OiBzdGF0ZS5uZXdIb21lQ2xpZW50T2Zmc2V0LFxuICAgICAgICAgIGRpbWVuc2lvbjogX2RpbWVuc2lvbixcbiAgICAgICAgICBkcm9wcGluZzogZHJvcHBpbmcsXG4gICAgICAgICAgZHJhZ2dpbmdPdmVyOiBfZHJhZ2dpbmdPdmVyLFxuICAgICAgICAgIGNvbWJpbmVXaXRoOiBfY29tYmluZVdpdGgsXG4gICAgICAgICAgbW9kZTogbW9kZSxcbiAgICAgICAgICBmb3JjZVNob3VsZEFuaW1hdGU6IG51bGwsXG4gICAgICAgICAgc25hcHNob3Q6IGdldE1lbW9pemVkU25hcHNob3QobW9kZSwgaXNDbG9uZSwgX2RyYWdnaW5nT3ZlciwgX2NvbWJpbmVXaXRoLCBkcm9wcGluZylcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGdldFNlY29uZGFyeVNuYXBzaG90KGNvbWJpbmVUYXJnZXRGb3IpIHtcbiAgcmV0dXJuIHtcbiAgICBpc0RyYWdnaW5nOiBmYWxzZSxcbiAgICBpc0Ryb3BBbmltYXRpbmc6IGZhbHNlLFxuICAgIGlzQ2xvbmU6IGZhbHNlLFxuICAgIGRyb3BBbmltYXRpb246IG51bGwsXG4gICAgbW9kZTogbnVsbCxcbiAgICBkcmFnZ2luZ092ZXI6IG51bGwsXG4gICAgY29tYmluZVRhcmdldEZvcjogY29tYmluZVRhcmdldEZvcixcbiAgICBjb21iaW5lV2l0aDogbnVsbFxuICB9O1xufVxuXG52YXIgYXRSZXN0ID0ge1xuICBtYXBwZWQ6IHtcbiAgICB0eXBlOiAnU0VDT05EQVJZJyxcbiAgICBvZmZzZXQ6IG9yaWdpbixcbiAgICBjb21iaW5lVGFyZ2V0Rm9yOiBudWxsLFxuICAgIHNob3VsZEFuaW1hdGVEaXNwbGFjZW1lbnQ6IHRydWUsXG4gICAgc25hcHNob3Q6IGdldFNlY29uZGFyeVNuYXBzaG90KG51bGwpXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFNlY29uZGFyeVNlbGVjdG9yKCkge1xuICB2YXIgbWVtb2l6ZWRPZmZzZXQgPSBtZW1vaXplT25lKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5XG4gICAgfTtcbiAgfSk7XG4gIHZhciBnZXRNZW1vaXplZFNuYXBzaG90ID0gbWVtb2l6ZU9uZShnZXRTZWNvbmRhcnlTbmFwc2hvdCk7XG4gIHZhciBnZXRNZW1vaXplZFByb3BzID0gbWVtb2l6ZU9uZShmdW5jdGlvbiAob2Zmc2V0LCBjb21iaW5lVGFyZ2V0Rm9yLCBzaG91bGRBbmltYXRlRGlzcGxhY2VtZW50KSB7XG4gICAgaWYgKGNvbWJpbmVUYXJnZXRGb3IgPT09IHZvaWQgMCkge1xuICAgICAgY29tYmluZVRhcmdldEZvciA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1hcHBlZDoge1xuICAgICAgICB0eXBlOiAnU0VDT05EQVJZJyxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIGNvbWJpbmVUYXJnZXRGb3I6IGNvbWJpbmVUYXJnZXRGb3IsXG4gICAgICAgIHNob3VsZEFuaW1hdGVEaXNwbGFjZW1lbnQ6IHNob3VsZEFuaW1hdGVEaXNwbGFjZW1lbnQsXG4gICAgICAgIHNuYXBzaG90OiBnZXRNZW1vaXplZFNuYXBzaG90KGNvbWJpbmVUYXJnZXRGb3IpXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbiAgdmFyIGdldEZhbGxiYWNrID0gZnVuY3Rpb24gZ2V0RmFsbGJhY2soY29tYmluZVRhcmdldEZvcikge1xuICAgIHJldHVybiBjb21iaW5lVGFyZ2V0Rm9yID8gZ2V0TWVtb2l6ZWRQcm9wcyhvcmlnaW4sIGNvbWJpbmVUYXJnZXRGb3IsIHRydWUpIDogbnVsbDtcbiAgfTtcblxuICB2YXIgZ2V0UHJvcHMgPSBmdW5jdGlvbiBnZXRQcm9wcyhvd25JZCwgZHJhZ2dpbmdJZCwgaW1wYWN0LCBhZnRlckNyaXRpY2FsKSB7XG4gICAgdmFyIHZpc3VhbERpc3BsYWNlbWVudCA9IGltcGFjdC5kaXNwbGFjZWQudmlzaWJsZVtvd25JZF07XG4gICAgdmFyIGlzQWZ0ZXJDcml0aWNhbEluVmlydHVhbExpc3QgPSBCb29sZWFuKGFmdGVyQ3JpdGljYWwuaW5WaXJ0dWFsTGlzdCAmJiBhZnRlckNyaXRpY2FsLmVmZmVjdGVkW293bklkXSk7XG4gICAgdmFyIGNvbWJpbmUgPSB0cnlHZXRDb21iaW5lKGltcGFjdCk7XG4gICAgdmFyIGNvbWJpbmVUYXJnZXRGb3IgPSBjb21iaW5lICYmIGNvbWJpbmUuZHJhZ2dhYmxlSWQgPT09IG93bklkID8gZHJhZ2dpbmdJZCA6IG51bGw7XG5cbiAgICBpZiAoIXZpc3VhbERpc3BsYWNlbWVudCkge1xuICAgICAgaWYgKCFpc0FmdGVyQ3JpdGljYWxJblZpcnR1YWxMaXN0KSB7XG4gICAgICAgIHJldHVybiBnZXRGYWxsYmFjayhjb21iaW5lVGFyZ2V0Rm9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGltcGFjdC5kaXNwbGFjZWQuaW52aXNpYmxlW293bklkXSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoYW5nZSA9IG5lZ2F0ZShhZnRlckNyaXRpY2FsLmRpc3BsYWNlZEJ5LnBvaW50KTtcblxuICAgICAgdmFyIF9vZmZzZXQgPSBtZW1vaXplZE9mZnNldChjaGFuZ2UueCwgY2hhbmdlLnkpO1xuXG4gICAgICByZXR1cm4gZ2V0TWVtb2l6ZWRQcm9wcyhfb2Zmc2V0LCBjb21iaW5lVGFyZ2V0Rm9yLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNBZnRlckNyaXRpY2FsSW5WaXJ0dWFsTGlzdCkge1xuICAgICAgcmV0dXJuIGdldEZhbGxiYWNrKGNvbWJpbmVUYXJnZXRGb3IpO1xuICAgIH1cblxuICAgIHZhciBkaXNwbGFjZUJ5ID0gaW1wYWN0LmRpc3BsYWNlZEJ5LnBvaW50O1xuICAgIHZhciBvZmZzZXQgPSBtZW1vaXplZE9mZnNldChkaXNwbGFjZUJ5LngsIGRpc3BsYWNlQnkueSk7XG4gICAgcmV0dXJuIGdldE1lbW9pemVkUHJvcHMob2Zmc2V0LCBjb21iaW5lVGFyZ2V0Rm9yLCB2aXN1YWxEaXNwbGFjZW1lbnQuc2hvdWxkQW5pbWF0ZSk7XG4gIH07XG5cbiAgdmFyIHNlbGVjdG9yID0gZnVuY3Rpb24gc2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgaWYgKHN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgIGlmIChzdGF0ZS5jcml0aWNhbC5kcmFnZ2FibGUuaWQgPT09IG93blByb3BzLmRyYWdnYWJsZUlkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0UHJvcHMob3duUHJvcHMuZHJhZ2dhYmxlSWQsIHN0YXRlLmNyaXRpY2FsLmRyYWdnYWJsZS5pZCwgc3RhdGUuaW1wYWN0LCBzdGF0ZS5hZnRlckNyaXRpY2FsKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUucGhhc2UgPT09ICdEUk9QX0FOSU1BVElORycpIHtcbiAgICAgIHZhciBjb21wbGV0ZWQgPSBzdGF0ZS5jb21wbGV0ZWQ7XG5cbiAgICAgIGlmIChjb21wbGV0ZWQucmVzdWx0LmRyYWdnYWJsZUlkID09PSBvd25Qcm9wcy5kcmFnZ2FibGVJZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFByb3BzKG93blByb3BzLmRyYWdnYWJsZUlkLCBjb21wbGV0ZWQucmVzdWx0LmRyYWdnYWJsZUlkLCBjb21wbGV0ZWQuaW1wYWN0LCBjb21wbGV0ZWQuYWZ0ZXJDcml0aWNhbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdG9yO1xufVxuXG52YXIgbWFrZU1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1ha2VNYXBTdGF0ZVRvUHJvcHMoKSB7XG4gIHZhciBkcmFnZ2luZ1NlbGVjdG9yID0gZ2V0RHJhZ2dhYmxlU2VsZWN0b3IoKTtcbiAgdmFyIHNlY29uZGFyeVNlbGVjdG9yID0gZ2V0U2Vjb25kYXJ5U2VsZWN0b3IoKTtcblxuICB2YXIgc2VsZWN0b3IgPSBmdW5jdGlvbiBzZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gZHJhZ2dpbmdTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHx8IHNlY29uZGFyeVNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykgfHwgYXRSZXN0O1xuICB9O1xuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn07XG52YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBkcm9wQW5pbWF0aW9uRmluaXNoZWQ6IGRyb3BBbmltYXRpb25GaW5pc2hlZFxufTtcbnZhciBDb25uZWN0ZWREcmFnZ2FibGUgPSBjb25uZWN0KG1ha2VNYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbnVsbCwge1xuICBjb250ZXh0OiBTdG9yZUNvbnRleHQsXG4gIHB1cmU6IHRydWUsXG4gIGFyZVN0YXRlUHJvcHNFcXVhbDogaXNTdHJpY3RFcXVhbFxufSkoRHJhZ2dhYmxlKTtcblxuZnVuY3Rpb24gUHJpdmF0ZURyYWdnYWJsZShwcm9wcykge1xuICB2YXIgZHJvcHBhYmxlQ29udGV4dCA9IHVzZVJlcXVpcmVkQ29udGV4dChEcm9wcGFibGVDb250ZXh0KTtcbiAgdmFyIGlzVXNpbmdDbG9uZUZvciA9IGRyb3BwYWJsZUNvbnRleHQuaXNVc2luZ0Nsb25lRm9yO1xuXG4gIGlmIChpc1VzaW5nQ2xvbmVGb3IgPT09IHByb3BzLmRyYWdnYWJsZUlkICYmICFwcm9wcy5pc0Nsb25lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0ZWREcmFnZ2FibGUsIHByb3BzKTtcbn1cbmZ1bmN0aW9uIFB1YmxpY0RyYWdnYWJsZShwcm9wcykge1xuICB2YXIgaXNFbmFibGVkID0gdHlwZW9mIHByb3BzLmlzRHJhZ0Rpc2FibGVkID09PSAnYm9vbGVhbicgPyAhcHJvcHMuaXNEcmFnRGlzYWJsZWQgOiB0cnVlO1xuICB2YXIgY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMgPSBCb29sZWFuKHByb3BzLmRpc2FibGVJbnRlcmFjdGl2ZUVsZW1lbnRCbG9ja2luZyk7XG4gIHZhciBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyA9IEJvb2xlYW4ocHJvcHMuc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChQcml2YXRlRHJhZ2dhYmxlLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBpc0Nsb25lOiBmYWxzZSxcbiAgICBpc0VuYWJsZWQ6IGlzRW5hYmxlZCxcbiAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50czogY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMsXG4gICAgc2hvdWxkUmVzcGVjdEZvcmNlUHJlc3M6IHNob3VsZFJlc3BlY3RGb3JjZVByZXNzXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gRHJvcHBhYmxlKHByb3BzKSB7XG4gIHZhciBhcHBDb250ZXh0ID0gdXNlQ29udGV4dChBcHBDb250ZXh0KTtcbiAgIWFwcENvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdDb3VsZCBub3QgZmluZCBhcHAgY29udGV4dCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGNvbnRleHRJZCA9IGFwcENvbnRleHQuY29udGV4dElkLFxuICAgICAgaXNNb3ZlbWVudEFsbG93ZWQgPSBhcHBDb250ZXh0LmlzTW92ZW1lbnRBbGxvd2VkO1xuICB2YXIgZHJvcHBhYmxlUmVmID0gdXNlUmVmKG51bGwpO1xuICB2YXIgcGxhY2Vob2xkZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgZHJvcHBhYmxlSWQgPSBwcm9wcy5kcm9wcGFibGVJZCxcbiAgICAgIHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgbW9kZSA9IHByb3BzLm1vZGUsXG4gICAgICBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBpZ25vcmVDb250YWluZXJDbGlwcGluZyA9IHByb3BzLmlnbm9yZUNvbnRhaW5lckNsaXBwaW5nLFxuICAgICAgaXNEcm9wRGlzYWJsZWQgPSBwcm9wcy5pc0Ryb3BEaXNhYmxlZCxcbiAgICAgIGlzQ29tYmluZUVuYWJsZWQgPSBwcm9wcy5pc0NvbWJpbmVFbmFibGVkLFxuICAgICAgc25hcHNob3QgPSBwcm9wcy5zbmFwc2hvdCxcbiAgICAgIHVzZUNsb25lID0gcHJvcHMudXNlQ2xvbmUsXG4gICAgICB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCA9IHByb3BzLnVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsLFxuICAgICAgZ2V0Q29udGFpbmVyRm9yQ2xvbmUgPSBwcm9wcy5nZXRDb250YWluZXJGb3JDbG9uZTtcbiAgdmFyIGdldERyb3BwYWJsZVJlZiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZHJvcHBhYmxlUmVmLmN1cnJlbnQ7XG4gIH0sIFtdKTtcbiAgdmFyIHNldERyb3BwYWJsZVJlZiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGRyb3BwYWJsZVJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0sIFtdKTtcbiAgdmFyIGdldFBsYWNlaG9sZGVyUmVmID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBwbGFjZWhvbGRlclJlZi5jdXJyZW50O1xuICB9LCBbXSk7XG4gIHZhciBzZXRQbGFjZWhvbGRlclJlZiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHBsYWNlaG9sZGVyUmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfSwgW10pO1xuICB1c2VWYWxpZGF0aW9uKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgZ2V0RHJvcHBhYmxlUmVmOiBnZXREcm9wcGFibGVSZWYsXG4gICAgZ2V0UGxhY2Vob2xkZXJSZWY6IGdldFBsYWNlaG9sZGVyUmVmXG4gIH0pO1xuICB2YXIgb25QbGFjZWhvbGRlclRyYW5zaXRpb25FbmQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzTW92ZW1lbnRBbGxvd2VkKCkpIHtcbiAgICAgIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsKHtcbiAgICAgICAgbWF4U2Nyb2xsOiBnZXRNYXhXaW5kb3dTY3JvbGwoKVxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbaXNNb3ZlbWVudEFsbG93ZWQsIHVwZGF0ZVZpZXdwb3J0TWF4U2Nyb2xsXSk7XG4gIHVzZURyb3BwYWJsZVB1Ymxpc2hlcih7XG4gICAgZHJvcHBhYmxlSWQ6IGRyb3BwYWJsZUlkLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgbW9kZTogbW9kZSxcbiAgICBkaXJlY3Rpb246IGRpcmVjdGlvbixcbiAgICBpc0Ryb3BEaXNhYmxlZDogaXNEcm9wRGlzYWJsZWQsXG4gICAgaXNDb21iaW5lRW5hYmxlZDogaXNDb21iaW5lRW5hYmxlZCxcbiAgICBpZ25vcmVDb250YWluZXJDbGlwcGluZzogaWdub3JlQ29udGFpbmVyQ2xpcHBpbmcsXG4gICAgZ2V0RHJvcHBhYmxlUmVmOiBnZXREcm9wcGFibGVSZWZcbiAgfSk7XG4gIHZhciBwbGFjZWhvbGRlciA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQW5pbWF0ZUluT3V0LCB7XG4gICAgb246IHByb3BzLnBsYWNlaG9sZGVyLFxuICAgIHNob3VsZEFuaW1hdGU6IHByb3BzLnNob3VsZEFuaW1hdGVQbGFjZWhvbGRlclxuICB9LCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBvbkNsb3NlID0gX3JlZi5vbkNsb3NlLFxuICAgICAgICBkYXRhID0gX3JlZi5kYXRhLFxuICAgICAgICBhbmltYXRlID0gX3JlZi5hbmltYXRlO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFBsYWNlaG9sZGVyJDEsIHtcbiAgICAgIHBsYWNlaG9sZGVyOiBkYXRhLFxuICAgICAgb25DbG9zZTogb25DbG9zZSxcbiAgICAgIGlubmVyUmVmOiBzZXRQbGFjZWhvbGRlclJlZixcbiAgICAgIGFuaW1hdGU6IGFuaW1hdGUsXG4gICAgICBjb250ZXh0SWQ6IGNvbnRleHRJZCxcbiAgICAgIG9uVHJhbnNpdGlvbkVuZDogb25QbGFjZWhvbGRlclRyYW5zaXRpb25FbmRcbiAgICB9KTtcbiAgfSk7XG4gIHZhciBwcm92aWRlZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpbm5lclJlZjogc2V0RHJvcHBhYmxlUmVmLFxuICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgZHJvcHBhYmxlUHJvcHM6IHtcbiAgICAgICAgJ2RhdGEtcmJkLWRyb3BwYWJsZS1pZCc6IGRyb3BwYWJsZUlkLFxuICAgICAgICAnZGF0YS1yYmQtZHJvcHBhYmxlLWNvbnRleHQtaWQnOiBjb250ZXh0SWRcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbY29udGV4dElkLCBkcm9wcGFibGVJZCwgcGxhY2Vob2xkZXIsIHNldERyb3BwYWJsZVJlZl0pO1xuICB2YXIgaXNVc2luZ0Nsb25lRm9yID0gdXNlQ2xvbmUgPyB1c2VDbG9uZS5kcmFnZ2luZy5kcmFnZ2FibGVJZCA6IG51bGw7XG4gIHZhciBkcm9wcGFibGVDb250ZXh0ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRyb3BwYWJsZUlkOiBkcm9wcGFibGVJZCxcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBpc1VzaW5nQ2xvbmVGb3I6IGlzVXNpbmdDbG9uZUZvclxuICAgIH07XG4gIH0sIFtkcm9wcGFibGVJZCwgaXNVc2luZ0Nsb25lRm9yLCB0eXBlXSk7XG5cbiAgZnVuY3Rpb24gZ2V0Q2xvbmUoKSB7XG4gICAgaWYgKCF1c2VDbG9uZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGRyYWdnaW5nID0gdXNlQ2xvbmUuZHJhZ2dpbmcsXG4gICAgICAgIHJlbmRlciA9IHVzZUNsb25lLnJlbmRlcjtcbiAgICB2YXIgbm9kZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJpdmF0ZURyYWdnYWJsZSwge1xuICAgICAgZHJhZ2dhYmxlSWQ6IGRyYWdnaW5nLmRyYWdnYWJsZUlkLFxuICAgICAgaW5kZXg6IGRyYWdnaW5nLnNvdXJjZS5pbmRleCxcbiAgICAgIGlzQ2xvbmU6IHRydWUsXG4gICAgICBpc0VuYWJsZWQ6IHRydWUsXG4gICAgICBzaG91bGRSZXNwZWN0Rm9yY2VQcmVzczogZmFsc2UsXG4gICAgICBjYW5EcmFnSW50ZXJhY3RpdmVFbGVtZW50czogdHJ1ZVxuICAgIH0sIGZ1bmN0aW9uIChkcmFnZ2FibGVQcm92aWRlZCwgZHJhZ2dhYmxlU25hcHNob3QpIHtcbiAgICAgIHJldHVybiByZW5kZXIoZHJhZ2dhYmxlUHJvdmlkZWQsIGRyYWdnYWJsZVNuYXBzaG90LCBkcmFnZ2luZyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbChub2RlLCBnZXRDb250YWluZXJGb3JDbG9uZSgpKTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KERyb3BwYWJsZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZHJvcHBhYmxlQ29udGV4dFxuICB9LCBjaGlsZHJlbihwcm92aWRlZCwgc25hcHNob3QpLCBnZXRDbG9uZSgpKTtcbn1cblxudmFyIGlzTWF0Y2hpbmdUeXBlID0gZnVuY3Rpb24gaXNNYXRjaGluZ1R5cGUodHlwZSwgY3JpdGljYWwpIHtcbiAgcmV0dXJuIHR5cGUgPT09IGNyaXRpY2FsLmRyb3BwYWJsZS50eXBlO1xufTtcblxudmFyIGdldERyYWdnYWJsZSA9IGZ1bmN0aW9uIGdldERyYWdnYWJsZShjcml0aWNhbCwgZGltZW5zaW9ucykge1xuICByZXR1cm4gZGltZW5zaW9ucy5kcmFnZ2FibGVzW2NyaXRpY2FsLmRyYWdnYWJsZS5pZF07XG59O1xuXG52YXIgbWFrZU1hcFN0YXRlVG9Qcm9wcyQxID0gZnVuY3Rpb24gbWFrZU1hcFN0YXRlVG9Qcm9wcygpIHtcbiAgdmFyIGlkbGVXaXRoQW5pbWF0aW9uID0ge1xuICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgIHNob3VsZEFuaW1hdGVQbGFjZWhvbGRlcjogdHJ1ZSxcbiAgICBzbmFwc2hvdDoge1xuICAgICAgaXNEcmFnZ2luZ092ZXI6IGZhbHNlLFxuICAgICAgZHJhZ2dpbmdPdmVyV2l0aDogbnVsbCxcbiAgICAgIGRyYWdnaW5nRnJvbVRoaXNXaXRoOiBudWxsLFxuICAgICAgaXNVc2luZ1BsYWNlaG9sZGVyOiBmYWxzZVxuICAgIH0sXG4gICAgdXNlQ2xvbmU6IG51bGxcbiAgfTtcblxuICB2YXIgaWRsZVdpdGhvdXRBbmltYXRpb24gPSBfZXh0ZW5kcyh7fSwgaWRsZVdpdGhBbmltYXRpb24sIHtcbiAgICBzaG91bGRBbmltYXRlUGxhY2Vob2xkZXI6IGZhbHNlXG4gIH0pO1xuXG4gIHZhciBnZXREcmFnZ2FibGVSdWJyaWMgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChkZXNjcmlwdG9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRyYWdnYWJsZUlkOiBkZXNjcmlwdG9yLmlkLFxuICAgICAgdHlwZTogZGVzY3JpcHRvci50eXBlLFxuICAgICAgc291cmNlOiB7XG4gICAgICAgIGluZGV4OiBkZXNjcmlwdG9yLmluZGV4LFxuICAgICAgICBkcm9wcGFibGVJZDogZGVzY3JpcHRvci5kcm9wcGFibGVJZFxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICB2YXIgZ2V0TWFwUHJvcHMgPSBtZW1vaXplT25lKGZ1bmN0aW9uIChpZCwgaXNFbmFibGVkLCBpc0RyYWdnaW5nT3ZlckZvckNvbnN1bWVyLCBpc0RyYWdnaW5nT3ZlckZvckltcGFjdCwgZHJhZ2dpbmcsIHJlbmRlckNsb25lKSB7XG4gICAgdmFyIGRyYWdnYWJsZUlkID0gZHJhZ2dpbmcuZGVzY3JpcHRvci5pZDtcbiAgICB2YXIgaXNIb21lID0gZHJhZ2dpbmcuZGVzY3JpcHRvci5kcm9wcGFibGVJZCA9PT0gaWQ7XG5cbiAgICBpZiAoaXNIb21lKSB7XG4gICAgICB2YXIgdXNlQ2xvbmUgPSByZW5kZXJDbG9uZSA/IHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXJDbG9uZSxcbiAgICAgICAgZHJhZ2dpbmc6IGdldERyYWdnYWJsZVJ1YnJpYyhkcmFnZ2luZy5kZXNjcmlwdG9yKVxuICAgICAgfSA6IG51bGw7XG4gICAgICB2YXIgX3NuYXBzaG90ID0ge1xuICAgICAgICBpc0RyYWdnaW5nT3ZlcjogaXNEcmFnZ2luZ092ZXJGb3JDb25zdW1lcixcbiAgICAgICAgZHJhZ2dpbmdPdmVyV2l0aDogaXNEcmFnZ2luZ092ZXJGb3JDb25zdW1lciA/IGRyYWdnYWJsZUlkIDogbnVsbCxcbiAgICAgICAgZHJhZ2dpbmdGcm9tVGhpc1dpdGg6IGRyYWdnYWJsZUlkLFxuICAgICAgICBpc1VzaW5nUGxhY2Vob2xkZXI6IHRydWVcbiAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwbGFjZWhvbGRlcjogZHJhZ2dpbmcucGxhY2Vob2xkZXIsXG4gICAgICAgIHNob3VsZEFuaW1hdGVQbGFjZWhvbGRlcjogZmFsc2UsXG4gICAgICAgIHNuYXBzaG90OiBfc25hcHNob3QsXG4gICAgICAgIHVzZUNsb25lOiB1c2VDbG9uZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoIWlzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuIGlkbGVXaXRob3V0QW5pbWF0aW9uO1xuICAgIH1cblxuICAgIGlmICghaXNEcmFnZ2luZ092ZXJGb3JJbXBhY3QpIHtcbiAgICAgIHJldHVybiBpZGxlV2l0aEFuaW1hdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgc25hcHNob3QgPSB7XG4gICAgICBpc0RyYWdnaW5nT3ZlcjogaXNEcmFnZ2luZ092ZXJGb3JDb25zdW1lcixcbiAgICAgIGRyYWdnaW5nT3ZlcldpdGg6IGRyYWdnYWJsZUlkLFxuICAgICAgZHJhZ2dpbmdGcm9tVGhpc1dpdGg6IG51bGwsXG4gICAgICBpc1VzaW5nUGxhY2Vob2xkZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICBwbGFjZWhvbGRlcjogZHJhZ2dpbmcucGxhY2Vob2xkZXIsXG4gICAgICBzaG91bGRBbmltYXRlUGxhY2Vob2xkZXI6IHRydWUsXG4gICAgICBzbmFwc2hvdDogc25hcHNob3QsXG4gICAgICB1c2VDbG9uZTogbnVsbFxuICAgIH07XG4gIH0pO1xuXG4gIHZhciBzZWxlY3RvciA9IGZ1bmN0aW9uIHNlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHZhciBpZCA9IG93blByb3BzLmRyb3BwYWJsZUlkO1xuICAgIHZhciB0eXBlID0gb3duUHJvcHMudHlwZTtcbiAgICB2YXIgaXNFbmFibGVkID0gIW93blByb3BzLmlzRHJvcERpc2FibGVkO1xuICAgIHZhciByZW5kZXJDbG9uZSA9IG93blByb3BzLnJlbmRlckNsb25lO1xuXG4gICAgaWYgKHN0YXRlLmlzRHJhZ2dpbmcpIHtcbiAgICAgIHZhciBjcml0aWNhbCA9IHN0YXRlLmNyaXRpY2FsO1xuXG4gICAgICBpZiAoIWlzTWF0Y2hpbmdUeXBlKHR5cGUsIGNyaXRpY2FsKSkge1xuICAgICAgICByZXR1cm4gaWRsZVdpdGhvdXRBbmltYXRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBkcmFnZ2luZyA9IGdldERyYWdnYWJsZShjcml0aWNhbCwgc3RhdGUuZGltZW5zaW9ucyk7XG4gICAgICB2YXIgaXNEcmFnZ2luZ092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlcihzdGF0ZS5pbXBhY3QpID09PSBpZDtcbiAgICAgIHJldHVybiBnZXRNYXBQcm9wcyhpZCwgaXNFbmFibGVkLCBpc0RyYWdnaW5nT3ZlciwgaXNEcmFnZ2luZ092ZXIsIGRyYWdnaW5nLCByZW5kZXJDbG9uZSk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLnBoYXNlID09PSAnRFJPUF9BTklNQVRJTkcnKSB7XG4gICAgICB2YXIgY29tcGxldGVkID0gc3RhdGUuY29tcGxldGVkO1xuXG4gICAgICBpZiAoIWlzTWF0Y2hpbmdUeXBlKHR5cGUsIGNvbXBsZXRlZC5jcml0aWNhbCkpIHtcbiAgICAgICAgcmV0dXJuIGlkbGVXaXRob3V0QW5pbWF0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2RyYWdnaW5nID0gZ2V0RHJhZ2dhYmxlKGNvbXBsZXRlZC5jcml0aWNhbCwgc3RhdGUuZGltZW5zaW9ucyk7XG5cbiAgICAgIHJldHVybiBnZXRNYXBQcm9wcyhpZCwgaXNFbmFibGVkLCB3aGF0SXNEcmFnZ2VkT3ZlckZyb21SZXN1bHQoY29tcGxldGVkLnJlc3VsdCkgPT09IGlkLCB3aGF0SXNEcmFnZ2VkT3Zlcihjb21wbGV0ZWQuaW1wYWN0KSA9PT0gaWQsIF9kcmFnZ2luZywgcmVuZGVyQ2xvbmUpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5waGFzZSA9PT0gJ0lETEUnICYmIHN0YXRlLmNvbXBsZXRlZCAmJiAhc3RhdGUuc2hvdWxkRmx1c2gpIHtcbiAgICAgIHZhciBfY29tcGxldGVkID0gc3RhdGUuY29tcGxldGVkO1xuXG4gICAgICBpZiAoIWlzTWF0Y2hpbmdUeXBlKHR5cGUsIF9jb21wbGV0ZWQuY3JpdGljYWwpKSB7XG4gICAgICAgIHJldHVybiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIHdhc092ZXIgPSB3aGF0SXNEcmFnZ2VkT3ZlcihfY29tcGxldGVkLmltcGFjdCkgPT09IGlkO1xuICAgICAgdmFyIHdhc0NvbWJpbmluZyA9IEJvb2xlYW4oX2NvbXBsZXRlZC5pbXBhY3QuYXQgJiYgX2NvbXBsZXRlZC5pbXBhY3QuYXQudHlwZSA9PT0gJ0NPTUJJTkUnKTtcbiAgICAgIHZhciBpc0hvbWUgPSBfY29tcGxldGVkLmNyaXRpY2FsLmRyb3BwYWJsZS5pZCA9PT0gaWQ7XG5cbiAgICAgIGlmICh3YXNPdmVyKSB7XG4gICAgICAgIHJldHVybiB3YXNDb21iaW5pbmcgPyBpZGxlV2l0aEFuaW1hdGlvbiA6IGlkbGVXaXRob3V0QW5pbWF0aW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNIb21lKSB7XG4gICAgICAgIHJldHVybiBpZGxlV2l0aEFuaW1hdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlkbGVXaXRob3V0QW5pbWF0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBpZGxlV2l0aG91dEFuaW1hdGlvbjtcbiAgfTtcblxuICByZXR1cm4gc2VsZWN0b3I7XG59O1xudmFyIG1hcERpc3BhdGNoVG9Qcm9wcyQxID0ge1xuICB1cGRhdGVWaWV3cG9ydE1heFNjcm9sbDogdXBkYXRlVmlld3BvcnRNYXhTY3JvbGxcbn07XG5cbmZ1bmN0aW9uIGdldEJvZHkoKSB7XG4gICFkb2N1bWVudC5ib2R5ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnZG9jdW1lbnQuYm9keSBpcyBub3QgcmVhZHknKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBkb2N1bWVudC5ib2R5O1xufVxuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBtb2RlOiAnc3RhbmRhcmQnLFxuICB0eXBlOiAnREVGQVVMVCcsXG4gIGRpcmVjdGlvbjogJ3ZlcnRpY2FsJyxcbiAgaXNEcm9wRGlzYWJsZWQ6IGZhbHNlLFxuICBpc0NvbWJpbmVFbmFibGVkOiBmYWxzZSxcbiAgaWdub3JlQ29udGFpbmVyQ2xpcHBpbmc6IGZhbHNlLFxuICByZW5kZXJDbG9uZTogbnVsbCxcbiAgZ2V0Q29udGFpbmVyRm9yQ2xvbmU6IGdldEJvZHlcbn07XG52YXIgQ29ubmVjdGVkRHJvcHBhYmxlID0gY29ubmVjdChtYWtlTWFwU3RhdGVUb1Byb3BzJDEsIG1hcERpc3BhdGNoVG9Qcm9wcyQxLCBudWxsLCB7XG4gIGNvbnRleHQ6IFN0b3JlQ29udGV4dCxcbiAgcHVyZTogdHJ1ZSxcbiAgYXJlU3RhdGVQcm9wc0VxdWFsOiBpc1N0cmljdEVxdWFsXG59KShEcm9wcGFibGUpO1xuQ29ubmVjdGVkRHJvcHBhYmxlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxuZXhwb3J0IHsgRHJhZ0Ryb3BDb250ZXh0LCBQdWJsaWNEcmFnZ2FibGUgYXMgRHJhZ2dhYmxlLCBDb25uZWN0ZWREcm9wcGFibGUgYXMgRHJvcHBhYmxlLCByZXNldFNlcnZlckNvbnRleHQsIHVzZUtleWJvYXJkU2Vuc29yLCB1c2VNb3VzZVNlbnNvciwgdXNlVG91Y2hTZW5zb3IgfTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlQ29udGV4dCIsIl9pbmhlcml0c0xvb3NlIiwiX2V4dGVuZHMiLCJjcmVhdGVTdG9yZSIsImNyZWF0ZVN0b3JlJDEiLCJhcHBseU1pZGRsZXdhcmUiLCJjb21wb3NlIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwiUHJvdmlkZXIiLCJjb25uZWN0IiwidXNlTWVtbyIsInVzZUNhbGxiYWNrIiwiZ2V0UmVjdCIsImV4cGFuZCIsIm9mZnNldCIsIndpdGhTY3JvbGwiLCJnZXRCb3giLCJjcmVhdGVCb3giLCJjYWxjdWxhdGVCb3giLCJtZW1vaXplT25lIiwicmFmU2NoZCIsIlJlYWN0RE9NIiwiaXNQcm9kdWN0aW9uIiwicHJvY2VzcyIsInNwYWNlc0FuZFRhYnMiLCJsaW5lU3RhcnRXaXRoU3BhY2VzIiwiY2xlYW4iLCJ2YWx1ZSIsInJlcGxhY2UiLCJ0cmltIiwiZ2V0RGV2TWVzc2FnZSIsIm1lc3NhZ2UiLCJnZXRGb3JtYXR0ZWRNZXNzYWdlIiwiaXNEaXNhYmxlZEZsYWciLCJsb2ciLCJ0eXBlIiwiX2NvbnNvbGUiLCJ3aW5kb3ciLCJjb25zb2xlIiwiYXBwbHkiLCJ3YXJuaW5nIiwiYmluZCIsImVycm9yIiwibm9vcCIsImdldE9wdGlvbnMiLCJzaGFyZWQiLCJmcm9tQmluZGluZyIsImJpbmRFdmVudHMiLCJlbCIsImJpbmRpbmdzIiwic2hhcmVkT3B0aW9ucyIsInVuYmluZGluZ3MiLCJtYXAiLCJiaW5kaW5nIiwib3B0aW9ucyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudE5hbWUiLCJmbiIsInVuYmluZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1bmJpbmRBbGwiLCJmb3JFYWNoIiwiaXNQcm9kdWN0aW9uJDEiLCJwcmVmaXgiLCJSYmRJbnZhcmlhbnQiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImludmFyaWFudCIsImNvbmRpdGlvbiIsIkVycm9yQm91bmRhcnkiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3RoaXMiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNhbGwiLCJjb25jYXQiLCJjYWxsYmFja3MiLCJvbldpbmRvd0Vycm9yIiwiZXZlbnQiLCJnZXRDYWxsYmFja3MiLCJpc0RyYWdnaW5nIiwidHJ5QWJvcnQiLCJlcnIiLCJwcmV2ZW50RGVmYXVsdCIsIkVycm9yIiwic2V0Q2FsbGJhY2tzIiwiX3Byb3RvIiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnREaWRDYXRjaCIsInNldFN0YXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwiQ29tcG9uZW50IiwiZHJhZ0hhbmRsZVVzYWdlSW5zdHJ1Y3Rpb25zIiwicG9zaXRpb24iLCJpbmRleCIsIm9uRHJhZ1N0YXJ0Iiwic3RhcnQiLCJzb3VyY2UiLCJ3aXRoTG9jYXRpb24iLCJkZXN0aW5hdGlvbiIsImlzSW5Ib21lTGlzdCIsImRyb3BwYWJsZUlkIiwic3RhcnRQb3NpdGlvbiIsImVuZFBvc2l0aW9uIiwid2l0aENvbWJpbmUiLCJpZCIsImNvbWJpbmUiLCJpbkhvbWVMaXN0IiwiZHJhZ2dhYmxlSWQiLCJvbkRyYWdVcGRhdGUiLCJ1cGRhdGUiLCJsb2NhdGlvbiIsInJldHVybmVkVG9TdGFydCIsIm9uRHJhZ0VuZCIsInJlc3VsdCIsInJlYXNvbiIsInByZXNldCIsIm9yaWdpbiIsIngiLCJ5IiwiYWRkIiwicG9pbnQxIiwicG9pbnQyIiwic3VidHJhY3QiLCJpc0VxdWFsIiwibmVnYXRlIiwicG9pbnQiLCJwYXRjaCIsImxpbmUiLCJvdGhlclZhbHVlIiwiX3JlZiIsImRpc3RhbmNlIiwiTWF0aCIsInNxcnQiLCJwb3ciLCJjbG9zZXN0IiwidGFyZ2V0IiwicG9pbnRzIiwibWluIiwiZXhlY3V0ZUNsaXAiLCJmcmFtZSIsInN1YmplY3QiLCJ0b3AiLCJtYXgiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ3aWR0aCIsImhlaWdodCIsIm9mZnNldEJ5UG9zaXRpb24iLCJzcGFjaW5nIiwiZ2V0Q29ybmVycyIsIm5vU3BhY2luZyIsInNjcm9sbCIsImRpZmYiLCJkaXNwbGFjZW1lbnQiLCJpbmNyZWFzZSIsImF4aXMiLCJ3aXRoUGxhY2Vob2xkZXIiLCJpbmNyZWFzZWRCeSIsIl9leHRlbmRzMiIsImVuZCIsImNsaXAiLCJzaG91bGRDbGlwU3ViamVjdCIsInBhZ2VNYXJnaW5Cb3giLCJnZXRTdWJqZWN0IiwicGFnZSIsInNjcm9sbGVkIiwibWFyZ2luQm94IiwiaW5jcmVhc2VkIiwiY2xpcHBlZCIsImFjdGl2ZSIsInNjcm9sbERyb3BwYWJsZSIsImRyb3BwYWJsZSIsIm5ld1Njcm9sbCIsInNjcm9sbGFibGUiLCJzY3JvbGxEaWZmIiwiaW5pdGlhbCIsInNjcm9sbERpc3BsYWNlbWVudCIsImN1cnJlbnQiLCJpc0ludGVnZXIiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImZsb29yIiwidmFsdWVzIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsImZpbmRJbmRleCIsImxpc3QiLCJwcmVkaWNhdGUiLCJpIiwiZmluZCIsInVuZGVmaW5lZCIsInRvQXJyYXkiLCJzbGljZSIsInRvRHJvcHBhYmxlTWFwIiwiZHJvcHBhYmxlcyIsInJlZHVjZSIsInByZXZpb3VzIiwiZGVzY3JpcHRvciIsInRvRHJhZ2dhYmxlTWFwIiwiZHJhZ2dhYmxlcyIsInRvRHJvcHBhYmxlTGlzdCIsInRvRHJhZ2dhYmxlTGlzdCIsImdldERyYWdnYWJsZXNJbnNpZGVEcm9wcGFibGUiLCJmaWx0ZXIiLCJkcmFnZ2FibGUiLCJzb3J0IiwiYSIsImIiLCJ0cnlHZXREZXN0aW5hdGlvbiIsImltcGFjdCIsImF0IiwidHJ5R2V0Q29tYmluZSIsInJlbW92ZURyYWdnYWJsZUZyb21MaXN0IiwicmVtb3ZlIiwiaXRlbSIsIm1vdmVUb05leHRDb21iaW5lIiwiaXNNb3ZpbmdGb3J3YXJkIiwiaW5zaWRlRGVzdGluYXRpb24iLCJwcmV2aW91c0ltcGFjdCIsImlzQ29tYmluZUVuYWJsZWQiLCJnZXRJbXBhY3QiLCJhbGwiLCJkaXNwbGFjZWQiLCJjbG9zZXN0SWQiLCJ3aXRob3V0RHJhZ2dhYmxlIiwibGFzdCIsImluZGV4T2ZDbG9zZXN0IiwiZCIsInByb3Bvc2VkSW5kZXgiLCJiZWZvcmUiLCJpc0hvbWVPZiIsIm5vRGlzcGxhY2VkQnkiLCJlbXB0eUdyb3VwcyIsImludmlzaWJsZSIsInZpc2libGUiLCJub0ltcGFjdCIsImRpc3BsYWNlZEJ5IiwiaXNXaXRoaW4iLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImlzUGFydGlhbGx5VmlzaWJsZVRocm91Z2hGcmFtZSIsImlzV2l0aGluVmVydGljYWwiLCJpc1dpdGhpbkhvcml6b250YWwiLCJpc0NvbnRhaW5lZCIsImlzUGFydGlhbGx5VmlzaWJsZVZlcnRpY2FsbHkiLCJpc1BhcnRpYWxseVZpc2libGVIb3Jpem9udGFsbHkiLCJpc1BhcnRpYWxseUNvbnRhaW5lZCIsImlzQmlnZ2VyVmVydGljYWxseSIsImlzQmlnZ2VySG9yaXpvbnRhbGx5IiwiaXNUYXJnZXRCaWdnZXJUaGFuRnJhbWUiLCJpc1RhcmdldEJpZ2dlck9uT25lQXhpcyIsImlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWUiLCJ2ZXJ0aWNhbCIsImRpcmVjdGlvbiIsImNyb3NzQXhpc0xpbmUiLCJzaXplIiwiY3Jvc3NBeGlzU3RhcnQiLCJjcm9zc0F4aXNFbmQiLCJjcm9zc0F4aXNTaXplIiwiaG9yaXpvbnRhbCIsImlzVG90YWxseVZpc2libGVUaHJvdWdoRnJhbWVPbkF4aXMiLCJnZXREcm9wcGFibGVEaXNwbGFjZWQiLCJpc1Zpc2libGVJbkRyb3BwYWJsZSIsImlzVmlzaWJsZVRocm91Z2hGcmFtZUZuIiwiaXNWaXNpYmxlSW5WaWV3cG9ydCIsInZpZXdwb3J0IiwiaXNWaXNpYmxlIiwidG9CZURpc3BsYWNlZCIsIndpdGhEcm9wcGFibGVEaXNwbGFjZW1lbnQiLCJkaXNwbGFjZWRUYXJnZXQiLCJpc1BhcnRpYWxseVZpc2libGUiLCJpc1RvdGFsbHlWaXNpYmxlIiwiaXNUb3RhbGx5VmlzaWJsZU9uQXhpcyIsImdldFNob3VsZEFuaW1hdGUiLCJmb3JjZVNob3VsZEFuaW1hdGUiLCJzaG91bGRBbmltYXRlIiwiZ2V0VGFyZ2V0IiwiZXhwYW5kQnkiLCJnZXREaXNwbGFjZW1lbnRHcm91cHMiLCJhZnRlckRyYWdnaW5nIiwiZ3JvdXBzIiwicHVzaCIsImdldEluZGV4T2ZMYXN0SXRlbSIsImluZGV4T2ZMYXN0SXRlbSIsImdvQXRFbmQiLCJuZXdJbmRleCIsImNhbGN1bGF0ZVJlb3JkZXJJbXBhY3QiLCJfcmVmMiIsIm1hdGNoIiwid2l0aG91dERyYWdnaW5nIiwic2xpY2VGcm9tIiwiaW5kZXhPZiIsImltcGFjdGVkIiwiZGlkU3RhcnRBZnRlckNyaXRpY2FsIiwiYWZ0ZXJDcml0aWNhbCIsIkJvb2xlYW4iLCJlZmZlY3RlZCIsImZyb21Db21iaW5lIiwiY29tYmluZUlkIiwiY29tYmluZVdpdGgiLCJjb21iaW5lV2l0aEluZGV4IiwiZGlkQ29tYmluZVdpdGhTdGFydEFmdGVyQ3JpdGljYWwiLCJmcm9tUmVvcmRlciIsImN1cnJlbnRJbmRleCIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJtb3ZlVG9OZXh0SW5kZXgiLCJ3YXNBdCIsIl9uZXdJbmRleCIsImdldENvbWJpbmVkSXRlbURpc3BsYWNlbWVudCIsImlzRGlzcGxhY2VkIiwid2hlbkNvbWJpbmluZyIsImNlbnRlciIsImJvcmRlckJveCIsImRpc3BsYWNlQnkiLCJkaXN0YW5jZUZyb21TdGFydFRvQm9yZGVyQm94Q2VudGVyIiwiYm94IiwibWFyZ2luIiwiZGlzdGFuY2VGcm9tRW5kVG9Cb3JkZXJCb3hDZW50ZXIiLCJnZXRDcm9zc0F4aXNCb3JkZXJCb3hDZW50ZXIiLCJpc01vdmluZyIsImdvQWZ0ZXIiLCJtb3ZlUmVsYXRpdmVUbyIsImdvQmVmb3JlIiwiZ29JbnRvU3RhcnQiLCJfcmVmMyIsIm1vdmVJbnRvIiwiY29udGVudEJveCIsIndoZW5SZW9yZGVyaW5nIiwiZHJhZ2dhYmxlUGFnZSIsImNsb3Nlc3RBZnRlciIsIndpdGhEaXNwbGFjZW1lbnQiLCJnZXRSZXN1bHRXaXRob3V0RHJvcHBhYmxlRGlzcGxhY2VtZW50Iiwib3JpZ2luYWwiLCJnZXRQYWdlQm9yZGVyQm94Q2VudGVyRnJvbUltcGFjdCIsIndpdGhvdXREaXNwbGFjZW1lbnQiLCJzY3JvbGxWaWV3cG9ydCIsInVwZGF0ZWQiLCJnZXREcmFnZ2FibGVzIiwiaWRzIiwidHJ5R2V0VmlzaWJsZSIsInNwZWN1bGF0aXZlbHlJbmNyZWFzZSIsIm1heFNjcm9sbENoYW5nZSIsInNjcm9sbGVkVmlld3BvcnQiLCJzY3JvbGxlZERyb3BwYWJsZSIsIndpdGhWaWV3cG9ydFNjcm9sbCIsIndpdGhEcm9wcGFibGVTY3JvbGwiLCJuZXdJbXBhY3QiLCJ3aXRoVmlld3BvcnREaXNwbGFjZW1lbnQiLCJnZXRDbGllbnRGcm9tUGFnZUJvcmRlckJveENlbnRlciIsInBhZ2VCb3JkZXJCb3hDZW50ZXIiLCJ3aXRob3V0UGFnZVNjcm9sbENoYW5nZSIsImNsaWVudCIsImlzVG90YWxseVZpc2libGVJbk5ld0xvY2F0aW9uIiwibmV3UGFnZUJvcmRlckJveENlbnRlciIsIl9yZWYkb25seU9uTWFpbkF4aXMiLCJvbmx5T25NYWluQXhpcyIsImNoYW5nZU5lZWRlZCIsInNoaWZ0ZWQiLCJtb3ZlVG9OZXh0UGxhY2UiLCJwcmV2aW91c1BhZ2VCb3JkZXJCb3hDZW50ZXIiLCJwcmV2aW91c0NsaWVudFNlbGVjdGlvbiIsImlzRW5hYmxlZCIsImlzVmlzaWJsZUluTmV3TG9jYXRpb24iLCJjbGllbnRTZWxlY3Rpb24iLCJzY3JvbGxKdW1wUmVxdWVzdCIsImNhdXRpb3VzIiwiZ2V0S25vd25BY3RpdmUiLCJyZWN0IiwiZ2V0QmVzdENyb3NzQXhpc0Ryb3BwYWJsZSIsImlzQmV0d2VlblNvdXJjZUNsaXBwZWQiLCJjYW5kaWRhdGVzIiwiYWN0aXZlT2ZUYXJnZXQiLCJpc0JldHdlZW5EZXN0aW5hdGlvbkNsaXBwZWQiLCJmaXJzdCIsInNlY29uZCIsImFycmF5IiwiY29udGFpbnMiLCJpc1dpdGhpbkRyb3BwYWJsZSIsImdldEN1cnJlbnRQYWdlQm9yZGVyQm94Q2VudGVyIiwiZ2V0Q3VycmVudFBhZ2VCb3JkZXJCb3giLCJnZXRDbG9zZXN0RHJhZ2dhYmxlIiwic29ydGVkIiwiZGlzdGFuY2VUb0EiLCJkaXN0YW5jZVRvQiIsImdldERpc3BsYWNlZEJ5IiwiZ2V0UmVxdWlyZWRHcm93dGhGb3JQbGFjZWhvbGRlciIsInBsYWNlaG9sZGVyU2l6ZSIsIm1vZGUiLCJhdmFpbGFibGVTcGFjZSIsImluc2lkZURyb3BwYWJsZSIsInNwYWNlVXNlZCIsInN1bSIsImRpbWVuc2lvbiIsInJlcXVpcmVkU3BhY2UiLCJuZWVkc1RvR3Jvd0J5Iiwid2l0aE1heFNjcm9sbCIsImFkZFBsYWNlaG9sZGVyIiwicmVxdWlyZWRHcm93dGgiLCJhZGRlZCIsIm9sZEZyYW1lTWF4U2Nyb2xsIiwiX3N1YmplY3QiLCJtYXhTY3JvbGwiLCJuZXdGcmFtZSIsInJlbW92ZVBsYWNlaG9sZGVyIiwiX3N1YmplY3QyIiwib2xkTWF4U2Nyb2xsIiwibW92ZVRvTmV3RHJvcHBhYmxlIiwicHJvcG9zZWQiLCJwcm9wb3NlZFBhZ2VCb3JkZXJCb3hDZW50ZXIiLCJpc0dvaW5nQmVmb3JlVGFyZ2V0IiwicmVsYXRpdmVUbyIsIm1vdmVDcm9zc0F4aXMiLCJpc092ZXIiLCJ3aGF0SXNEcmFnZ2VkT3ZlciIsImdldERyb3BwYWJsZU92ZXIiLCJtb3ZlSW5EaXJlY3Rpb24iLCJzdGF0ZSIsImlzQWN0dWFsbHlPdmVyIiwiZGltZW5zaW9ucyIsImlzTWFpbkF4aXNNb3ZlbWVudEFsbG93ZWQiLCJob21lIiwiY3JpdGljYWwiLCJpc01vdmluZ09uTWFpbkF4aXMiLCJib3JkZXJCb3hDZW50ZXIiLCJfc3RhdGUkZGltZW5zaW9ucyIsInNlbGVjdGlvbiIsImlzTW92ZW1lbnRBbGxvd2VkIiwicGhhc2UiLCJpc1Bvc2l0aW9uSW5GcmFtZSIsInJ1biIsImdldEhhc092ZXJsYXAiLCJnZXRGdXJ0aGVzdEF3YXkiLCJwYWdlQm9yZGVyQm94Iiwic3RhcnRDZW50ZXIiLCJjYW5kaWRhdGUiLCJnZXREcm9wcGFibGVPdmVyJDEiLCJjaGlsZENlbnRlciIsImlzU3RhcnRDb250YWluZWQiLCJpc0VuZENvbnRhaW5lZCIsIm9mZnNldFJlY3RCeVBvc2l0aW9uIiwiYXJlYSIsImdldElzRGlzcGxhY2VkIiwiYXRJbmRleCIsImdldFJlb3JkZXJJbXBhY3QiLCJ0YXJnZXRSZWN0IiwicGFnZUJvcmRlckJveFdpdGhEcm9wcGFibGVTY3JvbGwiLCJ0YXJnZXRTdGFydCIsInRhcmdldEVuZCIsImNoaWxkIiwiZGlkU3RhcnRBZnRlckNyaXRpY2FsJDEiLCJjb21iaW5lVGhyZXNob2xkRGl2aXNvciIsImdldENvbWJpbmVJbXBhY3QiLCJjaGlsZFJlY3QiLCJjaGlsZFNpemUiLCJ0aHJlc2hvbGQiLCJnZXREcmFnSW1wYWN0IiwicGFnZU9mZnNldCIsImRlc3RpbmF0aW9uSWQiLCJwYXRjaERyb3BwYWJsZU1hcCIsImNsZWFyVW51c2VkUGxhY2Vob2xkZXIiLCJub3ciLCJsYXN0RHJvcHBhYmxlIiwicmVjb21wdXRlUGxhY2Vob2xkZXJzIiwiY2xlYW5lZCIsInBhdGNoZWQiLCJmb3JjZWRDbGllbnRTZWxlY3Rpb24iLCJmb3JjZWREaW1lbnNpb25zIiwiZm9yY2VkVmlld3BvcnQiLCJmb3JjZWRJbXBhY3QiLCJ3aXRoVXBkYXRlZFBsYWNlaG9sZGVycyIsImdldERyYWdnYWJsZXMkMSIsInJlY29tcHV0ZSIsImdldENsaWVudEJvcmRlckJveENlbnRlciIsInJlZnJlc2hTbmFwIiwibW92ZW1lbnRNb2RlIiwibmVlZHNWaXNpYmlsaXR5Q2hlY2siLCJnZXRIb21lTG9jYXRpb24iLCJnZXRMaWZ0RWZmZWN0IiwiaW5zaWRlSG9tZSIsInJhd0luZGV4IiwiaW5WaXJ0dWFsTGlzdCIsInBhdGNoRGltZW5zaW9uTWFwIiwiZmluaXNoIiwib2Zmc2V0RHJhZ2dhYmxlIiwib2Zmc2V0JDEiLCJpbml0aWFsV2luZG93U2Nyb2xsIiwibW92ZWQiLCJwbGFjZWhvbGRlciIsImdldEZyYW1lIiwiYWRqdXN0QWRkaXRpb25zRm9yU2Nyb2xsQ2hhbmdlcyIsImFkZGl0aW9ucyIsInVwZGF0ZWREcm9wcGFibGVzIiwid2luZG93U2Nyb2xsQ2hhbmdlIiwibW9kaWZpZWQiLCJkcm9wcGFibGVTY3JvbGxDaGFuZ2UiLCJ0b3RhbENoYW5nZSIsInB1Ymxpc2hXaGlsZURyYWdnaW5nSW5WaXJ0dWFsIiwicHVibGlzaGVkIiwid2l0aFNjcm9sbENoYW5nZSIsImV4aXN0aW5nIiwidXBkYXRlZEFkZGl0aW9ucyIsInJlbW92YWxzIiwid2FzT3ZlcklkIiwid2FzT3ZlciIsIl9nZXRMaWZ0RWZmZWN0Iiwib25MaWZ0SW1wYWN0IiwiZHJhZ2dpbmdTdGF0ZSIsImRyb3BQZW5kaW5nIiwiaXNXYWl0aW5nIiwiaXNTbmFwcGluZyIsInBvc3REcm9wcGFibGVDaGFuZ2UiLCJpc0VuYWJsZWRDaGFuZ2luZyIsInJlbW92ZVNjcm9sbEp1bXBSZXF1ZXN0IiwiaWRsZSIsImNvbXBsZXRlZCIsInNob3VsZEZsdXNoIiwicmVkdWNlciIsImFjdGlvbiIsIl9hY3Rpb24kcGF5bG9hZCIsInBheWxvYWQiLCJpc1dpbmRvd1Njcm9sbEFsbG93ZWQiLCJldmVyeSIsImlzRml4ZWRPblBhZ2UiLCJfcmVzdWx0IiwiX2NsaWVudFNlbGVjdGlvbiIsIl9hY3Rpb24kcGF5bG9hZDIiLCJfYWN0aW9uJHBheWxvYWQzIiwiX2lkIiwiX3RhcmdldCIsIlN0cmluZyIsIl9hY3Rpb24kcGF5bG9hZDQiLCJfaWQyIiwiX3RhcmdldDIiLCJfdXBkYXRlZCIsIl9uZXdTY3JvbGwiLCJfdmlld3BvcnQiLCJfcmVzdWx0MiIsIm5ld1N0YXRlIiwiX2FjdGlvbiRwYXlsb2FkNSIsImRyb3BEdXJhdGlvbiIsIm5ld0hvbWVDbGllbnRPZmZzZXQiLCJfcmVzdWx0MyIsIl9jb21wbGV0ZWQiLCJiZWZvcmVJbml0aWFsQ2FwdHVyZSIsImxpZnQiLCJpbml0aWFsUHVibGlzaCIsInB1Ymxpc2hXaGlsZURyYWdnaW5nIiwiY29sbGVjdGlvblN0YXJ0aW5nIiwidXBkYXRlRHJvcHBhYmxlU2Nyb2xsIiwidXBkYXRlRHJvcHBhYmxlSXNFbmFibGVkIiwidXBkYXRlRHJvcHBhYmxlSXNDb21iaW5lRW5hYmxlZCIsIm1vdmUiLCJtb3ZlQnlXaW5kb3dTY3JvbGwiLCJ1cGRhdGVWaWV3cG9ydE1heFNjcm9sbCIsIm1vdmVVcCIsIm1vdmVEb3duIiwibW92ZVJpZ2h0IiwibW92ZUxlZnQiLCJmbHVzaCIsImFuaW1hdGVEcm9wIiwiY29tcGxldGVEcm9wIiwiZHJvcCIsImRyb3BBbmltYXRpb25GaW5pc2hlZCIsImNoZWNrSW5kZXhlcyIsImluZGV4ZXMiLCJlcnJvcnMiLCJmb3JtYXR0ZWQiLCJoYXNFcnJvciIsImpvaW4iLCJ2YWxpZGF0ZURpbWVuc2lvbnMiLCJsaWZ0JDEiLCJtYXJzaGFsIiwiZ2V0U3RhdGUiLCJkaXNwYXRjaCIsIm5leHQiLCJzY3JvbGxPcHRpb25zIiwic2hvdWxkUHVibGlzaEltbWVkaWF0ZWx5IiwicmVxdWVzdCIsIl9tYXJzaGFsJHN0YXJ0UHVibGlzaCIsInN0YXJ0UHVibGlzaGluZyIsInN0eWxlIiwiZHJhZ2dpbmciLCJkcm9wcGluZyIsInJlc3RpbmciLCJjdXJ2ZXMiLCJvdXRPZlRoZVdheSIsIm9wYWNpdHkiLCJjb21iaW5pbmciLCJzY2FsZSIsInRpbWluZ3MiLCJtaW5Ecm9wVGltZSIsIm1heERyb3BUaW1lIiwib3V0T2ZUaGVXYXlUaW1pbmciLCJ0cmFuc2l0aW9ucyIsImZsdWlkIiwic25hcCIsImR1cmF0aW9uIiwidGltaW5nIiwibW92ZVRvIiwidHJhbnNmb3JtcyIsImlzQ29tYmluaW5nIiwidHJhbnNsYXRlIiwiZHJvcFRpbWVSYW5nZSIsIm1heERyb3BUaW1lQXREaXN0YW5jZSIsImNhbmNlbERyb3BNb2RpZmllciIsImdldERyb3BEdXJhdGlvbiIsImRpc3RhbmNlJDEiLCJwZXJjZW50YWdlIiwid2l0aER1cmF0aW9uIiwidG9GaXhlZCIsImdldE5ld0hvbWVDbGllbnRPZmZzZXQiLCJuZXdDbGllbnRDZW50ZXIiLCJnZXREcm9wSW1wYWN0IiwibGFzdEltcGFjdCIsInJlY29tcHV0ZWRIb21lSW1wYWN0IiwiZGlkRHJvcEluc2lkZURyb3BwYWJsZSIsIndpdGhvdXRNb3ZlbWVudCIsImRyb3AkMSIsImlzV2FpdGluZ0ZvckRyb3AiLCJfZ2V0RHJvcEltcGFjdCIsImlzQW5pbWF0aW9uUmVxdWlyZWQiLCJnZXRXaW5kb3dTY3JvbGwiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiZ2V0V2luZG93U2Nyb2xsQmluZGluZyIsInBhc3NpdmUiLCJjYXB0dXJlIiwiZG9jdW1lbnQiLCJnZXRTY3JvbGxMaXN0ZW5lciIsIm9uV2luZG93U2Nyb2xsIiwidXBkYXRlU2Nyb2xsIiwic2NoZWR1bGVkIiwiaXNBY3RpdmUiLCJzdG9wIiwiY2FuY2VsIiwic2hvdWxkRW5kIiwic2Nyb2xsTGlzdGVuZXIiLCJzdG9yZSIsImxpc3RlbmVyIiwiZ2V0RXhwaXJpbmdBbm5vdW5jZSIsImFubm91bmNlIiwid2FzQ2FsbGVkIiwiaXNFeHBpcmVkIiwidGltZW91dElkIiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImdldEFzeW5jTWFyc2hhbCIsImVudHJpZXMiLCJleGVjdXRlIiwidGltZXJJZCIsIl9lbnRyaWVzJHNwbGljZSIsInNwbGljZSIsImVudHJ5IiwiY2FsbGJhY2siLCJzaGFsbG93IiwiYXJlTG9jYXRpb25zRXF1YWwiLCJpc0NvbWJpbmVFcXVhbCIsImlzQ3JpdGljYWxFcXVhbCIsImlzRHJhZ2dhYmxlRXF1YWwiLCJpc0Ryb3BwYWJsZUVxdWFsIiwid2l0aFRpbWluZ3MiLCJnZXREcmFnU3RhcnQiLCJyZXNwb25kZXIiLCJkYXRhIiwiZ2V0RGVmYXVsdE1lc3NhZ2UiLCJ3aWxsRXhwaXJlIiwicHJvdmlkZWQiLCJnZXRQdWJsaXNoZXIiLCJnZXRSZXNwb25kZXJzIiwiYXN5bmNNYXJzaGFsIiwiYmVmb3JlQ2FwdHVyZSIsIm9uQmVmb3JlQ2FwdHVyZSIsImJlZm9yZVN0YXJ0Iiwib25CZWZvcmVEcmFnU3RhcnQiLCJsYXN0Q3JpdGljYWwiLCJsYXN0TG9jYXRpb24iLCJsYXN0Q29tYmluZSIsImhhc0NyaXRpY2FsQ2hhbmdlZCIsImhhc0xvY2F0aW9uQ2hhbmdlZCIsImhhc0dyb3VwaW5nQ2hhbmdlZCIsImFib3J0IiwicmVzcG9uZGVycyIsInB1Ymxpc2hlciIsImRyb3BBbmltYXRpb25GaW5pc2giLCJkcm9wQW5pbWF0aW9uRmx1c2hPblNjcm9sbCIsImZyYW1lSWQiLCJjbGVhciIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwib25jZSIsImZsdXNoRHJvcEFuaW1hdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRpbWVuc2lvbk1hcnNoYWxTdG9wcGVyIiwic3RvcFB1Ymxpc2hpbmciLCJmb2N1cyIsImlzV2F0Y2hpbmciLCJ0cnlSZWNvcmRGb2N1cyIsInRyeVJlc3RvcmVGb2N1c1JlY29yZGVkIiwidHJ5U2hpZnRSZWNvcmQiLCJzaG91bGRTdG9wIiwiYXV0b1Njcm9sbCIsImF1dG9TY3JvbGxlciIsInBlbmRpbmdEcm9wIiwicG9zdEFjdGlvblN0YXRlIiwiY29tcG9zZUVuaGFuY2VycyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIm5hbWUiLCJkaW1lbnNpb25NYXJzaGFsIiwiZm9jdXNNYXJzaGFsIiwic3R5bGVNYXJzaGFsIiwiY2xlYW4kMSIsImNyZWF0ZVB1Ymxpc2hlciIsInJlZ2lzdHJ5Iiwic3RhZ2luZyIsImNvbGxlY3QiLCJfc3RhZ2luZyIsImdldEJ5SWQiLCJnZXREaW1lbnNpb24iLCJnZXRTY3JvbGxXaGlsZURyYWdnaW5nIiwicHVibGlzaCIsImdldE1heFNjcm9sbCIsInNjcm9sbEhlaWdodCIsInNjcm9sbFdpZHRoIiwiYWRqdXN0ZWRNYXhTY3JvbGwiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJkb2MiLCJkb2N1bWVudEVsZW1lbnQiLCJnZXRNYXhXaW5kb3dTY3JvbGwiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldFZpZXdwb3J0IiwiZ2V0SW5pdGlhbFB1Ymxpc2giLCJ3aW5kb3dTY3JvbGwiLCJnZXRBbGxCeVR5cGUiLCJnZXREaW1lbnNpb25BbmRXYXRjaFNjcm9sbCIsInNob3VsZFB1Ymxpc2hVcGRhdGUiLCJjcmVhdGVEaW1lbnNpb25NYXJzaGFsIiwiY29sbGVjdGlvbiIsImV4aXN0cyIsImNoYW5nZSIsImRyYWdTdG9wcGVkIiwidW5zdWJzY3JpYmUiLCJzdWJzY3JpYmVyIiwic3Vic2NyaWJlIiwiY2FuU3RhcnREcmFnIiwic2Nyb2xsV2luZG93Iiwic2Nyb2xsQnkiLCJnZXRTY3JvbGxhYmxlRHJvcHBhYmxlcyIsImdldFNjcm9sbGFibGVEcm9wcGFibGVPdmVyIiwibWF5YmUiLCJnZXRCZXN0U2Nyb2xsYWJsZURyb3BwYWJsZSIsIl9kaW1lbnNpb24iLCJjb25maWciLCJzdGFydEZyb21QZXJjZW50YWdlIiwibWF4U2Nyb2xsQXRQZXJjZW50YWdlIiwibWF4UGl4ZWxTY3JvbGwiLCJlYXNlIiwiZHVyYXRpb25EYW1wZW5pbmciLCJzdG9wRGFtcGVuaW5nQXQiLCJhY2NlbGVyYXRlQXQiLCJnZXREaXN0YW5jZVRocmVzaG9sZHMiLCJjb250YWluZXIiLCJzdGFydFNjcm9sbGluZ0Zyb20iLCJtYXhTY3JvbGxWYWx1ZUF0IiwidGhyZXNob2xkcyIsImdldFBlcmNlbnRhZ2UiLCJzdGFydE9mUmFuZ2UiLCJlbmRPZlJhbmdlIiwicmFuZ2UiLCJjdXJyZW50SW5SYW5nZSIsIm1pblNjcm9sbCIsImdldFZhbHVlRnJvbURpc3RhbmNlIiwiZGlzdGFuY2VUb0VkZ2UiLCJwZXJjZW50YWdlRnJvbU1heFNjcm9sbFZhbHVlQXQiLCJwZXJjZW50YWdlRnJvbVN0YXJ0U2Nyb2xsaW5nRnJvbSIsImNlaWwiLCJzdG9wQXQiLCJkYW1wZW5WYWx1ZUJ5VGltZSIsInByb3Bvc2VkU2Nyb2xsIiwiZHJhZ1N0YXJ0VGltZSIsIkRhdGUiLCJydW5UaW1lIiwiYmV0d2VlbkFjY2VsZXJhdGVBdEFuZFN0b3BBdFBlcmNlbnRhZ2UiLCJnZXRWYWx1ZSIsInNob3VsZFVzZVRpbWVEYW1wZW5pbmciLCJnZXRTY3JvbGxPbkF4aXMiLCJkaXN0YW5jZVRvRWRnZXMiLCJpc0Nsb3NlclRvRW5kIiwiYWRqdXN0Rm9yU2l6ZUxpbWl0cyIsImlzVG9vQmlnVmVydGljYWxseSIsImlzVG9vQmlnSG9yaXpvbnRhbGx5IiwiY2xlYW4kMiIsImdldFNjcm9sbCIsInJlcXVpcmVkIiwibGltaXRlZCIsInNtYWxsZXN0U2lnbmVkIiwiZ2V0T3ZlcmxhcCIsImdldFJlbWFpbmRlciIsInRhcmdldFNjcm9sbCIsIm92ZXJsYXAiLCJjYW5QYXJ0aWFsbHlTY3JvbGwiLCJyYXdNYXgiLCJzbWFsbGVzdENoYW5nZSIsImNhblNjcm9sbFdpbmRvdyIsImdldFdpbmRvd092ZXJsYXAiLCJjYW5TY3JvbGxEcm9wcGFibGUiLCJnZXREcm9wcGFibGVPdmVybGFwIiwiZ2V0V2luZG93U2Nyb2xsQ2hhbmdlIiwiZ2V0RHJvcHBhYmxlU2Nyb2xsQ2hhbmdlIiwic2Nyb2xsJDEiLCJfY2hhbmdlIiwiY3JlYXRlRmx1aWRTY3JvbGxlciIsInNjaGVkdWxlV2luZG93U2Nyb2xsIiwic2NoZWR1bGVEcm9wcGFibGVTY3JvbGwiLCJ0cnlTY3JvbGwiLCJfZHJhZ2dpbmciLCJzdGFydCQxIiwid2FzU2Nyb2xsTmVlZGVkIiwiZmFrZVNjcm9sbENhbGxiYWNrIiwiY3JlYXRlSnVtcFNjcm9sbGVyIiwibW92ZUJ5T2Zmc2V0Iiwic2Nyb2xsRHJvcHBhYmxlQXNNdWNoQXNJdENhbiIsIndoYXRUaGVEcm9wcGFibGVDYW5TY3JvbGwiLCJyZW1haW5kZXIiLCJzY3JvbGxXaW5kb3dBc011Y2hBc0l0Q2FuIiwid2hhdFRoZVdpbmRvd0NhblNjcm9sbCIsImp1bXBTY3JvbGxlciIsImRyb3BwYWJsZVJlbWFpbmRlciIsIndpbmRvd1JlbWFpbmRlciIsImNyZWF0ZUF1dG9TY3JvbGxlciIsImZsdWlkU2Nyb2xsZXIiLCJqdW1wU2Nyb2xsIiwic2Nyb2xsZXIiLCJwcmVmaXgkMSIsImRyYWdIYW5kbGUiLCJiYXNlIiwiY29udGV4dElkIiwic2Nyb2xsQ29udGFpbmVyIiwibWFrZUdldFNlbGVjdG9yIiwiY29udGV4dCIsImF0dHJpYnV0ZSIsImdldFN0eWxlcyIsInJ1bGVzIiwicHJvcGVydHkiLCJydWxlIiwic3R5bGVzIiwic2VsZWN0b3IiLCJub1BvaW50ZXJFdmVudHMiLCJnZXRTdHlsZXMkMSIsImdldFNlbGVjdG9yIiwiZHJhZ0hhbmRsZSQxIiwiZ3JhYkN1cnNvciIsImFsd2F5cyIsImRyb3BBbmltYXRpbmciLCJkcmFnZ2FibGUkMSIsInRyYW5zaXRpb24iLCJ1c2VyQ2FuY2VsIiwiZHJvcHBhYmxlJDEiLCJib2R5IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRIZWFkIiwiaGVhZCIsInF1ZXJ5U2VsZWN0b3IiLCJjcmVhdGVTdHlsZUVsIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJ1c2VTdHlsZU1hcnNoYWwiLCJhbHdheXNSZWYiLCJkeW5hbWljUmVmIiwic2V0RHluYW1pY1N0eWxlIiwidGV4dENvbnRlbnQiLCJzZXRBbHdheXNTdHlsZSIsImR5bmFtaWMiLCJhcHBlbmRDaGlsZCIsInJlZiIsInJlbW92ZUNoaWxkIiwiZ2V0V2luZG93RnJvbUVsIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiaXNIdG1sRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiZmluZERyYWdIYW5kbGUiLCJwb3NzaWJsZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJoYW5kbGUiLCJnZXRBdHRyaWJ1dGUiLCJ1c2VGb2N1c01hcnNoYWwiLCJlbnRyaWVzUmVmIiwicmVjb3JkUmVmIiwicmVzdG9yZUZvY3VzRnJhbWVSZWYiLCJpc01vdW50ZWRSZWYiLCJyZWdpc3RlciIsInVucmVnaXN0ZXIiLCJ0cnlHaXZlRm9jdXMiLCJ0cnlHaXZlRm9jdXNUbyIsImFjdGl2ZUVsZW1lbnQiLCJyZWRpcmVjdFRvIiwicmVjb3JkIiwiZm9jdXNlZCIsImNsZWFyRnJhbWVPblVubW91bnQiLCJjcmVhdGVSZWdpc3RyeSIsInN1YnNjcmliZXJzIiwiY2IiLCJub3RpZnkiLCJmaW5kRHJhZ2dhYmxlQnlJZCIsImdldERyYWdnYWJsZUJ5SWQiLCJkcmFnZ2FibGVBUEkiLCJ1bmlxdWVJZCIsImZpbmRCeUlkIiwiZmluZERyb3BwYWJsZUJ5SWQiLCJnZXREcm9wcGFibGVCeUlkIiwiZHJvcHBhYmxlQVBJIiwidXNlUmVnaXN0cnkiLCJ1bm1vdW50IiwiU3RvcmVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImdldEJvZHlFbGVtZW50IiwidmlzdWFsbHlIaWRkZW4iLCJib3JkZXIiLCJwYWRkaW5nIiwib3ZlcmZsb3ciLCJnZXRJZCIsInVzZUFubm91bmNlciIsInNldHVwIiwiY2xlYW51cCIsImNvdW50IiwiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJyZXNldCIsInVzZVVuaXF1ZUlkIiwiZ2V0RWxlbWVudElkIiwidXNlSGlkZGVuVGV4dEVsZW1lbnQiLCJ0ZXh0IiwibW91bnQiLCJkaXNwbGF5IiwiQXBwQ29udGV4dCIsInBlZXJEZXBlbmRlbmNpZXMiLCJyZWFjdCIsInNlbXZlciIsImdldFZlcnNpb24iLCJleGVjIiwibWFqb3IiLCJtaW5vciIsInJhdyIsImlzU2F0aXNmaWVkIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJjaGVja1JlYWN0VmVyc2lvbiIsInBlZXJEZXBWYWx1ZSIsImFjdHVhbFZhbHVlIiwicGVlckRlcCIsInN1ZmZpeCIsImNoZWNrRG9jdHlwZSIsImRvY3R5cGUiLCJ0b0xvd2VyQ2FzZSIsInB1YmxpY0lkIiwidXNlRGV2IiwidXNlSG9vayIsInVzZURldlNldHVwV2FybmluZyIsImlucHV0cyIsImUiLCJ1c2VTdGFydHVwVmFsaWRhdGlvbiIsInZlcnNpb24iLCJ1c2VQcmV2aW91cyIsImNyZWF0ZSIsImxvY2siLCJpc0NsYWltZWQiLCJjbGFpbSIsImFiYW5kb24iLCJuZXdMb2NrIiwicmVsZWFzZSIsInRyeUFiYW5kb24iLCJ0YWIiLCJlbnRlciIsImVzY2FwZSIsInNwYWNlIiwicGFnZVVwIiwicGFnZURvd24iLCJhcnJvd0xlZnQiLCJhcnJvd1VwIiwiYXJyb3dSaWdodCIsImFycm93RG93biIsIl9wcmV2ZW50ZWRLZXlzIiwicHJldmVudGVkS2V5cyIsInByZXZlbnRTdGFuZGFyZEtleUV2ZW50cyIsImtleUNvZGUiLCJzdXBwb3J0ZWRFdmVudE5hbWUiLCJzdXBwb3J0ZWQiLCJwcmltYXJ5QnV0dG9uIiwic2xvcHB5Q2xpY2tUaHJlc2hvbGQiLCJpc1Nsb3BweUNsaWNrVGhyZXNob2xkRXhjZWVkZWQiLCJhYnMiLCJpZGxlJDEiLCJnZXRDYXB0dXJlQmluZGluZ3MiLCJnZXRQaGFzZSIsInNldFBoYXNlIiwiYnV0dG9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJhY3Rpb25zIiwicGVuZGluZyIsImZsdWlkTGlmdCIsInNob3VsZEJsb2NrTmV4dENsaWNrIiwic2hvdWxkUmVzcGVjdEZvcmNlUHJlc3MiLCJ1c2VNb3VzZVNlbnNvciIsImFwaSIsInBoYXNlUmVmIiwidW5iaW5kRXZlbnRzUmVmIiwic3RhcnRDYXB0dXJlQmluZGluZyIsIm9uTW91c2VEb3duIiwiZGVmYXVsdFByZXZlbnRlZCIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJmaW5kQ2xvc2VzdERyYWdnYWJsZUlkIiwidHJ5R2V0TG9jayIsInNvdXJjZUV2ZW50Iiwic3RhcnRQZW5kaW5nRHJhZyIsInByZXZlbnRGb3JjZVByZXNzQmluZGluZyIsImZpbmRPcHRpb25zRm9yRHJhZ2dhYmxlIiwiY2FuR2V0TG9jayIsImxpc3RlbkZvckNhcHR1cmUiLCJiaW5kQ2FwdHVyaW5nRXZlbnRzIiwiX3Njcm9sbEp1bXBLZXlzIiwibm9vcCQxIiwic2Nyb2xsSnVtcEtleXMiLCJnZXREcmFnZ2luZ0JpbmRpbmdzIiwidXNlS2V5Ym9hcmRTZW5zb3IiLCJvbktleURvd24iLCJwcmVEcmFnIiwiaXNDYXB0dXJpbmciLCJzbmFwTGlmdCIsInRyeVN0YXJ0Q2FwdHVyZSIsImlkbGUkMiIsInRpbWVGb3JMb25nUHJlc3MiLCJmb3JjZVByZXNzVGhyZXNob2xkIiwiZ2V0V2luZG93QmluZGluZ3MiLCJnZXRIYW5kbGVCaW5kaW5ncyIsImhhc01vdmVkIiwiX2V2ZW50JHRvdWNoZXMkIiwidG91Y2hlcyIsInRvdWNoIiwiaXNGb3JjZVByZXNzIiwiZm9yY2UiLCJzaG91bGRSZXNwZWN0IiwidXNlVG91Y2hTZW5zb3IiLCJvblRvdWNoU3RhcnQiLCJsb25nUHJlc3NUaW1lcklkIiwidW5iaW5kVGFyZ2V0IiwidW5iaW5kV2luZG93Iiwic3RhcnREcmFnZ2luZyIsIndlYmtpdEhhY2siLCJ1c2VWYWxpZGF0ZVNlbnNvckhvb2tzIiwic2Vuc29ySG9va3MiLCJwcmV2aW91c1JlZiIsImludGVyYWN0aXZlVGFnTmFtZXMiLCJpbnB1dCIsInRleHRhcmVhIiwic2VsZWN0Iiwib3B0aW9uIiwib3B0Z3JvdXAiLCJ2aWRlbyIsImF1ZGlvIiwiaXNBbkludGVyYWN0aXZlRWxlbWVudCIsInBhcmVudCIsImhhc0FuSW50ZXJhY3RpdmVUYWciLCJ0YWdOYW1lIiwicGFyZW50RWxlbWVudCIsImlzRXZlbnRJbkludGVyYWN0aXZlRWxlbWVudCIsImdldEJvcmRlckJveENlbnRlclBvc2l0aW9uIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiaXNFbGVtZW50IiwiRWxlbWVudCIsInN1cHBvcnRlZE1hdGNoZXNOYW1lIiwiY2xvc2VzdFBvbnlmaWxsIiwiY2xvc2VzdCQxIiwiZmluZENsb3Nlc3REcmFnSGFuZGxlRnJvbUV2ZW50IiwidHJ5R2V0Q2xvc2VzdERyYWdnYWJsZUlkRnJvbUV2ZW50IiwiZmluZERyYWdnYWJsZSIsIl9pc0FjdGl2ZSIsImlzTG9ja0FjdGl2ZSIsInNob3VsZFdhcm4iLCJjYW5TdGFydCIsImxvY2tBUEkiLCJ0cnlTdGFydCIsImZvcmNlU2Vuc29yU3RvcCIsInNob3VsZFN0YXJ0IiwiY2FuRHJhZ0ludGVyYWN0aXZlRWxlbWVudHMiLCJnZXRTaG91bGRSZXNwZWN0Rm9yY2VQcmVzcyIsInRyeURpc3BhdGNoIiwiZ2V0QWN0aW9uIiwidHJ5RGlzcGF0Y2hXaGVuRHJhZ2dpbmciLCJsaWZ0QWN0aW9uQXJncyIsIm1vdmUkMSIsIm1vdmVVcCQxIiwibW92ZVJpZ2h0JDEiLCJtb3ZlRG93biQxIiwibW92ZUxlZnQkMSIsImFib3J0UHJlRHJhZyIsInNob3VsZFJlbGVhc2UiLCJkZWZhdWx0U2Vuc29ycyIsInVzZVNlbnNvck1hcnNoYWwiLCJfcmVmNCIsImN1c3RvbVNlbnNvcnMiLCJlbmFibGVEZWZhdWx0U2Vuc29ycyIsInVzZVNlbnNvcnMiLCJ0cnlBYmFuZG9uTG9jayIsImxpc3RlblRvU3RvcmUiLCJmb3JjZVN0b3AiLCJ0cnlSZWxlYXNlTG9jayIsImlzTG9ja0NsYWltZWQiLCJjcmVhdGVSZXNwb25kZXJzIiwiZ2V0U3RvcmUiLCJsYXp5UmVmIiwiQXBwIiwic2Vuc29ycyIsImxhenlTdG9yZVJlZiIsImxhc3RQcm9wc1JlZiIsImRyYWdIYW5kbGVVc2FnZUluc3RydWN0aW9uc0lkIiwibGF6eURpc3BhdGNoIiwibWFyc2hhbENhbGxiYWNrcyIsInRyeVJlc2V0U3RvcmUiLCJhcHBDYWxsYmFja3MiLCJnZXRDYW5MaWZ0IiwiZ2V0SXNNb3ZlbWVudEFsbG93ZWQiLCJhcHBDb250ZXh0IiwiY2FuTGlmdCIsImNvdW50JDEiLCJyZXNldCQxIiwidXNlSW5zdGFuY2VDb3VudCIsInJlc2V0U2VydmVyQ29udGV4dCIsIkRyYWdEcm9wQ29udGV4dCIsImlzRXF1YWwkMSIsImlzU2Nyb2xsIiwiaXNBdXRvIiwiaXNWaXNpYmxlJDEiLCJpc0VpdGhlciIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImlzQm90aCIsImlzRWxlbWVudFNjcm9sbGFibGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiaXNCb2R5U2Nyb2xsYWJsZSIsImh0bWwiLCJodG1sU3R5bGUiLCJodG1sT3ZlcmZsb3ciLCJnZXRDbG9zZXN0U2Nyb2xsYWJsZSIsImNoZWNrRm9yTmVzdGVkU2Nyb2xsQ29udGFpbmVycyIsImFub3RoZXJTY3JvbGxQYXJlbnQiLCJnZXRTY3JvbGwkMSIsInNjcm9sbExlZnQiLCJzY3JvbGxUb3AiLCJnZXRJc0ZpeGVkIiwiZ2V0RW52IiwiY2xvc2VzdFNjcm9sbGFibGUiLCJnZXREcm9wcGFibGVEaW1lbnNpb24iLCJzY3JvbGxTaXplIiwiZnJhbWVDbGllbnQiLCJwYWRkaW5nQm94IiwiZ2V0Q2xpZW50IiwidGFyZ2V0UmVmIiwiZW52IiwiaXNEcm9wRGlzYWJsZWQiLCJpbW1lZGlhdGUiLCJkZWxheWVkIiwiZ2V0TGlzdGVuZXJPcHRpb25zIiwidXNlUmVxdWlyZWRDb250ZXh0IiwiQ29udGV4dCIsImdldENsb3Nlc3RTY3JvbGxhYmxlRnJvbURyYWciLCJ1c2VEcm9wcGFibGVQdWJsaXNoZXIiLCJ3aGlsZURyYWdnaW5nUmVmIiwicHVibGlzaGVkRGVzY3JpcHRvclJlZiIsIm1lbW9pemVkVXBkYXRlU2Nyb2xsIiwiZ2V0Q2xvc2VzdFNjcm9sbCIsInNjaGVkdWxlU2Nyb2xsVXBkYXRlIiwib25DbG9zZXN0U2Nyb2xsIiwiZ2V0RHJvcHBhYmxlUmVmIiwiaWdub3JlQ29udGFpbmVyQ2xpcHBpbmciLCJyZW1vdmVBdHRyaWJ1dGUiLCJub29wJDIiLCJlbXB0eSIsImdldFNpemUiLCJpc0FuaW1hdGluZ09wZW5Pbk1vdW50IiwiYW5pbWF0ZSIsImdldFN0eWxlIiwiYm94U2l6aW5nIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwiZmxleFNocmluayIsImZsZXhHcm93IiwicG9pbnRlckV2ZW50cyIsIlBsYWNlaG9sZGVyIiwiYW5pbWF0ZU9wZW5UaW1lclJlZiIsInRyeUNsZWFyQW5pbWF0ZU9wZW5UaW1lciIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uQ2xvc2UiLCJfdXNlU3RhdGUiLCJzZXRJc0FuaW1hdGluZ09wZW5Pbk1vdW50Iiwib25TaXplQ2hhbmdlRW5kIiwicHJvcGVydHlOYW1lIiwiaW5uZXJSZWYiLCJQbGFjZWhvbGRlciQxIiwibWVtbyIsIkRyb3BwYWJsZUNvbnRleHQiLCJjaGVja0lzVmFsaWRJbm5lclJlZiIsImlzQm9vbGVhbiIsInJ1bkNoZWNrcyIsImNoZWNrcyIsImNoZWNrIiwiX2Jvb2xlYW4iLCJzdGFuZGFyZCIsImdldFBsYWNlaG9sZGVyUmVmIiwidmlydHVhbCIsImhhc0Nsb25lIiwiX3JlZjUiLCJyZW5kZXJDbG9uZSIsImhhc05vUGxhY2Vob2xkZXIiLCJfcmVmNiIsInVzZVZhbGlkYXRpb24iLCJBbmltYXRlSW5PdXQiLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsIm9uIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiUHVyZUNvbXBvbmVudCIsInpJbmRleE9wdGlvbnMiLCJnZXREcmFnZ2luZ1RyYW5zaXRpb24iLCJzaG91bGRBbmltYXRlRHJhZ01vdmVtZW50IiwiZ2V0RHJhZ2dpbmdPcGFjaXR5IiwiaXNEcm9wQW5pbWF0aW5nIiwiZ2V0U2hvdWxkRHJhZ2dpbmdBbmltYXRlIiwiZ2V0RHJhZ2dpbmdTdHlsZSIsInRyYW5zZm9ybSIsInpJbmRleCIsImdldFNlY29uZGFyeVN0eWxlIiwic2Vjb25kYXJ5Iiwic2hvdWxkQW5pbWF0ZURpc3BsYWNlbWVudCIsImdldFN0eWxlJDEiLCJtYXBwZWQiLCJnZXREaW1lbnNpb24kMSIsImNvbXB1dGVkU3R5bGVzIiwidXNlRHJhZ2dhYmxlUHVibGlzaGVyIiwiZ2V0RHJhZ2dhYmxlUmVmIiwicHVibGlzaGVkUmVmIiwiaXNGaXJzdFB1Ymxpc2hSZWYiLCJ1c2VWYWxpZGF0aW9uJDEiLCJnZXRSZWYiLCJ1c2VDbG9uZVByb3BWYWxpZGF0aW9uIiwiaXNDbG9uZSIsImluaXRpYWxSZWYiLCJwcmV2ZW50SHRtbDVEbmQiLCJEcmFnZ2FibGUiLCJzZXRSZWYiLCJfdXNlUmVxdWlyZWRDb250ZXh0IiwiX3VzZVJlcXVpcmVkQ29udGV4dDIiLCJkcm9wQW5pbWF0aW9uRmluaXNoZWRBY3Rpb24iLCJmb3JQdWJsaXNoZXIiLCJkcmFnSGFuZGxlUHJvcHMiLCJ0YWJJbmRleCIsInJvbGUiLCJvbk1vdmVFbmQiLCJkcmFnZ2FibGVQcm9wcyIsInJ1YnJpYyIsInNuYXBzaG90IiwiaXNTdHJpY3RFcXVhbCIsIndoYXRJc0RyYWdnZWRPdmVyRnJvbVJlc3VsdCIsImdldENvbWJpbmVXaXRoRnJvbVJlc3VsdCIsImdldENvbWJpbmVXaXRoRnJvbUltcGFjdCIsImdldERyYWdnYWJsZVNlbGVjdG9yIiwibWVtb2l6ZWRPZmZzZXQiLCJnZXRNZW1vaXplZFNuYXBzaG90IiwiZHJhZ2dpbmdPdmVyIiwiZHJvcEFuaW1hdGlvbiIsImNvbWJpbmVUYXJnZXRGb3IiLCJnZXRNZW1vaXplZFByb3BzIiwib3duUHJvcHMiLCJfZHJhZ2dpbmdPdmVyIiwiX2NvbWJpbmVXaXRoIiwiY3VydmUiLCJnZXRTZWNvbmRhcnlTbmFwc2hvdCIsImF0UmVzdCIsImdldFNlY29uZGFyeVNlbGVjdG9yIiwiZ2V0RmFsbGJhY2siLCJnZXRQcm9wcyIsIm93bklkIiwiZHJhZ2dpbmdJZCIsInZpc3VhbERpc3BsYWNlbWVudCIsImlzQWZ0ZXJDcml0aWNhbEluVmlydHVhbExpc3QiLCJfb2Zmc2V0IiwibWFrZU1hcFN0YXRlVG9Qcm9wcyIsImRyYWdnaW5nU2VsZWN0b3IiLCJzZWNvbmRhcnlTZWxlY3RvciIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIkNvbm5lY3RlZERyYWdnYWJsZSIsInB1cmUiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJQcml2YXRlRHJhZ2dhYmxlIiwiZHJvcHBhYmxlQ29udGV4dCIsImlzVXNpbmdDbG9uZUZvciIsIlB1YmxpY0RyYWdnYWJsZSIsImlzRHJhZ0Rpc2FibGVkIiwiZGlzYWJsZUludGVyYWN0aXZlRWxlbWVudEJsb2NraW5nIiwiRHJvcHBhYmxlIiwiZHJvcHBhYmxlUmVmIiwicGxhY2Vob2xkZXJSZWYiLCJ1c2VDbG9uZSIsImdldENvbnRhaW5lckZvckNsb25lIiwic2V0RHJvcHBhYmxlUmVmIiwic2V0UGxhY2Vob2xkZXJSZWYiLCJvblBsYWNlaG9sZGVyVHJhbnNpdGlvbkVuZCIsInNob3VsZEFuaW1hdGVQbGFjZWhvbGRlciIsImRyb3BwYWJsZVByb3BzIiwiZ2V0Q2xvbmUiLCJub2RlIiwiZHJhZ2dhYmxlUHJvdmlkZWQiLCJkcmFnZ2FibGVTbmFwc2hvdCIsImNyZWF0ZVBvcnRhbCIsImlzTWF0Y2hpbmdUeXBlIiwiZ2V0RHJhZ2dhYmxlIiwibWFrZU1hcFN0YXRlVG9Qcm9wcyQxIiwiaWRsZVdpdGhBbmltYXRpb24iLCJpc0RyYWdnaW5nT3ZlciIsImRyYWdnaW5nT3ZlcldpdGgiLCJkcmFnZ2luZ0Zyb21UaGlzV2l0aCIsImlzVXNpbmdQbGFjZWhvbGRlciIsImlkbGVXaXRob3V0QW5pbWF0aW9uIiwiZ2V0RHJhZ2dhYmxlUnVicmljIiwiZ2V0TWFwUHJvcHMiLCJpc0RyYWdnaW5nT3ZlckZvckNvbnN1bWVyIiwiaXNEcmFnZ2luZ092ZXJGb3JJbXBhY3QiLCJpc0hvbWUiLCJfc25hcHNob3QiLCJ3YXNDb21iaW5pbmciLCJtYXBEaXNwYXRjaFRvUHJvcHMkMSIsImdldEJvZHkiLCJkZWZhdWx0UHJvcHMiLCJDb25uZWN0ZWREcm9wcGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/dist/react-beautiful-dnd.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactReduxContext: () => (/* binding */ ReactReduxContext),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nvar ReactReduxContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(null);\nif (true) {\n    ReactReduxContext.displayName = \"ReactRedux\";\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ReactReduxContext);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEI7QUFDbkIsSUFBSUMsb0JBQW9CLFdBQVcsR0FBRUQsMERBQW1CLENBQUMsTUFBTTtBQUV0RSxJQUFJRyxJQUF5QixFQUFjO0lBQ3pDRixrQkFBa0JHLFdBQVcsR0FBRztBQUNsQztBQUVBLGlFQUFlSCxpQkFBaUJBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzP2RmNGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyJdLCJuYW1lcyI6WyJSZWFjdCIsIlJlYWN0UmVkdXhDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInByb2Nlc3MiLCJkaXNwbGF5TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Provider.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Provider.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Context */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js\");\n/* harmony import */ var _utils_Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Subscription */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/Subscription.js\");\n/* harmony import */ var _utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/useIsomorphicLayoutEffect */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js\");\n\n\n\n\n\nfunction Provider(_ref) {\n    var store = _ref.store, context = _ref.context, children = _ref.children;\n    var contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        var subscription = (0,_utils_Subscription__WEBPACK_IMPORTED_MODULE_2__.createSubscription)(store);\n        return {\n            store: store,\n            subscription: subscription\n        };\n    }, [\n        store\n    ]);\n    var previousState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return store.getState();\n    }, [\n        store\n    ]);\n    (0,_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(function() {\n        var subscription = contextValue.subscription;\n        subscription.onStateChange = subscription.notifyNestedSubs;\n        subscription.trySubscribe();\n        if (previousState !== store.getState()) {\n            subscription.notifyNestedSubs();\n        }\n        return function() {\n            subscription.tryUnsubscribe();\n            subscription.onStateChange = null;\n        };\n    }, [\n        contextValue,\n        previousState\n    ]);\n    var Context = context || _Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Context.Provider, {\n        value: contextValue\n    }, children);\n}\nif (true) {\n    Provider.propTypes = {\n        store: prop_types__WEBPACK_IMPORTED_MODULE_4___default().shape({\n            subscribe: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().func).isRequired,\n            dispatch: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().func).isRequired,\n            getState: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().func).isRequired\n        }),\n        context: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().object),\n        children: (prop_types__WEBPACK_IMPORTED_MODULE_4___default().any)\n    };\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Provider);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUF1QztBQUNKO0FBQ1c7QUFDYTtBQUNvQjtBQUUvRSxTQUFTTSxTQUFTQyxJQUFJO0lBQ3BCLElBQUlDLFFBQVFELEtBQUtDLEtBQUssRUFDbEJDLFVBQVVGLEtBQUtFLE9BQU8sRUFDdEJDLFdBQVdILEtBQUtHLFFBQVE7SUFDNUIsSUFBSUMsZUFBZVYsOENBQU9BLENBQUM7UUFDekIsSUFBSVcsZUFBZVIsdUVBQWtCQSxDQUFDSTtRQUN0QyxPQUFPO1lBQ0xBLE9BQU9BO1lBQ1BJLGNBQWNBO1FBQ2hCO0lBQ0YsR0FBRztRQUFDSjtLQUFNO0lBQ1YsSUFBSUssZ0JBQWdCWiw4Q0FBT0EsQ0FBQztRQUMxQixPQUFPTyxNQUFNTSxRQUFRO0lBQ3ZCLEdBQUc7UUFBQ047S0FBTTtJQUNWSCwyRkFBeUJBLENBQUM7UUFDeEIsSUFBSU8sZUFBZUQsYUFBYUMsWUFBWTtRQUM1Q0EsYUFBYUcsYUFBYSxHQUFHSCxhQUFhSSxnQkFBZ0I7UUFDMURKLGFBQWFLLFlBQVk7UUFFekIsSUFBSUosa0JBQWtCTCxNQUFNTSxRQUFRLElBQUk7WUFDdENGLGFBQWFJLGdCQUFnQjtRQUMvQjtRQUVBLE9BQU87WUFDTEosYUFBYU0sY0FBYztZQUMzQk4sYUFBYUcsYUFBYSxHQUFHO1FBQy9CO0lBQ0YsR0FBRztRQUFDSjtRQUFjRTtLQUFjO0lBQ2hDLElBQUlNLFVBQVVWLFdBQVdOLHVEQUFpQkE7SUFDMUMsT0FBTyxXQUFXLEdBQUVILDBEQUFtQixDQUFDbUIsUUFBUWIsUUFBUSxFQUFFO1FBQ3hEZSxPQUFPVjtJQUNULEdBQUdEO0FBQ0w7QUFFQSxJQUFJWSxJQUF5QixFQUFjO0lBQ3pDaEIsU0FBU2lCLFNBQVMsR0FBRztRQUNuQmYsT0FBT04sdURBQWUsQ0FBQztZQUNyQnVCLFdBQVd2Qix3REFBYyxDQUFDeUIsVUFBVTtZQUNwQ0MsVUFBVTFCLHdEQUFjLENBQUN5QixVQUFVO1lBQ25DYixVQUFVWix3REFBYyxDQUFDeUIsVUFBVTtRQUNyQztRQUNBbEIsU0FBU1AsMERBQWdCO1FBQ3pCUSxVQUFVUix1REFBYTtJQUN6QjtBQUNGO0FBRUEsaUVBQWVJLFFBQVFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcz9lZmM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZVN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSksXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VNZW1vIiwiUHJvcFR5cGVzIiwiUmVhY3RSZWR1eENvbnRleHQiLCJjcmVhdGVTdWJzY3JpcHRpb24iLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiUHJvdmlkZXIiLCJfcmVmIiwic3RvcmUiLCJjb250ZXh0IiwiY2hpbGRyZW4iLCJjb250ZXh0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJvblN0YXRlQ2hhbmdlIiwibm90aWZ5TmVzdGVkU3VicyIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwiQ29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZSIsInByb2Nlc3MiLCJwcm9wVHlwZXMiLCJzaGFwZSIsInN1YnNjcmliZSIsImZ1bmMiLCJpc1JlcXVpcmVkIiwiZGlzcGF0Y2giLCJvYmplY3QiLCJhbnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/connectAdvanced.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/connectAdvanced.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ connectAdvanced)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hoist-non-react-statics */ \"(ssr)/./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js\");\n/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-is */ \"(ssr)/./node_modules/react-is/index.js\");\n/* harmony import */ var _utils_Subscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Subscription */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/Subscription.js\");\n/* harmony import */ var _utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/useIsomorphicLayoutEffect */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js\");\n/* harmony import */ var _Context__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Context */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js\");\n\n\nvar _excluded = [\n    \"getDisplayName\",\n    \"methodName\",\n    \"renderCountProp\",\n    \"shouldHandleStateChanges\",\n    \"storeKey\",\n    \"withRef\",\n    \"forwardRef\",\n    \"context\"\n], _excluded2 = [\n    \"reactReduxForwardedRef\"\n];\n\n\n\n\n\n // Define some constant arrays just to avoid re-creating these\nvar EMPTY_ARRAY = [];\nvar NO_SUBSCRIPTION_ARRAY = [\n    null,\n    null\n];\nvar stringifyComponent = function stringifyComponent(Comp) {\n    try {\n        return JSON.stringify(Comp);\n    } catch (err) {\n        return String(Comp);\n    }\n};\nfunction storeStateUpdatesReducer(state, action) {\n    var updateCount = state[1];\n    return [\n        action.payload,\n        updateCount + 1\n    ];\n}\nfunction useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {\n    (0,_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_6__.useIsomorphicLayoutEffect)(function() {\n        return effectFunc.apply(void 0, effectArgs);\n    }, dependencies);\n}\nfunction captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {\n    // We want to capture the wrapper props and child props we used for later comparisons\n    lastWrapperProps.current = wrapperProps;\n    lastChildProps.current = actualChildProps;\n    renderIsScheduled.current = false; // If the render was from a store update, clear out that reference and cascade the subscriber update\n    if (childPropsFromStoreUpdate.current) {\n        childPropsFromStoreUpdate.current = null;\n        notifyNestedSubs();\n    }\n}\nfunction subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {\n    // If we're not subscribed to the store, nothing to do here\n    if (!shouldHandleStateChanges) return; // Capture values for checking if and when this component unmounts\n    var didUnsubscribe = false;\n    var lastThrownError = null; // We'll run this callback every time a store subscription update propagates to this component\n    var checkForUpdates = function checkForUpdates() {\n        if (didUnsubscribe) {\n            // Don't run stale listeners.\n            // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n            return;\n        }\n        var latestStoreState = store.getState();\n        var newChildProps, error;\n        try {\n            // Actually run the selector with the most recent store state and wrapper props\n            // to determine what the child props should be\n            newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);\n        } catch (e) {\n            error = e;\n            lastThrownError = e;\n        }\n        if (!error) {\n            lastThrownError = null;\n        } // If the child props haven't changed, nothing to do here - cascade the subscription update\n        if (newChildProps === lastChildProps.current) {\n            if (!renderIsScheduled.current) {\n                notifyNestedSubs();\n            }\n        } else {\n            // Save references to the new child props.  Note that we track the \"child props from store update\"\n            // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n            // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n            // forcing another re-render, which we don't want.\n            lastChildProps.current = newChildProps;\n            childPropsFromStoreUpdate.current = newChildProps;\n            renderIsScheduled.current = true; // If the child props _did_ change (or we caught an error), this wrapper component needs to re-render\n            forceComponentUpdateDispatch({\n                type: \"STORE_UPDATED\",\n                payload: {\n                    error: error\n                }\n            });\n        }\n    }; // Actually subscribe to the nearest connected ancestor (or store)\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe(); // Pull data from the store after first render in case the store has\n    // changed since we began.\n    checkForUpdates();\n    var unsubscribeWrapper = function unsubscribeWrapper() {\n        didUnsubscribe = true;\n        subscription.tryUnsubscribe();\n        subscription.onStateChange = null;\n        if (lastThrownError) {\n            // It's possible that we caught an error due to a bad mapState function, but the\n            // parent re-rendered without this component and we're about to unmount.\n            // This shouldn't happen as long as we do top-down subscriptions correctly, but\n            // if we ever do those wrong, this throw will surface the error in our tests.\n            // In that case, throw the error from here so it doesn't get lost.\n            throw lastThrownError;\n        }\n    };\n    return unsubscribeWrapper;\n}\nvar initStateUpdates = function initStateUpdates() {\n    return [\n        null,\n        0\n    ];\n};\nfunction connectAdvanced(/*\r\n  selectorFactory is a func that is responsible for returning the selector function used to\r\n  compute new props from state, props, and dispatch. For example:\r\n      export default connectAdvanced((dispatch, options) => (state, props) => ({\r\n      thing: state.things[props.thingId],\r\n      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),\r\n    }))(YourComponent)\r\n    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators\r\n  outside of their selector as an optimization. Options passed to connectAdvanced are passed to\r\n  the selectorFactory, along with displayName and WrappedComponent, as the second argument.\r\n    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound\r\n  props. Do not use connectAdvanced directly without memoizing results between calls to your\r\n  selector, otherwise the Connect component will re-render on every state or props change.\r\n*/ selectorFactory, _ref) {\n    if (_ref === void 0) {\n        _ref = {};\n    }\n    var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name) {\n        return \"ConnectAdvanced(\" + name + \")\";\n    } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? \"connectAdvanced\" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? \"store\" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? _Context__WEBPACK_IMPORTED_MODULE_7__.ReactReduxContext : _ref2$context, connectOptions = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref2, _excluded);\n    if (true) {\n        if (renderCountProp !== undefined) {\n            throw new Error(\"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension\");\n        }\n        if (withRef) {\n            throw new Error(\"withRef is removed. To access the wrapped instance, use a ref on the connected component\");\n        }\n        var customStoreWarningMessage = \"To use a custom Redux store for specific components, create a custom React context with \" + \"React.createContext(), and pass the context object to React Redux's Provider and specific components\" + \" like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. \" + \"You may also pass a {context : MyContext} option to connect\";\n        if (storeKey !== \"store\") {\n            throw new Error(\"storeKey has been removed and does not do anything. \" + customStoreWarningMessage);\n        }\n    }\n    var Context = context;\n    return function wrapWithConnect(WrappedComponent) {\n        if ( true && !(0,react_is__WEBPACK_IMPORTED_MODULE_4__.isValidElementType)(WrappedComponent)) {\n            throw new Error(\"You must pass a component to the function returned by \" + (methodName + \". Instead received \" + stringifyComponent(WrappedComponent)));\n        }\n        var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n        var displayName = getDisplayName(wrappedComponentName);\n        var selectorFactoryOptions = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, connectOptions, {\n            getDisplayName: getDisplayName,\n            methodName: methodName,\n            renderCountProp: renderCountProp,\n            shouldHandleStateChanges: shouldHandleStateChanges,\n            storeKey: storeKey,\n            displayName: displayName,\n            wrappedComponentName: wrappedComponentName,\n            WrappedComponent: WrappedComponent\n        });\n        var pure = connectOptions.pure;\n        function createChildSelector(store) {\n            return selectorFactory(store.dispatch, selectorFactoryOptions);\n        } // If we aren't running in \"pure\" mode, we don't want to memoize values.\n        // To avoid conditionally calling hooks, we fall back to a tiny wrapper\n        // that just executes the given callback immediately.\n        var usePureOnlyMemo = pure ? react__WEBPACK_IMPORTED_MODULE_3__.useMemo : function(callback) {\n            return callback();\n        };\n        function ConnectFunction(props) {\n            var _useMemo = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function() {\n                // Distinguish between actual \"data\" props that were passed to the wrapper component,\n                // and values needed to control behavior (forwarded refs, alternate context instances).\n                // To maintain the wrapperProps object reference, memoize this destructuring.\n                var reactReduxForwardedRef = props.reactReduxForwardedRef, wrapperProps = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(props, _excluded2);\n                return [\n                    props.context,\n                    reactReduxForwardedRef,\n                    wrapperProps\n                ];\n            }, [\n                props\n            ]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];\n            var ContextToUse = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function() {\n                // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n                // Memoize the check that determines which context instance we should use.\n                return propsContext && propsContext.Consumer && (0,react_is__WEBPACK_IMPORTED_MODULE_4__.isContextConsumer)(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(propsContext.Consumer, null)) ? propsContext : Context;\n            }, [\n                propsContext,\n                Context\n            ]); // Retrieve the store and ancestor subscription via context, if available\n            var contextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(ContextToUse); // The store _must_ exist as either a prop or in context.\n            // We'll check to see if it _looks_ like a Redux store first.\n            // This allows us to pass through a `store` prop that is just a plain value.\n            var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);\n            var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);\n            if ( true && !didStoreComeFromProps && !didStoreComeFromContext) {\n                throw new Error('Could not find \"store\" in the context of ' + ('\"' + displayName + '\". Either wrap the root component in a <Provider>, ') + \"or pass a custom React context provider to <Provider> and the corresponding \" + (\"React context consumer to \" + displayName + \" in connect options.\"));\n            } // Based on the previous check, one of these must be true\n            var store = didStoreComeFromProps ? props.store : contextValue.store;\n            var childPropsSelector = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function() {\n                // The child props selector needs the store reference as an input.\n                // Re-create this selector whenever the store changes.\n                return createChildSelector(store);\n            }, [\n                store\n            ]);\n            var _useMemo2 = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function() {\n                if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY; // This Subscription's source should match where store came from: props vs. context. A component\n                // connected to the store via props shouldn't use subscription from context, or vice versa.\n                // This Subscription's source should match where store came from: props vs. context. A component\n                // connected to the store via props shouldn't use subscription from context, or vice versa.\n                var subscription = (0,_utils_Subscription__WEBPACK_IMPORTED_MODULE_5__.createSubscription)(store, didStoreComeFromProps ? null : contextValue.subscription); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n                // the middle of the notification loop, where `subscription` will then be null. This can\n                // probably be avoided if Subscription's listeners logic is changed to not call listeners\n                // that have been unsubscribed in the  middle of the notification loop.\n                // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n                // the middle of the notification loop, where `subscription` will then be null. This can\n                // probably be avoided if Subscription's listeners logic is changed to not call listeners\n                // that have been unsubscribed in the  middle of the notification loop.\n                var notifyNestedSubs = subscription.notifyNestedSubs.bind(subscription);\n                return [\n                    subscription,\n                    notifyNestedSubs\n                ];\n            }, [\n                store,\n                didStoreComeFromProps,\n                contextValue\n            ]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1]; // Determine what {store, subscription} value should be put into nested context, if necessary,\n            // and memoize that value to avoid unnecessary context updates.\n            var overriddenContextValue = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function() {\n                if (didStoreComeFromProps) {\n                    // This component is directly subscribed to a store from props.\n                    // We don't want descendants reading from this store - pass down whatever\n                    // the existing context value is from the nearest connected ancestor.\n                    return contextValue;\n                } // Otherwise, put this component's subscription instance into context, so that\n                // connected descendants won't update until after this component is done\n                return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, contextValue, {\n                    subscription: subscription\n                });\n            }, [\n                didStoreComeFromProps,\n                contextValue,\n                subscription\n            ]); // We need to force this wrapper component to re-render whenever a Redux store update\n            // causes a change to the calculated child component props (or we caught an error in mapState)\n            var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_3__.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1]; // Propagate any mapState/mapDispatch errors upwards\n            if (previousStateUpdateResult && previousStateUpdateResult.error) {\n                throw previousStateUpdateResult.error;\n            } // Set up refs to coordinate values between the subscription effect and the render logic\n            var lastChildProps = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n            var lastWrapperProps = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(wrapperProps);\n            var childPropsFromStoreUpdate = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)();\n            var renderIsScheduled = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(false);\n            var actualChildProps = usePureOnlyMemo(function() {\n                // Tricky logic here:\n                // - This render may have been triggered by a Redux store update that produced new child props\n                // - However, we may have gotten new wrapper props after that\n                // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n                // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n                // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n                if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {\n                    return childPropsFromStoreUpdate.current;\n                } // TODO We're reading the store directly in render() here. Bad idea?\n                // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n                // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n                // to determine what the child props should be.\n                return childPropsSelector(store.getState(), wrapperProps);\n            }, [\n                store,\n                previousStateUpdateResult,\n                wrapperProps\n            ]); // We need this to execute synchronously every time we re-render. However, React warns\n            // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n            // just useEffect instead to avoid the warning, since neither will run anyway.\n            useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [\n                lastWrapperProps,\n                lastChildProps,\n                renderIsScheduled,\n                wrapperProps,\n                actualChildProps,\n                childPropsFromStoreUpdate,\n                notifyNestedSubs\n            ]); // Our re-subscribe logic only runs when the store/subscription setup changes\n            useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [\n                shouldHandleStateChanges,\n                store,\n                subscription,\n                childPropsSelector,\n                lastWrapperProps,\n                lastChildProps,\n                renderIsScheduled,\n                childPropsFromStoreUpdate,\n                notifyNestedSubs,\n                forceComponentUpdateDispatch\n            ], [\n                store,\n                subscription,\n                childPropsSelector\n            ]); // Now that all that's done, we can finally try to actually render the child component.\n            // We memoize the elements for the rendered child component as an optimization.\n            var renderedWrappedComponent = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function() {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(WrappedComponent, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, actualChildProps, {\n                    ref: reactReduxForwardedRef\n                }));\n            }, [\n                reactReduxForwardedRef,\n                WrappedComponent,\n                actualChildProps\n            ]); // If React sees the exact same element reference as last time, it bails out of re-rendering\n            // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n            var renderedChild = (0,react__WEBPACK_IMPORTED_MODULE_3__.useMemo)(function() {\n                if (shouldHandleStateChanges) {\n                    // If this component is subscribed to store updates, we need to pass its own\n                    // subscription instance down to our descendants. That means rendering the same\n                    // Context instance, and putting a different value into the context.\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(ContextToUse.Provider, {\n                        value: overriddenContextValue\n                    }, renderedWrappedComponent);\n                }\n                return renderedWrappedComponent;\n            }, [\n                ContextToUse,\n                renderedWrappedComponent,\n                overriddenContextValue\n            ]);\n            return renderedChild;\n        } // If we're in \"pure\" mode, ensure our wrapper component only re-renders when incoming props have changed.\n        var Connect = pure ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().memo(ConnectFunction) : ConnectFunction;\n        Connect.WrappedComponent = WrappedComponent;\n        Connect.displayName = ConnectFunction.displayName = displayName;\n        if (forwardRef) {\n            var forwarded = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().forwardRef(function forwardConnectRef(props, ref) {\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3___default().createElement(Connect, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n                    reactReduxForwardedRef: ref\n                }));\n            });\n            forwarded.displayName = displayName;\n            forwarded.WrappedComponent = WrappedComponent;\n            return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default()(forwarded, WrappedComponent);\n        }\n        return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_2___default()(Connect, WrappedComponent);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMEQ7QUFDMEM7QUFDcEcsSUFBSUUsWUFBWTtJQUFDO0lBQWtCO0lBQWM7SUFBbUI7SUFBNEI7SUFBWTtJQUFXO0lBQWM7Q0FBVSxFQUMzSUMsYUFBYTtJQUFDO0NBQXlCO0FBQ1E7QUFDb0I7QUFDTjtBQUNOO0FBQ29CO0FBQ2pDLENBQUMsOERBQThEO0FBRTdHLElBQUlZLGNBQWMsRUFBRTtBQUNwQixJQUFJQyx3QkFBd0I7SUFBQztJQUFNO0NBQUs7QUFFeEMsSUFBSUMscUJBQXFCLFNBQVNBLG1CQUFtQkMsSUFBSTtJQUN2RCxJQUFJO1FBQ0YsT0FBT0MsS0FBS0MsU0FBUyxDQUFDRjtJQUN4QixFQUFFLE9BQU9HLEtBQUs7UUFDWixPQUFPQyxPQUFPSjtJQUNoQjtBQUNGO0FBRUEsU0FBU0sseUJBQXlCQyxLQUFLLEVBQUVDLE1BQU07SUFDN0MsSUFBSUMsY0FBY0YsS0FBSyxDQUFDLEVBQUU7SUFDMUIsT0FBTztRQUFDQyxPQUFPRSxPQUFPO1FBQUVELGNBQWM7S0FBRTtBQUMxQztBQUVBLFNBQVNFLGtDQUFrQ0MsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLFlBQVk7SUFDN0VsQiwyRkFBeUJBLENBQUM7UUFDeEIsT0FBT2dCLFdBQVdHLEtBQUssQ0FBQyxLQUFLLEdBQUdGO0lBQ2xDLEdBQUdDO0FBQ0w7QUFFQSxTQUFTRSxvQkFBb0JDLGdCQUFnQixFQUFFQyxjQUFjLEVBQUVDLGlCQUFpQixFQUFFQyxZQUFZLEVBQUVDLGdCQUFnQixFQUFFQyx5QkFBeUIsRUFBRUMsZ0JBQWdCO0lBQzNKLHFGQUFxRjtJQUNyRk4saUJBQWlCTyxPQUFPLEdBQUdKO0lBQzNCRixlQUFlTSxPQUFPLEdBQUdIO0lBQ3pCRixrQkFBa0JLLE9BQU8s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QVcsR0FBR08sZ0JBQWdCUCxXQUFXLEdBQUdBO1FBRXBELElBQUlYLFlBQVk7WUFDZCxJQUFJMkMsMEJBQVl0SCx1REFBZ0IsQ0FBQyxTQUFTdUgsa0JBQWtCekIsS0FBSyxFQUFFa0IsR0FBRztnQkFDcEUsT0FBTyxXQUFXLEdBQUVoSCwwREFBbUIsQ0FBQ29ILFNBQVN6SCw4RUFBUUEsQ0FBQyxDQUFDLEdBQUdtRyxPQUFPO29CQUNuRUUsd0JBQXdCZ0I7Z0JBQzFCO1lBQ0Y7WUFDQU0sVUFBVWhDLFdBQVcsR0FBR0E7WUFDeEJnQyxVQUFVbEMsZ0JBQWdCLEdBQUdBO1lBQzdCLE9BQU9yRiw4REFBWUEsQ0FBQ3VILFdBQVdsQztRQUNqQztRQUVBLE9BQU9yRiw4REFBWUEsQ0FBQ3FILFNBQVNoQztJQUMvQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyc29uYWxpemVkLWNvbnRlbnQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzP2Q4ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSxcbiAgICBfZXhjbHVkZWQyID0gW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXTtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZ1bmMuYXBwbHkodm9pZCAwLCBlZmZlY3RBcmdzKTtcbiAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2gpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cclxuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcclxuICAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcclxuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcclxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxyXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXHJcbiAgICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcclxuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cclxuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxyXG4gICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcclxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcclxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXHJcbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgX2V4Y2x1ZGVkKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IHByb3BzLnJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgdmFyIHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW3JlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBDb25uZWN0RnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSJdLCJuYW1lcyI6WyJfZXh0ZW5kcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsImhvaXN0U3RhdGljcyIsIlJlYWN0IiwidXNlQ29udGV4dCIsInVzZU1lbW8iLCJ1c2VSZWYiLCJ1c2VSZWR1Y2VyIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJjcmVhdGVTdWJzY3JpcHRpb24iLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiUmVhY3RSZWR1eENvbnRleHQiLCJFTVBUWV9BUlJBWSIsIk5PX1NVQlNDUklQVElPTl9BUlJBWSIsInN0cmluZ2lmeUNvbXBvbmVudCIsIkNvbXAiLCJKU09OIiwic3RyaW5naWZ5IiwiZXJyIiwiU3RyaW5nIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJ1cGRhdGVDb3VudCIsInBheWxvYWQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MiLCJlZmZlY3RGdW5jIiwiZWZmZWN0QXJncyIsImRlcGVuZGVuY2llcyIsImFwcGx5IiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJub3RpZnlOZXN0ZWRTdWJzIiwiY3VycmVudCIsInN1YnNjcmliZVVwZGF0ZXMiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJzdG9yZSIsInN1YnNjcmlwdGlvbiIsImNoaWxkUHJvcHNTZWxlY3RvciIsImZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2giLCJkaWRVbnN1YnNjcmliZSIsImxhc3RUaHJvd25FcnJvciIsImNoZWNrRm9yVXBkYXRlcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJnZXRTdGF0ZSIsIm5ld0NoaWxkUHJvcHMiLCJlcnJvciIsImUiLCJ0eXBlIiwib25TdGF0ZUNoYW5nZSIsInRyeVN1YnNjcmliZSIsInVuc3Vic2NyaWJlV3JhcHBlciIsInRyeVVuc3Vic2NyaWJlIiwiaW5pdFN0YXRlVXBkYXRlcyIsImNvbm5lY3RBZHZhbmNlZCIsInNlbGVjdG9yRmFjdG9yeSIsIl9yZWYiLCJfcmVmMiIsIl9yZWYyJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJuYW1lIiwiX3JlZjIkbWV0aG9kTmFtZSIsIm1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJ1bmRlZmluZWQiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkd2l0aFJlZiIsIndpdGhSZWYiLCJfcmVmMiRmb3J3YXJkUmVmIiwiZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJwcm9jZXNzIiwiRXJyb3IiLCJjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlIiwiQ29udGV4dCIsIndyYXBXaXRoQ29ubmVjdCIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJjcmVhdGVDaGlsZFNlbGVjdG9yIiwiZGlzcGF0Y2giLCJ1c2VQdXJlT25seU1lbW8iLCJjYWxsYmFjayIsIkNvbm5lY3RGdW5jdGlvbiIsInByb3BzIiwiX3VzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiQ29uc3VtZXIiLCJjcmVhdGVFbGVtZW50IiwiY29udGV4dFZhbHVlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiQm9vbGVhbiIsImRpZFN0b3JlQ29tZUZyb21Db250ZXh0IiwiX3VzZU1lbW8yIiwiYmluZCIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsIl91c2VSZWR1Y2VyJCIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJyZWYiLCJyZW5kZXJlZENoaWxkIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIkNvbm5lY3QiLCJtZW1vIiwiZm9yd2FyZGVkIiwiZm9yd2FyZENvbm5lY3RSZWYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/connectAdvanced.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/connect.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/connect.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConnect: () => (/* binding */ createConnect),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/connectAdvanced */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/connectAdvanced.js\");\n/* harmony import */ var _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/shallowEqual */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/shallowEqual.js\");\n/* harmony import */ var _mapDispatchToProps__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapDispatchToProps */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mapDispatchToProps.js\");\n/* harmony import */ var _mapStateToProps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mapStateToProps */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mapStateToProps.js\");\n/* harmony import */ var _mergeProps__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mergeProps */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mergeProps.js\");\n/* harmony import */ var _selectorFactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./selectorFactory */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/selectorFactory.js\");\n\n\nvar _excluded = [\n    \"pure\",\n    \"areStatesEqual\",\n    \"areOwnPropsEqual\",\n    \"areStatePropsEqual\",\n    \"areMergedPropsEqual\"\n];\n\n\n\n\n\n\n/*\r\n  connect is a facade over connectAdvanced. It turns its args into a compatible\r\n  selectorFactory, which has the signature:\r\n\r\n    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps\r\n  \r\n  connect passes its args to connectAdvanced as options, which will in turn pass them to\r\n  selectorFactory each time a Connect component instance is instantiated or hot reloaded.\r\n\r\n  selectorFactory returns a final props selector from its mapStateToProps,\r\n  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,\r\n  mergePropsFactories, and pure args.\r\n\r\n  The resulting final props selector is called by the Connect component instance whenever\r\n  it receives new props or store state.\r\n */ function match(arg, factories, name) {\n    for(var i = factories.length - 1; i >= 0; i--){\n        var result = factories[i](arg);\n        if (result) return result;\n    }\n    return function(dispatch, options) {\n        throw new Error(\"Invalid value of type \" + typeof arg + \" for \" + name + \" argument when connecting component \" + options.wrappedComponentName + \".\");\n    };\n}\nfunction strictEqual(a, b) {\n    return a === b;\n} // createConnect with default args builds the 'official' connect behavior. Calling it with\n// different options opens up some testing and extensibility scenarios\nfunction createConnect(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_2__[\"default\"] : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps__WEBPACK_IMPORTED_MODULE_5__[\"default\"] : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps__WEBPACK_IMPORTED_MODULE_4__[\"default\"] : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps__WEBPACK_IMPORTED_MODULE_6__[\"default\"] : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory__WEBPACK_IMPORTED_MODULE_7__[\"default\"] : _ref$selectorFactory;\n    return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {\n        if (_ref2 === void 0) {\n            _ref2 = {};\n        }\n        var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__[\"default\"] : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__[\"default\"] : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__[\"default\"] : _ref3$areMergedPropsE, extraOptions = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref3, _excluded);\n        var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, \"mapStateToProps\");\n        var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, \"mapDispatchToProps\");\n        var initMergeProps = match(mergeProps, mergePropsFactories, \"mergeProps\");\n        return connectHOC(selectorFactory, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            // used in error messages\n            methodName: \"connect\",\n            // used to compute Connect's displayName from the wrapped component's displayName.\n            getDisplayName: function getDisplayName(name) {\n                return \"Connect(\" + name + \")\";\n            },\n            // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes\n            shouldHandleStateChanges: Boolean(mapStateToProps),\n            // passed through to selectorFactory\n            initMapStateToProps: initMapStateToProps,\n            initMapDispatchToProps: initMapDispatchToProps,\n            initMergeProps: initMergeProps,\n            pure: pure,\n            areStatesEqual: areStatesEqual,\n            areOwnPropsEqual: areOwnPropsEqual,\n            areStatePropsEqual: areStatePropsEqual,\n            areMergedPropsEqual: areMergedPropsEqual\n        }, extraOptions));\n    };\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/*#__PURE__*/createConnect());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/connect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mapDispatchToProps.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mapDispatchToProps.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   whenMapDispatchToPropsIsFunction: () => (/* binding */ whenMapDispatchToPropsIsFunction),\n/* harmony export */   whenMapDispatchToPropsIsMissing: () => (/* binding */ whenMapDispatchToPropsIsMissing),\n/* harmony export */   whenMapDispatchToPropsIsObject: () => (/* binding */ whenMapDispatchToPropsIsObject)\n/* harmony export */ });\n/* harmony import */ var _utils_bindActionCreators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/bindActionCreators */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/bindActionCreators.js\");\n/* harmony import */ var _wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wrapMapToProps */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/wrapMapToProps.js\");\n\n\nfunction whenMapDispatchToPropsIsFunction(mapDispatchToProps) {\n    return typeof mapDispatchToProps === \"function\" ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__.wrapMapToPropsFunc)(mapDispatchToProps, \"mapDispatchToProps\") : undefined;\n}\nfunction whenMapDispatchToPropsIsMissing(mapDispatchToProps) {\n    return !mapDispatchToProps ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__.wrapMapToPropsConstant)(function(dispatch) {\n        return {\n            dispatch: dispatch\n        };\n    }) : undefined;\n}\nfunction whenMapDispatchToPropsIsObject(mapDispatchToProps) {\n    return mapDispatchToProps && typeof mapDispatchToProps === \"object\" ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__.wrapMapToPropsConstant)(function(dispatch) {\n        return (0,_utils_bindActionCreators__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(mapDispatchToProps, dispatch);\n    }) : undefined;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\n    whenMapDispatchToPropsIsFunction,\n    whenMapDispatchToPropsIsMissing,\n    whenMapDispatchToPropsIsObject\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTZEO0FBQ2lCO0FBQ3ZFLFNBQVNHLGlDQUFpQ0Msa0JBQWtCO0lBQ2pFLE9BQU8sT0FBT0EsdUJBQXVCLGFBQWFGLG1FQUFrQkEsQ0FBQ0Usb0JBQW9CLHdCQUF3QkM7QUFDbkg7QUFDTyxTQUFTQyxnQ0FBZ0NGLGtCQUFrQjtJQUNoRSxPQUFPLENBQUNBLHFCQUFxQkgsdUVBQXNCQSxDQUFDLFNBQVVNLFFBQVE7UUFDcEUsT0FBTztZQUNMQSxVQUFVQTtRQUNaO0lBQ0YsS0FBS0Y7QUFDUDtBQUNPLFNBQVNHLCtCQUErQkosa0JBQWtCO0lBQy9ELE9BQU9BLHNCQUFzQixPQUFPQSx1QkFBdUIsV0FBV0gsdUVBQXNCQSxDQUFDLFNBQVVNLFFBQVE7UUFDN0csT0FBT1AscUVBQWtCQSxDQUFDSSxvQkFBb0JHO0lBQ2hELEtBQUtGO0FBQ1A7QUFDQSxpRUFBZTtJQUFDRjtJQUFrQ0c7SUFBaUNFO0NBQStCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanM/ZGExNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmluZEFjdGlvbkNyZWF0b3JzIGZyb20gJy4uL3V0aWxzL2JpbmRBY3Rpb25DcmVhdG9ycyc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyJdLCJuYW1lcyI6WyJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50Iiwid3JhcE1hcFRvUHJvcHNGdW5jIiwid2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24iLCJtYXBEaXNwYXRjaFRvUHJvcHMiLCJ1bmRlZmluZWQiLCJ3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nIiwiZGlzcGF0Y2giLCJ3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mapDispatchToProps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mapStateToProps.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mapStateToProps.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   whenMapStateToPropsIsFunction: () => (/* binding */ whenMapStateToPropsIsFunction),\n/* harmony export */   whenMapStateToPropsIsMissing: () => (/* binding */ whenMapStateToPropsIsMissing)\n/* harmony export */ });\n/* harmony import */ var _wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wrapMapToProps */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/wrapMapToProps.js\");\n\nfunction whenMapStateToPropsIsFunction(mapStateToProps) {\n    return typeof mapStateToProps === \"function\" ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsFunc)(mapStateToProps, \"mapStateToProps\") : undefined;\n}\nfunction whenMapStateToPropsIsMissing(mapStateToProps) {\n    return !mapStateToProps ? (0,_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__.wrapMapToPropsConstant)(function() {\n        return {};\n    }) : undefined;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\n    whenMapStateToPropsIsFunction,\n    whenMapStateToPropsIsMissing\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE4RTtBQUN2RSxTQUFTRSw4QkFBOEJDLGVBQWU7SUFDM0QsT0FBTyxPQUFPQSxvQkFBb0IsYUFBYUYsbUVBQWtCQSxDQUFDRSxpQkFBaUIscUJBQXFCQztBQUMxRztBQUNPLFNBQVNDLDZCQUE2QkYsZUFBZTtJQUMxRCxPQUFPLENBQUNBLGtCQUFrQkgsdUVBQXNCQSxDQUFDO1FBQy9DLE9BQU8sQ0FBQztJQUNWLEtBQUtJO0FBQ1A7QUFDQSxpRUFBZTtJQUFDRjtJQUErQkc7Q0FBNkIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcnNvbmFsaXplZC1jb250ZW50LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcz8zMmU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyJdLCJuYW1lcyI6WyJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50Iiwid3JhcE1hcFRvUHJvcHNGdW5jIiwid2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24iLCJtYXBTdGF0ZVRvUHJvcHMiLCJ1bmRlZmluZWQiLCJ3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mapStateToProps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mergeProps.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mergeProps.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   defaultMergeProps: () => (/* binding */ defaultMergeProps),\n/* harmony export */   whenMergePropsIsFunction: () => (/* binding */ whenMergePropsIsFunction),\n/* harmony export */   whenMergePropsIsOmitted: () => (/* binding */ whenMergePropsIsOmitted),\n/* harmony export */   wrapMergePropsFunc: () => (/* binding */ wrapMergePropsFunc)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/verifyPlainObject */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/verifyPlainObject.js\");\n\n\nfunction defaultMergeProps(stateProps, dispatchProps, ownProps) {\n    return (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, ownProps, stateProps, dispatchProps);\n}\nfunction wrapMergePropsFunc(mergeProps) {\n    return function initMergePropsProxy(dispatch, _ref) {\n        var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;\n        var hasRunOnce = false;\n        var mergedProps;\n        return function mergePropsProxy(stateProps, dispatchProps, ownProps) {\n            var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n            if (hasRunOnce) {\n                if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;\n            } else {\n                hasRunOnce = true;\n                mergedProps = nextMergedProps;\n                if (true) (0,_utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(mergedProps, displayName, \"mergeProps\");\n            }\n            return mergedProps;\n        };\n    };\n}\nfunction whenMergePropsIsFunction(mergeProps) {\n    return typeof mergeProps === \"function\" ? wrapMergePropsFunc(mergeProps) : undefined;\n}\nfunction whenMergePropsIsOmitted(mergeProps) {\n    return !mergeProps ? function() {\n        return defaultMergeProps;\n    } : undefined;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([\n    whenMergePropsIsFunction,\n    whenMergePropsIsOmitted\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMEQ7QUFDQztBQUNwRCxTQUFTRSxrQkFBa0JDLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxRQUFRO0lBQ25FLE9BQU9MLDhFQUFRQSxDQUFDLENBQUMsR0FBR0ssVUFBVUYsWUFBWUM7QUFDNUM7QUFDTyxTQUFTRSxtQkFBbUJDLFVBQVU7SUFDM0MsT0FBTyxTQUFTQyxvQkFBb0JDLFFBQVEsRUFBRUMsSUFBSTtRQUNoRCxJQUFJQyxjQUFjRCxLQUFLQyxXQUFXLEVBQzlCQyxPQUFPRixLQUFLRSxJQUFJLEVBQ2hCQyxzQkFBc0JILEtBQUtHLG1CQUFtQjtRQUNsRCxJQUFJQyxhQUFhO1FBQ2pCLElBQUlDO1FBQ0osT0FBTyxTQUFTQyxnQkFBZ0JiLFVBQVUsRUFBRUMsYUFBYSxFQUFFQyxRQUFRO1lBQ2pFLElBQUlZLGtCQUFrQlYsV0FBV0osWUFBWUMsZUFBZUM7WUFFNUQsSUFBSVMsWUFBWTtnQkFDZCxJQUFJLENBQUNGLFFBQVEsQ0FBQ0Msb0JBQW9CSSxpQkFBaUJGLGNBQWNBLGNBQWNFO1lBQ2pGLE9BQU87Z0JBQ0xILGFBQWE7Z0JBQ2JDLGNBQWNFO2dCQUNkLElBQUlDLElBQXlCLEVBQWNqQixvRUFBaUJBLENBQUNjLGFBQWFKLGFBQWE7WUFDekY7WUFFQSxPQUFPSTtRQUNUO0lBQ0Y7QUFDRjtBQUNPLFNBQVNJLHlCQUF5QlosVUFBVTtJQUNqRCxPQUFPLE9BQU9BLGVBQWUsYUFBYUQsbUJBQW1CQyxjQUFjYTtBQUM3RTtBQUNPLFNBQVNDLHdCQUF3QmQsVUFBVTtJQUNoRCxPQUFPLENBQUNBLGFBQWE7UUFDbkIsT0FBT0w7SUFDVCxJQUFJa0I7QUFDTjtBQUNBLGlFQUFlO0lBQUNEO0lBQTBCRTtDQUF3QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyc29uYWxpemVkLWNvbnRlbnQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcz81N2VjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyJdLCJuYW1lcyI6WyJfZXh0ZW5kcyIsInZlcmlmeVBsYWluT2JqZWN0IiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm93blByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwibWVyZ2VQcm9wcyIsImluaXRNZXJnZVByb3BzUHJveHkiLCJkaXNwYXRjaCIsIl9yZWYiLCJkaXNwbGF5TmFtZSIsInB1cmUiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wc1Byb3h5IiwibmV4dE1lcmdlZFByb3BzIiwicHJvY2VzcyIsIndoZW5NZXJnZVByb3BzSXNGdW5jdGlvbiIsInVuZGVmaW5lZCIsIndoZW5NZXJnZVByb3BzSXNPbWl0dGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/mergeProps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/selectorFactory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/selectorFactory.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ finalPropsSelectorFactory),\n/* harmony export */   impureFinalPropsSelectorFactory: () => (/* binding */ impureFinalPropsSelectorFactory),\n/* harmony export */   pureFinalPropsSelectorFactory: () => (/* binding */ pureFinalPropsSelectorFactory)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\");\n/* harmony import */ var _verifySubselectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./verifySubselectors */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/verifySubselectors.js\");\n\nvar _excluded = [\n    \"initMapStateToProps\",\n    \"initMapDispatchToProps\",\n    \"initMergeProps\"\n];\n\nfunction impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {\n    return function impureFinalPropsSelector(state, ownProps) {\n        return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);\n    };\n}\nfunction pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {\n    var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;\n    var hasRunAtLeastOnce = false;\n    var state;\n    var ownProps;\n    var stateProps;\n    var dispatchProps;\n    var mergedProps;\n    function handleFirstCall(firstState, firstOwnProps) {\n        state = firstState;\n        ownProps = firstOwnProps;\n        stateProps = mapStateToProps(state, ownProps);\n        dispatchProps = mapDispatchToProps(dispatch, ownProps);\n        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n        hasRunAtLeastOnce = true;\n        return mergedProps;\n    }\n    function handleNewPropsAndNewState() {\n        stateProps = mapStateToProps(state, ownProps);\n        if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n        return mergedProps;\n    }\n    function handleNewProps() {\n        if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);\n        if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);\n        mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n        return mergedProps;\n    }\n    function handleNewState() {\n        var nextStateProps = mapStateToProps(state, ownProps);\n        var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);\n        stateProps = nextStateProps;\n        if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);\n        return mergedProps;\n    }\n    function handleSubsequentCalls(nextState, nextOwnProps) {\n        var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);\n        var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);\n        state = nextState;\n        ownProps = nextOwnProps;\n        if (propsChanged && stateChanged) return handleNewPropsAndNewState();\n        if (propsChanged) return handleNewProps();\n        if (stateChanged) return handleNewState();\n        return mergedProps;\n    }\n    return function pureFinalPropsSelector(nextState, nextOwnProps) {\n        return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);\n    };\n} // TODO: Add more comments\n// If pure is true, the selector returned by selectorFactory will memoize its results,\n// allowing connectAdvanced's shouldComponentUpdate to return false if final\n// props have not changed. If false, the selector will always return a new\n// object and shouldComponentUpdate will always return true.\nfunction finalPropsSelectorFactory(dispatch, _ref2) {\n    var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref2, _excluded);\n    var mapStateToProps = initMapStateToProps(dispatch, options);\n    var mapDispatchToProps = initMapDispatchToProps(dispatch, options);\n    var mergeProps = initMergeProps(dispatch, options);\n    if (true) {\n        (0,_verifySubselectors__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);\n    }\n    var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;\n    return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/selectorFactory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/verifySubselectors.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/verifySubselectors.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ verifySubselectors)\n/* harmony export */ });\n/* harmony import */ var _utils_warning__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/warning */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/warning.js\");\n\nfunction verify(selector, methodName, displayName) {\n    if (!selector) {\n        throw new Error(\"Unexpected value for \" + methodName + \" in \" + displayName + \".\");\n    } else if (methodName === \"mapStateToProps\" || methodName === \"mapDispatchToProps\") {\n        if (!Object.prototype.hasOwnProperty.call(selector, \"dependsOnOwnProps\")) {\n            (0,_utils_warning__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"The selector for \" + methodName + \" of \" + displayName + \" did not specify a value for dependsOnOwnProps.\");\n        }\n    }\n}\nfunction verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {\n    verify(mapStateToProps, \"mapStateToProps\", displayName);\n    verify(mapDispatchToProps, \"mapDispatchToProps\", displayName);\n    verify(mergeProps, \"mergeProps\", displayName);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC92ZXJpZnlTdWJzZWxlY3RvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUM7QUFFdkMsU0FBU0MsT0FBT0MsUUFBUSxFQUFFQyxVQUFVLEVBQUVDLFdBQVc7SUFDL0MsSUFBSSxDQUFDRixVQUFVO1FBQ2IsTUFBTSxJQUFJRyxNQUFNLDBCQUEwQkYsYUFBYSxTQUFTQyxjQUFjO0lBQ2hGLE9BQU8sSUFBSUQsZUFBZSxxQkFBcUJBLGVBQWUsc0JBQXNCO1FBQ2xGLElBQUksQ0FBQ0csT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsVUFBVSxzQkFBc0I7WUFDeEVGLDBEQUFPQSxDQUFDLHNCQUFzQkcsYUFBYSxTQUFTQyxjQUFjO1FBQ3BFO0lBQ0Y7QUFDRjtBQUVlLFNBQVNNLG1CQUFtQkMsZUFBZSxFQUFFQyxrQkFBa0IsRUFBRUMsVUFBVSxFQUFFVCxXQUFXO0lBQ3JHSCxPQUFPVSxpQkFBaUIsbUJBQW1CUDtJQUMzQ0gsT0FBT1csb0JBQW9CLHNCQUFzQlI7SUFDakRILE9BQU9ZLFlBQVksY0FBY1Q7QUFDbkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC92ZXJpZnlTdWJzZWxlY3RvcnMuanM/YWJkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcblxuZnVuY3Rpb24gdmVyaWZ5KHNlbGVjdG9yLCBtZXRob2ROYW1lLCBkaXNwbGF5TmFtZSkge1xuICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCB2YWx1ZSBmb3IgXCIgKyBtZXRob2ROYW1lICsgXCIgaW4gXCIgKyBkaXNwbGF5TmFtZSArIFwiLlwiKTtcbiAgfSBlbHNlIGlmIChtZXRob2ROYW1lID09PSAnbWFwU3RhdGVUb1Byb3BzJyB8fCBtZXRob2ROYW1lID09PSAnbWFwRGlzcGF0Y2hUb1Byb3BzJykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNlbGVjdG9yLCAnZGVwZW5kc09uT3duUHJvcHMnKSkge1xuICAgICAgd2FybmluZyhcIlRoZSBzZWxlY3RvciBmb3IgXCIgKyBtZXRob2ROYW1lICsgXCIgb2YgXCIgKyBkaXNwbGF5TmFtZSArIFwiIGRpZCBub3Qgc3BlY2lmeSBhIHZhbHVlIGZvciBkZXBlbmRzT25Pd25Qcm9wcy5cIik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGxheU5hbWUpIHtcbiAgdmVyaWZ5KG1hcFN0YXRlVG9Qcm9wcywgJ21hcFN0YXRlVG9Qcm9wcycsIGRpc3BsYXlOYW1lKTtcbiAgdmVyaWZ5KG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycsIGRpc3BsYXlOYW1lKTtcbiAgdmVyaWZ5KG1lcmdlUHJvcHMsICdtZXJnZVByb3BzJywgZGlzcGxheU5hbWUpO1xufSJdLCJuYW1lcyI6WyJ3YXJuaW5nIiwidmVyaWZ5Iiwic2VsZWN0b3IiLCJtZXRob2ROYW1lIiwiZGlzcGxheU5hbWUiLCJFcnJvciIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInZlcmlmeVN1YnNlbGVjdG9ycyIsIm1hcFN0YXRlVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsIm1lcmdlUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/verifySubselectors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/wrapMapToProps.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/wrapMapToProps.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDependsOnOwnProps: () => (/* binding */ getDependsOnOwnProps),\n/* harmony export */   wrapMapToPropsConstant: () => (/* binding */ wrapMapToPropsConstant),\n/* harmony export */   wrapMapToPropsFunc: () => (/* binding */ wrapMapToPropsFunc)\n/* harmony export */ });\n/* harmony import */ var _utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/verifyPlainObject */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/verifyPlainObject.js\");\n\nfunction wrapMapToPropsConstant(getConstant) {\n    return function initConstantSelector(dispatch, options) {\n        var constant = getConstant(dispatch, options);\n        function constantSelector() {\n            return constant;\n        }\n        constantSelector.dependsOnOwnProps = false;\n        return constantSelector;\n    };\n} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\n// whether mapToProps needs to be invoked when props have changed.\n//\n// A length of one signals that mapToProps does not depend on props from the parent component.\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\n// therefore not reporting its length accurately..\nfunction getDependsOnOwnProps(mapToProps) {\n    return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;\n} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\n// this function wraps mapToProps in a proxy function which does several things:\n//\n//  * Detects whether the mapToProps function being called depends on props, which\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\n//\n//  * On first call, handles mapToProps if returns another function, and treats that\n//    new function as the true mapToProps for subsequent calls.\n//\n//  * On first call, verifies the first result is a plain object, in order to warn\n//    the developer that their mapToProps function is not returning a valid result.\n//\nfunction wrapMapToPropsFunc(mapToProps, methodName) {\n    return function initProxySelector(dispatch, _ref) {\n        var displayName = _ref.displayName;\n        var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {\n            return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);\n        }; // allow detectFactoryAndVerify to get ownProps\n        proxy.dependsOnOwnProps = true;\n        proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {\n            proxy.mapToProps = mapToProps;\n            proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);\n            var props = proxy(stateOrDispatch, ownProps);\n            if (typeof props === \"function\") {\n                proxy.mapToProps = props;\n                proxy.dependsOnOwnProps = getDependsOnOwnProps(props);\n                props = proxy(stateOrDispatch, ownProps);\n            }\n            if (true) (0,_utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(props, displayName, methodName);\n            return props;\n        };\n        return proxy;\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTJEO0FBQ3BELFNBQVNDLHVCQUF1QkMsV0FBVztJQUNoRCxPQUFPLFNBQVNDLHFCQUFxQkMsUUFBUSxFQUFFQyxPQUFPO1FBQ3BELElBQUlDLFdBQVdKLFlBQVlFLFVBQVVDO1FBRXJDLFNBQVNFO1lBQ1AsT0FBT0Q7UUFDVDtRQUVBQyxpQkFBaUJDLGlCQUFpQixHQUFHO1FBQ3JDLE9BQU9EO0lBQ1Q7QUFDRixFQUFFLGdHQUFnRztBQUNsRyxrR0FBa0c7QUFDbEcsa0VBQWtFO0FBQ2xFLEVBQUU7QUFDRiw4RkFBOEY7QUFDOUYsOEZBQThGO0FBQzlGLGtEQUFrRDtBQUUzQyxTQUFTRSxxQkFBcUJDLFVBQVU7SUFDN0MsT0FBT0EsV0FBV0YsaUJBQWlCLEtBQUssUUFBUUUsV0FBV0YsaUJBQWlCLEtBQUtHLFlBQVlDLFFBQVFGLFdBQVdGLGlCQUFpQixJQUFJRSxXQUFXRyxNQUFNLEtBQUs7QUFDN0osRUFBRSw4RUFBOEU7QUFDaEYsZ0ZBQWdGO0FBQ2hGLEVBQUU7QUFDRixrRkFBa0Y7QUFDbEYsa0ZBQWtGO0FBQ2xGLEVBQUU7QUFDRixvRkFBb0Y7QUFDcEYsK0RBQStEO0FBQy9ELEVBQUU7QUFDRixrRkFBa0Y7QUFDbEYsbUZBQW1GO0FBQ25GLEVBQUU7QUFFSyxTQUFTQyxtQkFBbUJKLFVBQVUsRUFBRUssVUFBVTtJQUN2RCxPQUFPLFNBQVNDLGtCQUFrQlosUUFBUSxFQUFFYSxJQUFJO1FBQzlDLElBQUlDLGNBQWNELEtBQUtDLFdBQVc7UUFFbEMsSUFBSUMsUUFBUSxTQUFTQyxnQkFBZ0JDLGVBQWUsRUFBRUMsUUFBUTtZQUM1RCxPQUFPSCxNQUFNWCxpQkFBaUIsR0FBR1csTUFBTVQsVUFBVSxDQUFDVyxpQkFBaUJDLFlBQVlILE1BQU1ULFVBQVUsQ0FBQ1c7UUFDbEcsR0FBRywrQ0FBK0M7UUFHbERGLE1BQU1YLGlCQUFpQixHQUFHO1FBRTFCVyxNQUFNVCxVQUFVLEdBQUcsU0FBU2EsdUJBQXVCRixlQUFlLEVBQUVDLFFBQVE7WUFDMUVILE1BQU1ULFVBQVUsR0FBR0E7WUFDbkJTLE1BQU1YLGlCQUFpQixHQUFHQyxxQkFBcUJDO1lBQy9DLElBQUljLFFBQVFMLE1BQU1FLGlCQUFpQkM7WUFFbkMsSUFBSSxPQUFPRSxVQUFVLFlBQVk7Z0JBQy9CTCxNQUFNVCxVQUFVLEdBQUdjO2dCQUNuQkwsTUFBTVgsaUJBQWlCLEdBQUdDLHFCQUFxQmU7Z0JBQy9DQSxRQUFRTCxNQUFNRSxpQkFBaUJDO1lBQ2pDO1lBRUEsSUFBSUcsSUFBeUIsRUFBY3pCLG9FQUFpQkEsQ0FBQ3dCLE9BQU9OLGFBQWFIO1lBQ2pGLE9BQU9TO1FBQ1Q7UUFFQSxPQUFPTDtJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcz8wMWNlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cblxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn0gLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iXSwibmFtZXMiOlsidmVyaWZ5UGxhaW5PYmplY3QiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJpbml0Q29uc3RhbnRTZWxlY3RvciIsImRpc3BhdGNoIiwib3B0aW9ucyIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwidW5kZWZpbmVkIiwiQm9vbGVhbiIsImxlbmd0aCIsIndyYXBNYXBUb1Byb3BzRnVuYyIsIm1ldGhvZE5hbWUiLCJpbml0UHJveHlTZWxlY3RvciIsIl9yZWYiLCJkaXNwbGF5TmFtZSIsInByb3h5IiwibWFwVG9Qcm9wc1Byb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IiwicHJvcHMiLCJwcm9jZXNzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/wrapMapToProps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/exports.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/exports.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Provider: () => (/* reexport safe */ _components_Provider__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   ReactReduxContext: () => (/* reexport safe */ _components_Context__WEBPACK_IMPORTED_MODULE_2__.ReactReduxContext),\n/* harmony export */   connect: () => (/* reexport safe */ _connect_connect__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   connectAdvanced: () => (/* reexport safe */ _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   createDispatchHook: () => (/* reexport safe */ _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__.createDispatchHook),\n/* harmony export */   createSelectorHook: () => (/* reexport safe */ _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__.createSelectorHook),\n/* harmony export */   createStoreHook: () => (/* reexport safe */ _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__.createStoreHook),\n/* harmony export */   shallowEqual: () => (/* reexport safe */ _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   useDispatch: () => (/* reexport safe */ _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__.useDispatch),\n/* harmony export */   useSelector: () => (/* reexport safe */ _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__.useSelector),\n/* harmony export */   useStore: () => (/* reexport safe */ _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__.useStore)\n/* harmony export */ });\n/* harmony import */ var _components_Provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Provider */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Provider.js\");\n/* harmony import */ var _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/connectAdvanced */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/connectAdvanced.js\");\n/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/Context */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js\");\n/* harmony import */ var _connect_connect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connect/connect */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/connect/connect.js\");\n/* harmony import */ var _hooks_useDispatch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hooks/useDispatch */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useDispatch.js\");\n/* harmony import */ var _hooks_useSelector__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hooks/useSelector */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useSelector.js\");\n/* harmony import */ var _hooks_useStore__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hooks/useStore */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useStore.js\");\n/* harmony import */ var _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/shallowEqual */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/shallowEqual.js\");\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvZXhwb3J0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZDO0FBQ2M7QUFDRjtBQUNqQjtBQUM4QjtBQUNBO0FBQ1Q7QUFDYjtBQUM0SCIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcnNvbmFsaXplZC1jb250ZW50LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9leHBvcnRzLmpzPzM0ZDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QvY29ubmVjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rLCB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rLCB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rLCBzaGFsbG93RXF1YWwgfTsiXSwibmFtZXMiOlsiUHJvdmlkZXIiLCJjb25uZWN0QWR2YW5jZWQiLCJSZWFjdFJlZHV4Q29udGV4dCIsImNvbm5lY3QiLCJ1c2VEaXNwYXRjaCIsImNyZWF0ZURpc3BhdGNoSG9vayIsInVzZVNlbGVjdG9yIiwiY3JlYXRlU2VsZWN0b3JIb29rIiwidXNlU3RvcmUiLCJjcmVhdGVTdG9yZUhvb2siLCJzaGFsbG93RXF1YWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/exports.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useDispatch.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useDispatch.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDispatchHook: () => (/* binding */ createDispatchHook),\n/* harmony export */   useDispatch: () => (/* binding */ useDispatch)\n/* harmony export */ });\n/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/Context */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js\");\n/* harmony import */ var _useStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useStore */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useStore.js\");\n\n\n/**\r\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useDispatch` hook bound to the specified context.\r\n */ function createDispatchHook(context) {\n    if (context === void 0) {\n        context = _components_Context__WEBPACK_IMPORTED_MODULE_0__.ReactReduxContext;\n    }\n    var useStore = context === _components_Context__WEBPACK_IMPORTED_MODULE_0__.ReactReduxContext ? _useStore__WEBPACK_IMPORTED_MODULE_1__.useStore : (0,_useStore__WEBPACK_IMPORTED_MODULE_1__.createStoreHook)(context);\n    return function useDispatch() {\n        var store = useStore();\n        return store.dispatch;\n    };\n}\n/**\r\n * A hook to access the redux `dispatch` function.\r\n *\r\n * @returns {any|function} redux store's `dispatch` function\r\n *\r\n * @example\r\n *\r\n * import React, { useCallback } from 'react'\r\n * import { useDispatch } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const dispatch = useDispatch()\r\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\r\n *   return (\r\n *     <div>\r\n *       <span>{value}</span>\r\n *       <button onClick={increaseCounter}>Increase counter</button>\r\n *     </div>\r\n *   )\r\n * }\r\n */ var useDispatch = /*#__PURE__*/ createDispatchHook();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwRDtBQUNnQjtBQUMxRTs7Ozs7Q0FLQyxHQUVNLFNBQVNJLG1CQUFtQkMsT0FBTztJQUN4QyxJQUFJQSxZQUFZLEtBQUssR0FBRztRQUN0QkEsVUFBVUwsa0VBQWlCQTtJQUM3QjtJQUVBLElBQUlDLFdBQVdJLFlBQVlMLGtFQUFpQkEsR0FBR0UsK0NBQWVBLEdBQUdDLDBEQUFlQSxDQUFDRTtJQUNqRixPQUFPLFNBQVNDO1FBQ2QsSUFBSUMsUUFBUU47UUFDWixPQUFPTSxNQUFNQyxRQUFRO0lBQ3ZCO0FBQ0Y7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FvQkMsR0FFTSxJQUFJRixjQUFjLFdBQVcsR0FBRUYscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyc29uYWxpemVkLWNvbnRlbnQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZURpc3BhdGNoLmpzP2Y3NGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlU3RvcmUgYXMgdXNlRGVmYXVsdFN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL3VzZVN0b3JlJztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlzcGF0Y2hIb29rKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dDtcbiAgfVxuXG4gIHZhciB1c2VTdG9yZSA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgdmFyIHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcclxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXHJcbiAqICAgcmV0dXJuIChcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XHJcbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICApXHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlRGlzcGF0Y2ggPSAvKiNfX1BVUkVfXyovY3JlYXRlRGlzcGF0Y2hIb29rKCk7Il0sIm5hbWVzIjpbIlJlYWN0UmVkdXhDb250ZXh0IiwidXNlU3RvcmUiLCJ1c2VEZWZhdWx0U3RvcmUiLCJjcmVhdGVTdG9yZUhvb2siLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJjb250ZXh0IiwidXNlRGlzcGF0Y2giLCJzdG9yZSIsImRpc3BhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useDispatch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useReduxContext.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useReduxContext.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useReduxContext: () => (/* binding */ useReduxContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Context */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js\");\n\n\n/**\r\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\r\n * hook that you should usually not need to call directly.\r\n *\r\n * @returns {any} the value of the `ReactReduxContext`\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useReduxContext } from 'react-redux'\r\n *\r\n * export const CounterComponent = ({ value }) => {\r\n *   const { store } = useReduxContext()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */ function useReduxContext() {\n    var contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(_components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext);\n    if ( true && !contextValue) {\n        throw new Error(\"could not find react-redux context value; please ensure the component is wrapped in a <Provider>\");\n    }\n    return contextValue;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBbUM7QUFDdUI7QUFDMUQ7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBRU0sU0FBU0U7SUFDZCxJQUFJQyxlQUFlSCxpREFBVUEsQ0FBQ0Msa0VBQWlCQTtJQUUvQyxJQUFJRyxLQUF5QixJQUFnQixDQUFDRCxjQUFjO1FBQzFELE1BQU0sSUFBSUUsTUFBTTtJQUNsQjtJQUVBLE9BQU9GO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzP2NiNzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0Jztcbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YC4gVGhpcyBpcyBhIGxvdy1sZXZlbFxyXG4gKiBob29rIHRoYXQgeW91IHNob3VsZCB1c3VhbGx5IG5vdCBuZWVkIHRvIGNhbGwgZGlyZWN0bHkuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSB2YWx1ZSBvZiB0aGUgYFJlYWN0UmVkdXhDb250ZXh0YFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCB7IHN0b3JlIH0gPSB1c2VSZWR1eENvbnRleHQoKVxyXG4gKiAgIHJldHVybiA8ZGl2PntzdG9yZS5nZXRTdGF0ZSgpfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVkdXhDb250ZXh0KCkge1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChSZWFjdFJlZHV4Q29udGV4dCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbnRleHRWYWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGZpbmQgcmVhY3QtcmVkdXggY29udGV4dCB2YWx1ZTsgcGxlYXNlIGVuc3VyZSB0aGUgY29tcG9uZW50IGlzIHdyYXBwZWQgaW4gYSA8UHJvdmlkZXI+Jyk7XG4gIH1cblxuICByZXR1cm4gY29udGV4dFZhbHVlO1xufSJdLCJuYW1lcyI6WyJ1c2VDb250ZXh0IiwiUmVhY3RSZWR1eENvbnRleHQiLCJ1c2VSZWR1eENvbnRleHQiLCJjb250ZXh0VmFsdWUiLCJwcm9jZXNzIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useReduxContext.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useSelector.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useSelector.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSelectorHook: () => (/* binding */ createSelectorHook),\n/* harmony export */   useSelector: () => (/* binding */ useSelector)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _useReduxContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./useReduxContext */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useReduxContext.js\");\n/* harmony import */ var _utils_Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Subscription */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/Subscription.js\");\n/* harmony import */ var _utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/useIsomorphicLayoutEffect */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js\");\n/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/Context */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js\");\n\n\n\n\n\nvar refEquality = function refEquality(a, b) {\n    return a === b;\n};\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n    var _useReducer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(function(s) {\n        return s + 1;\n    }, 0), forceRender = _useReducer[1];\n    var subscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n        return (0,_utils_Subscription__WEBPACK_IMPORTED_MODULE_2__.createSubscription)(store, contextSub);\n    }, [\n        store,\n        contextSub\n    ]);\n    var latestSubscriptionCallbackError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var latestSelector = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var latestStoreState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var latestSelectedState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var storeState = store.getState();\n    var selectedState;\n    try {\n        if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {\n            var newSelectedState = selector(storeState); // ensure latest selected state is reused so that a custom equality function can result in identical references\n            if (latestSelectedState.current === undefined || !equalityFn(newSelectedState, latestSelectedState.current)) {\n                selectedState = newSelectedState;\n            } else {\n                selectedState = latestSelectedState.current;\n            }\n        } else {\n            selectedState = latestSelectedState.current;\n        }\n    } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n            err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n        }\n        throw err;\n    }\n    (0,_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(function() {\n        latestSelector.current = selector;\n        latestStoreState.current = storeState;\n        latestSelectedState.current = selectedState;\n        latestSubscriptionCallbackError.current = undefined;\n    });\n    (0,_utils_useIsomorphicLayoutEffect__WEBPACK_IMPORTED_MODULE_3__.useIsomorphicLayoutEffect)(function() {\n        function checkForUpdates() {\n            try {\n                var newStoreState = store.getState(); // Avoid calling selector multiple times if the store's state has not changed\n                if (newStoreState === latestStoreState.current) {\n                    return;\n                }\n                var _newSelectedState = latestSelector.current(newStoreState);\n                if (equalityFn(_newSelectedState, latestSelectedState.current)) {\n                    return;\n                }\n                latestSelectedState.current = _newSelectedState;\n                latestStoreState.current = newStoreState;\n            } catch (err) {\n                // we ignore all errors here, since when the component\n                // is re-rendered, the selectors are called again, and\n                // will throw again, if neither props nor store state\n                // changed\n                latestSubscriptionCallbackError.current = err;\n            }\n            forceRender();\n        }\n        subscription.onStateChange = checkForUpdates;\n        subscription.trySubscribe();\n        checkForUpdates();\n        return function() {\n            return subscription.tryUnsubscribe();\n        };\n    }, [\n        store,\n        subscription\n    ]);\n    return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */ function createSelectorHook(context) {\n    if (context === void 0) {\n        context = _components_Context__WEBPACK_IMPORTED_MODULE_4__.ReactReduxContext;\n    }\n    var useReduxContext = context === _components_Context__WEBPACK_IMPORTED_MODULE_4__.ReactReduxContext ? _useReduxContext__WEBPACK_IMPORTED_MODULE_1__.useReduxContext : function() {\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);\n    };\n    return function useSelector(selector, equalityFn) {\n        if (equalityFn === void 0) {\n            equalityFn = refEquality;\n        }\n        if (true) {\n            if (!selector) {\n                throw new Error(\"You must pass a selector to useSelector\");\n            }\n            if (typeof selector !== \"function\") {\n                throw new Error(\"You must pass a function as a selector to useSelector\");\n            }\n            if (typeof equalityFn !== \"function\") {\n                throw new Error(\"You must pass a function as an equality function to useSelector\");\n            }\n        }\n        var _useReduxContext = useReduxContext(), store = _useReduxContext.store, contextSub = _useReduxContext.subscription;\n        var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(selectedState);\n        return selectedState;\n    };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */ var useSelector = /*#__PURE__*/ createSelectorHook();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useSelector.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useStore.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useStore.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStoreHook: () => (/* binding */ createStoreHook),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _components_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Context */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/components/Context.js\");\n/* harmony import */ var _useReduxContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useReduxContext */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useReduxContext.js\");\n\n\n\n/**\r\n * Hook factory, which creates a `useStore` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useStore` hook bound to the specified context.\r\n */ function createStoreHook(context) {\n    if (context === void 0) {\n        context = _components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext;\n    }\n    var useReduxContext = context === _components_Context__WEBPACK_IMPORTED_MODULE_1__.ReactReduxContext ? _useReduxContext__WEBPACK_IMPORTED_MODULE_2__.useReduxContext : function() {\n        return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(context);\n    };\n    return function useStore() {\n        var _useReduxContext = useReduxContext(), store = _useReduxContext.store;\n        return store;\n    };\n}\n/**\r\n * A hook to access the redux store.\r\n *\r\n * @returns {any} the redux store\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useStore } from 'react-redux'\r\n *\r\n * export const ExampleComponent = () => {\r\n *   const store = useStore()\r\n *   return <div>{store.getState()}</div>\r\n * }\r\n */ var useStore = /*#__PURE__*/ createStoreHook();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW1DO0FBQ3VCO0FBQ29CO0FBQzlFOzs7OztDQUtDLEdBRU0sU0FBU0ksZ0JBQWdCQyxPQUFPO0lBQ3JDLElBQUlBLFlBQVksS0FBSyxHQUFHO1FBQ3RCQSxVQUFVSixrRUFBaUJBO0lBQzdCO0lBRUEsSUFBSUMsa0JBQWtCRyxZQUFZSixrRUFBaUJBLEdBQUdFLDZEQUFzQkEsR0FBRztRQUM3RSxPQUFPSCxpREFBVUEsQ0FBQ0s7SUFDcEI7SUFDQSxPQUFPLFNBQVNDO1FBQ2QsSUFBSUMsbUJBQW1CTCxtQkFDbkJNLFFBQVFELGlCQUFpQkMsS0FBSztRQUVsQyxPQUFPQTtJQUNUO0FBQ0Y7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Q0FjQyxHQUVNLElBQUlGLFdBQVcsV0FBVyxHQUFFRixrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanM/YTk5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VTdG9yZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVTdG9yZUhvb2soKTsiXSwibmFtZXMiOlsidXNlQ29udGV4dCIsIlJlYWN0UmVkdXhDb250ZXh0IiwidXNlUmVkdXhDb250ZXh0IiwidXNlRGVmYXVsdFJlZHV4Q29udGV4dCIsImNyZWF0ZVN0b3JlSG9vayIsImNvbnRleHQiLCJ1c2VTdG9yZSIsIl91c2VSZWR1eENvbnRleHQiLCJzdG9yZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/hooks/useStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/index.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/index.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Provider: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.Provider),\n/* harmony export */   ReactReduxContext: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.ReactReduxContext),\n/* harmony export */   batch: () => (/* reexport safe */ _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates),\n/* harmony export */   connect: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.connect),\n/* harmony export */   connectAdvanced: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.connectAdvanced),\n/* harmony export */   createDispatchHook: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.createDispatchHook),\n/* harmony export */   createSelectorHook: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.createSelectorHook),\n/* harmony export */   createStoreHook: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.createStoreHook),\n/* harmony export */   shallowEqual: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.shallowEqual),\n/* harmony export */   useDispatch: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.useDispatch),\n/* harmony export */   useSelector: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.useSelector),\n/* harmony export */   useStore: () => (/* reexport safe */ _exports__WEBPACK_IMPORTED_MODULE_0__.useStore)\n/* harmony export */ });\n/* harmony import */ var _exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./exports */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/exports.js\");\n/* harmony import */ var _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/reactBatchedUpdates */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/reactBatchedUpdates.js\");\n/* harmony import */ var _utils_batch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/batch */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/batch.js\");\n\n\n // Enable batched updates in our subscriptions for use\n// with standard React renderers (ReactDOM, React Native)\n(0,_utils_batch__WEBPACK_IMPORTED_MODULE_2__.setBatch)(_utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTBCO0FBQ3FEO0FBQ3RDLENBQUMsc0RBQXNEO0FBQ2hHLHlEQUF5RDtBQUV6REUsc0RBQVFBLENBQUNELCtFQUFLQTtBQUNHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyc29uYWxpemVkLWNvbnRlbnQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzP2RlYTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7IC8vIEVuYWJsZSBiYXRjaGVkIHVwZGF0ZXMgaW4gb3VyIHN1YnNjcmlwdGlvbnMgZm9yIHVzZVxuLy8gd2l0aCBzdGFuZGFyZCBSZWFjdCByZW5kZXJlcnMgKFJlYWN0RE9NLCBSZWFjdCBOYXRpdmUpXG5cbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IGJhdGNoIH07Il0sIm5hbWVzIjpbInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwiYmF0Y2giLCJzZXRCYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/Subscription.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/Subscription.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSubscription: () => (/* binding */ createSubscription)\n/* harmony export */ });\n/* harmony import */ var _batch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./batch */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/batch.js\");\n // encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\nfunction createListenerCollection() {\n    var batch = (0,_batch__WEBPACK_IMPORTED_MODULE_0__.getBatch)();\n    var first = null;\n    var last = null;\n    return {\n        clear: function clear() {\n            first = null;\n            last = null;\n        },\n        notify: function notify() {\n            batch(function() {\n                var listener = first;\n                while(listener){\n                    listener.callback();\n                    listener = listener.next;\n                }\n            });\n        },\n        get: function get() {\n            var listeners = [];\n            var listener = first;\n            while(listener){\n                listeners.push(listener);\n                listener = listener.next;\n            }\n            return listeners;\n        },\n        subscribe: function subscribe(callback) {\n            var isSubscribed = true;\n            var listener = last = {\n                callback: callback,\n                next: null,\n                prev: last\n            };\n            if (listener.prev) {\n                listener.prev.next = listener;\n            } else {\n                first = listener;\n            }\n            return function unsubscribe() {\n                if (!isSubscribed || first === null) return;\n                isSubscribed = false;\n                if (listener.next) {\n                    listener.next.prev = listener.prev;\n                } else {\n                    last = listener.prev;\n                }\n                if (listener.prev) {\n                    listener.prev.next = listener.next;\n                } else {\n                    first = listener.next;\n                }\n            };\n        }\n    };\n}\nvar nullListeners = {\n    notify: function notify() {},\n    get: function get() {\n        return [];\n    }\n};\nfunction createSubscription(store, parentSub) {\n    var unsubscribe;\n    var listeners = nullListeners;\n    function addNestedSub(listener) {\n        trySubscribe();\n        return listeners.subscribe(listener);\n    }\n    function notifyNestedSubs() {\n        listeners.notify();\n    }\n    function handleChangeWrapper() {\n        if (subscription.onStateChange) {\n            subscription.onStateChange();\n        }\n    }\n    function isSubscribed() {\n        return Boolean(unsubscribe);\n    }\n    function trySubscribe() {\n        if (!unsubscribe) {\n            unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);\n            listeners = createListenerCollection();\n        }\n    }\n    function tryUnsubscribe() {\n        if (unsubscribe) {\n            unsubscribe();\n            unsubscribe = undefined;\n            listeners.clear();\n            listeners = nullListeners;\n        }\n    }\n    var subscription = {\n        addNestedSub: addNestedSub,\n        notifyNestedSubs: notifyNestedSubs,\n        handleChangeWrapper: handleChangeWrapper,\n        isSubscribed: isSubscribed,\n        trySubscribe: trySubscribe,\n        tryUnsubscribe: tryUnsubscribe,\n        getListeners: function getListeners() {\n            return listeners;\n        }\n    };\n    return subscription;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DLENBQUMsd0ZBQXdGO0FBQzVILG9GQUFvRjtBQUNwRixtREFBbUQ7QUFFbkQsU0FBU0M7SUFDUCxJQUFJQyxRQUFRRixnREFBUUE7SUFDcEIsSUFBSUcsUUFBUTtJQUNaLElBQUlDLE9BQU87SUFDWCxPQUFPO1FBQ0xDLE9BQU8sU0FBU0E7WUFDZEYsUUFBUTtZQUNSQyxPQUFPO1FBQ1Q7UUFDQUUsUUFBUSxTQUFTQTtZQUNmSixNQUFNO2dCQUNKLElBQUlLLFdBQVdKO2dCQUVmLE1BQU9JLFNBQVU7b0JBQ2ZBLFNBQVNDLFFBQVE7b0JBQ2pCRCxXQUFXQSxTQUFTRSxJQUFJO2dCQUMxQjtZQUNGO1FBQ0Y7UUFDQUMsS0FBSyxTQUFTQTtZQUNaLElBQUlDLFlBQVksRUFBRTtZQUNsQixJQUFJSixXQUFXSjtZQUVmLE1BQU9JLFNBQVU7Z0JBQ2ZJLFVBQVVDLElBQUksQ0FBQ0w7Z0JBQ2ZBLFdBQVdBLFNBQVNFLElBQUk7WUFDMUI7WUFFQSxPQUFPRTtRQUNUO1FBQ0FFLFdBQVcsU0FBU0EsVUFBVUwsUUFBUTtZQUNwQyxJQUFJTSxlQUFlO1lBQ25CLElBQUlQLFdBQVdILE9BQU87Z0JBQ3BCSSxVQUFVQTtnQkFDVkMsTUFBTTtnQkFDTk0sTUFBTVg7WUFDUjtZQUVBLElBQUlHLFNBQVNRLElBQUksRUFBRTtnQkFDakJSLFNBQVNRLElBQUksQ0FBQ04sSUFBSSxHQUFHRjtZQUN2QixPQUFPO2dCQUNMSixRQUFRSTtZQUNWO1lBRUEsT0FBTyxTQUFTUztnQkFDZCxJQUFJLENBQUNGLGdCQUFnQlgsVUFBVSxNQUFNO2dCQUNyQ1csZUFBZTtnQkFFZixJQUFJUCxTQUFTRSxJQUFJLEVBQUU7b0JBQ2pCRixTQUFTRSxJQUFJLENBQUNNLElBQUksR0FBR1IsU0FBU1EsSUFBSTtnQkFDcEMsT0FBTztvQkFDTFgsT0FBT0csU0FBU1EsSUFBSTtnQkFDdEI7Z0JBRUEsSUFBSVIsU0FBU1EsSUFBSSxFQUFFO29CQUNqQlIsU0FBU1EsSUFBSSxDQUFDTixJQUFJLEdBQUdGLFNBQVNFLElBQUk7Z0JBQ3BDLE9BQU87b0JBQ0xOLFFBQVFJLFNBQVNFLElBQUk7Z0JBQ3ZCO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxJQUFJUSxnQkFBZ0I7SUFDbEJYLFFBQVEsU0FBU0EsVUFBVTtJQUMzQkksS0FBSyxTQUFTQTtRQUNaLE9BQU8sRUFBRTtJQUNYO0FBQ0Y7QUFDTyxTQUFTUSxtQkFBbUJDLEtBQUssRUFBRUMsU0FBUztJQUNqRCxJQUFJSjtJQUNKLElBQUlMLFlBQVlNO0lBRWhCLFNBQVNJLGFBQWFkLFFBQVE7UUFDNUJlO1FBQ0EsT0FBT1gsVUFBVUUsU0FBUyxDQUFDTjtJQUM3QjtJQUVBLFNBQVNnQjtRQUNQWixVQUFVTCxNQUFNO0lBQ2xCO0lBRUEsU0FBU2tCO1FBQ1AsSUFBSUMsYUFBYUMsYUFBYSxFQUFFO1lBQzlCRCxhQUFhQyxhQUFhO1FBQzVCO0lBQ0Y7SUFFQSxTQUFTWjtRQUNQLE9BQU9hLFFBQVFYO0lBQ2pCO0lBRUEsU0FBU007UUFDUCxJQUFJLENBQUNOLGFBQWE7WUFDaEJBLGNBQWNJLFlBQVlBLFVBQVVDLFlBQVksQ0FBQ0csdUJBQXVCTCxNQUFNTixTQUFTLENBQUNXO1lBQ3hGYixZQUFZVjtRQUNkO0lBQ0Y7SUFFQSxTQUFTMkI7UUFDUCxJQUFJWixhQUFhO1lBQ2ZBO1lBQ0FBLGNBQWNhO1lBQ2RsQixVQUFVTixLQUFLO1lBQ2ZNLFlBQVlNO1FBQ2Q7SUFDRjtJQUVBLElBQUlRLGVBQWU7UUFDakJKLGNBQWNBO1FBQ2RFLGtCQUFrQkE7UUFDbEJDLHFCQUFxQkE7UUFDckJWLGNBQWNBO1FBQ2RRLGNBQWNBO1FBQ2RNLGdCQUFnQkE7UUFDaEJFLGNBQWMsU0FBU0E7WUFDckIsT0FBT25CO1FBQ1Q7SUFDRjtJQUNBLE9BQU9jO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzP2I0NDIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICB2YXIgYmF0Y2ggPSBnZXRCYXRjaCgpO1xuICB2YXIgZmlyc3QgPSBudWxsO1xuICB2YXIgbGFzdCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcbiAgICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgdmFyIHVuc3Vic2NyaWJlO1xuICB2YXIgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcblxuICBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gbGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIGxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih1bnN1YnNjcmliZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUgPSBwYXJlbnRTdWIgPyBwYXJlbnRTdWIuYWRkTmVzdGVkU3ViKGhhbmRsZUNoYW5nZVdyYXBwZXIpIDogc3RvcmUuc3Vic2NyaWJlKGhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgbGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgdW5zdWJzY3JpYmUgPSB1bmRlZmluZWQ7XG4gICAgICBsaXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWI6IGFkZE5lc3RlZFN1YixcbiAgICBub3RpZnlOZXN0ZWRTdWJzOiBub3RpZnlOZXN0ZWRTdWJzLFxuICAgIGhhbmRsZUNoYW5nZVdyYXBwZXI6IGhhbmRsZUNoYW5nZVdyYXBwZXIsXG4gICAgaXNTdWJzY3JpYmVkOiBpc1N1YnNjcmliZWQsXG4gICAgdHJ5U3Vic2NyaWJlOiB0cnlTdWJzY3JpYmUsXG4gICAgdHJ5VW5zdWJzY3JpYmU6IHRyeVVuc3Vic2NyaWJlLFxuICAgIGdldExpc3RlbmVyczogZnVuY3Rpb24gZ2V0TGlzdGVuZXJzKCkge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9XG4gIH07XG4gIHJldHVybiBzdWJzY3JpcHRpb247XG59Il0sIm5hbWVzIjpbImdldEJhdGNoIiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiYmF0Y2giLCJmaXJzdCIsImxhc3QiLCJjbGVhciIsIm5vdGlmeSIsImxpc3RlbmVyIiwiY2FsbGJhY2siLCJuZXh0IiwiZ2V0IiwibGlzdGVuZXJzIiwicHVzaCIsInN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsInByZXYiLCJ1bnN1YnNjcmliZSIsIm51bGxMaXN0ZW5lcnMiLCJjcmVhdGVTdWJzY3JpcHRpb24iLCJzdG9yZSIsInBhcmVudFN1YiIsImFkZE5lc3RlZFN1YiIsInRyeVN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwic3Vic2NyaXB0aW9uIiwib25TdGF0ZUNoYW5nZSIsIkJvb2xlYW4iLCJ0cnlVbnN1YnNjcmliZSIsInVuZGVmaW5lZCIsImdldExpc3RlbmVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/Subscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/batch.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/batch.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBatch: () => (/* binding */ getBatch),\n/* harmony export */   setBatch: () => (/* binding */ setBatch)\n/* harmony export */ });\n// Default to a dummy \"batch\" implementation that just runs the callback\nfunction defaultNoopBatch(callback) {\n    callback();\n}\nvar batch = defaultNoopBatch; // Allow injecting another batching function later\nvar setBatch = function setBatch(newBatch) {\n    return batch = newBatch;\n}; // Supply a getter just to skip dealing with ESM bindings\nvar getBatch = function getBatch() {\n    return batch;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFBd0U7QUFDeEUsU0FBU0EsaUJBQWlCQyxRQUFRO0lBQ2hDQTtBQUNGO0FBRUEsSUFBSUMsUUFBUUYsa0JBQWtCLGtEQUFrRDtBQUV6RSxJQUFJRyxXQUFXLFNBQVNBLFNBQVNDLFFBQVE7SUFDOUMsT0FBT0YsUUFBUUU7QUFDakIsRUFBRSxDQUFDLHlEQUF5RDtBQUVyRCxJQUFJQyxXQUFXLFNBQVNBO0lBQzdCLE9BQU9IO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcnNvbmFsaXplZC1jb250ZW50LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcz9mZmE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07Il0sIm5hbWVzIjpbImRlZmF1bHROb29wQmF0Y2giLCJjYWxsYmFjayIsImJhdGNoIiwic2V0QmF0Y2giLCJuZXdCYXRjaCIsImdldEJhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/batch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/bindActionCreators.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/bindActionCreators.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ bindActionCreators)\n/* harmony export */ });\nfunction bindActionCreators(actionCreators, dispatch) {\n    var boundActionCreators = {};\n    var _loop = function _loop(key) {\n        var actionCreator = actionCreators[key];\n        if (typeof actionCreator === \"function\") {\n            boundActionCreators[key] = function() {\n                return dispatch(actionCreator.apply(void 0, arguments));\n            };\n        }\n    };\n    for(var key in actionCreators){\n        _loop(key);\n    }\n    return boundActionCreators;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmluZEFjdGlvbkNyZWF0b3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxTQUFTQSxtQkFBbUJDLGNBQWMsRUFBRUMsUUFBUTtJQUNqRSxJQUFJQyxzQkFBc0IsQ0FBQztJQUUzQixJQUFJQyxRQUFRLFNBQVNBLE1BQU1DLEdBQUc7UUFDNUIsSUFBSUMsZ0JBQWdCTCxjQUFjLENBQUNJLElBQUk7UUFFdkMsSUFBSSxPQUFPQyxrQkFBa0IsWUFBWTtZQUN2Q0gsbUJBQW1CLENBQUNFLElBQUksR0FBRztnQkFDekIsT0FBT0gsU0FBU0ksY0FBY0MsS0FBSyxDQUFDLEtBQUssR0FBR0M7WUFDOUM7UUFDRjtJQUNGO0lBRUEsSUFBSyxJQUFJSCxPQUFPSixlQUFnQjtRQUM5QkcsTUFBTUM7SUFDUjtJQUVBLE9BQU9GO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmluZEFjdGlvbkNyZWF0b3JzLmpzPzZhODYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgX2xvb3Aoa2V5KTtcbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufSJdLCJuYW1lcyI6WyJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImRpc3BhdGNoIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsIl9sb29wIiwia2V5IiwiYWN0aW9uQ3JlYXRvciIsImFwcGx5IiwiYXJndW1lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/bindActionCreators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/isPlainObject.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/isPlainObject.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ isPlainObject)\n/* harmony export */ });\n/**\r\n * @param {any} obj The object to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */ function isPlainObject(obj) {\n    if (typeof obj !== \"object\" || obj === null) return false;\n    var proto = Object.getPrototypeOf(obj);\n    if (proto === null) return true;\n    var baseProto = proto;\n    while(Object.getPrototypeOf(baseProto) !== null){\n        baseProto = Object.getPrototypeOf(baseProto);\n    }\n    return proto === baseProto;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvaXNQbGFpbk9iamVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7OztDQUdDLEdBQ2MsU0FBU0EsY0FBY0MsR0FBRztJQUN2QyxJQUFJLE9BQU9BLFFBQVEsWUFBWUEsUUFBUSxNQUFNLE9BQU87SUFDcEQsSUFBSUMsUUFBUUMsT0FBT0MsY0FBYyxDQUFDSDtJQUNsQyxJQUFJQyxVQUFVLE1BQU0sT0FBTztJQUMzQixJQUFJRyxZQUFZSDtJQUVoQixNQUFPQyxPQUFPQyxjQUFjLENBQUNDLGVBQWUsS0FBTTtRQUNoREEsWUFBWUYsT0FBT0MsY0FBYyxDQUFDQztJQUNwQztJQUVBLE9BQU9ILFVBQVVHO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyc29uYWxpemVkLWNvbnRlbnQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2lzUGxhaW5PYmplY3QuanM/ZGU3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG4gIGlmIChwcm90byA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gIHZhciBiYXNlUHJvdG8gPSBwcm90bztcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90bykgIT09IG51bGwpIHtcbiAgICBiYXNlUHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBwcm90byA9PT0gYmFzZVByb3RvO1xufSJdLCJuYW1lcyI6WyJpc1BsYWluT2JqZWN0Iiwib2JqIiwicHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImJhc2VQcm90byJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/isPlainObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/reactBatchedUpdates.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/reactBatchedUpdates.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unstable_batchedUpdates: () => (/* reexport safe */ react_dom__WEBPACK_IMPORTED_MODULE_0__.unstable_batchedUpdates)\n/* harmony export */ });\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable import/no-unresolved */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSx1Q0FBdUMsR0FDYSIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcnNvbmFsaXplZC1jb250ZW50LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzLmpzPzJlNTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L25vLXVucmVzb2x2ZWQgKi9cbmV4cG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIH0gZnJvbSAncmVhY3QtZG9tJzsiXSwibmFtZXMiOlsidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/reactBatchedUpdates.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/shallowEqual.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/shallowEqual.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ shallowEqual)\n/* harmony export */ });\nfunction is(x, y) {\n    if (x === y) {\n        return x !== 0 || y !== 0 || 1 / x === 1 / y;\n    } else {\n        return x !== x && y !== y;\n    }\n}\nfunction shallowEqual(objA, objB) {\n    if (is(objA, objB)) return true;\n    if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false;\n    }\n    var keysA = Object.keys(objA);\n    var keysB = Object.keys(objB);\n    if (keysA.length !== keysB.length) return false;\n    for(var i = 0; i < keysA.length; i++){\n        if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxHQUFHQyxDQUFDLEVBQUVDLENBQUM7SUFDZCxJQUFJRCxNQUFNQyxHQUFHO1FBQ1gsT0FBT0QsTUFBTSxLQUFLQyxNQUFNLEtBQUssSUFBSUQsTUFBTSxJQUFJQztJQUM3QyxPQUFPO1FBQ0wsT0FBT0QsTUFBTUEsS0FBS0MsTUFBTUE7SUFDMUI7QUFDRjtBQUVlLFNBQVNDLGFBQWFDLElBQUksRUFBRUMsSUFBSTtJQUM3QyxJQUFJTCxHQUFHSSxNQUFNQyxPQUFPLE9BQU87SUFFM0IsSUFBSSxPQUFPRCxTQUFTLFlBQVlBLFNBQVMsUUFBUSxPQUFPQyxTQUFTLFlBQVlBLFNBQVMsTUFBTTtRQUMxRixPQUFPO0lBQ1Q7SUFFQSxJQUFJQyxRQUFRQyxPQUFPQyxJQUFJLENBQUNKO0lBQ3hCLElBQUlLLFFBQVFGLE9BQU9DLElBQUksQ0FBQ0g7SUFDeEIsSUFBSUMsTUFBTUksTUFBTSxLQUFLRCxNQUFNQyxNQUFNLEVBQUUsT0FBTztJQUUxQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsTUFBTUksTUFBTSxFQUFFQyxJQUFLO1FBQ3JDLElBQUksQ0FBQ0osT0FBT0ssU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1QsTUFBTUMsS0FBSyxDQUFDSyxFQUFFLEtBQUssQ0FBQ1gsR0FBR0ksSUFBSSxDQUFDRSxLQUFLLENBQUNLLEVBQUUsQ0FBQyxFQUFFTixJQUFJLENBQUNDLEtBQUssQ0FBQ0ssRUFBRSxDQUFDLEdBQUc7WUFDaEcsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzPzBiODkiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iXSwibmFtZXMiOlsiaXMiLCJ4IiwieSIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJPYmplY3QiLCJrZXlzIiwia2V5c0IiLCJsZW5ndGgiLCJpIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/shallowEqual.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUQsQ0FBQyw2RUFBNkU7QUFDakksNkVBQTZFO0FBQzdFLDhFQUE4RTtBQUM5RSw4RUFBOEU7QUFDOUUsZ0ZBQWdGO0FBQ2hGLDZFQUE2RTtBQUM3RSwwRUFBMEU7QUFDMUUsb0VBQW9FO0FBRTdELElBQUlFLDRCQUE0QixNQUFvSCxHQUFjRCxDQUFlQSxHQUFHRCw0Q0FBU0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcnNvbmFsaXplZC1jb250ZW50LWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1iZWF1dGlmdWwtZG5kL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzPzYyMGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7Il0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/verifyPlainObject.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/verifyPlainObject.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ verifyPlainObject)\n/* harmony export */ });\n/* harmony import */ var _isPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isPlainObject */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/isPlainObject.js\");\n/* harmony import */ var _warning__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./warning */ \"(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/warning.js\");\n\n\nfunction verifyPlainObject(value, displayName, methodName) {\n    if (!(0,_isPlainObject__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(value)) {\n        (0,_warning__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(methodName + \"() in \" + displayName + \" must return a plain object. Instead received \" + value + \".\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRDO0FBQ1o7QUFDakIsU0FBU0Usa0JBQWtCQyxLQUFLLEVBQUVDLFdBQVcsRUFBRUMsVUFBVTtJQUN0RSxJQUFJLENBQUNMLDBEQUFhQSxDQUFDRyxRQUFRO1FBQ3pCRixvREFBT0EsQ0FBQ0ksYUFBYSxXQUFXRCxjQUFjLG1EQUFtREQsUUFBUTtJQUMzRztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyc29uYWxpemVkLWNvbnRlbnQtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWJlYXV0aWZ1bC1kbmQvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0LmpzPzc1ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnLi9pc1BsYWluT2JqZWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4vd2FybmluZyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2ZXJpZnlQbGFpbk9iamVjdCh2YWx1ZSwgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpIHtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgIHdhcm5pbmcobWV0aG9kTmFtZSArIFwiKCkgaW4gXCIgKyBkaXNwbGF5TmFtZSArIFwiIG11c3QgcmV0dXJuIGEgcGxhaW4gb2JqZWN0LiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgdmFsdWUgKyBcIi5cIik7XG4gIH1cbn0iXSwibmFtZXMiOlsiaXNQbGFpbk9iamVjdCIsIndhcm5pbmciLCJ2ZXJpZnlQbGFpbk9iamVjdCIsInZhbHVlIiwiZGlzcGxheU5hbWUiLCJtZXRob2ROYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/verifyPlainObject.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/warning.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/warning.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ warning)\n/* harmony export */ });\n/**\r\n * Prints a warning in the console if it exists.\r\n *\r\n * @param {String} message The warning message.\r\n * @returns {void}\r\n */ function warning(message) {\n    /* eslint-disable no-console */ if (typeof console !== \"undefined\" && typeof console.error === \"function\") {\n        console.error(message);\n    }\n    /* eslint-enable no-console */ try {\n        // This error was thrown as a convenience so that if you enable\n        // \"break on all exceptions\" in your console,\n        // it would pause the execution at this line.\n        throw new Error(message);\n    /* eslint-disable no-empty */ } catch (e) {}\n/* eslint-enable no-empty */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvd2FybmluZy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0NBS0MsR0FDYyxTQUFTQSxRQUFRQyxPQUFPO0lBQ3JDLDZCQUE2QixHQUM3QixJQUFJLE9BQU9DLFlBQVksZUFBZSxPQUFPQSxRQUFRQyxLQUFLLEtBQUssWUFBWTtRQUN6RUQsUUFBUUMsS0FBSyxDQUFDRjtJQUNoQjtJQUNBLDRCQUE0QixHQUc1QixJQUFJO1FBQ0YsK0RBQStEO1FBQy9ELDZDQUE2QztRQUM3Qyw2Q0FBNkM7UUFDN0MsTUFBTSxJQUFJRyxNQUFNSDtJQUNoQiwyQkFBMkIsR0FDN0IsRUFBRSxPQUFPSSxHQUFHLENBQUM7QUFDYiwwQkFBMEIsR0FFNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wZXJzb25hbGl6ZWQtY29udGVudC1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtYmVhdXRpZnVsLWRuZC9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvd2FybmluZy5qcz9lNWY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cclxuICogQHJldHVybnMge3ZvaWR9XHJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWVtcHR5ICovXG4gIH0gY2F0Y2ggKGUpIHt9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tZW1wdHkgKi9cblxufSJdLCJuYW1lcyI6WyJ3YXJuaW5nIiwibWVzc2FnZSIsImNvbnNvbGUiLCJlcnJvciIsIkVycm9yIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-beautiful-dnd/node_modules/react-redux/es/utils/warning.js\n");

/***/ })

};
;