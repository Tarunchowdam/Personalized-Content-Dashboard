"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchMovies: function() { return /* binding */ fetchMovies; },\n/* harmony export */   fetchNews: function() { return /* binding */ fetchNews; },\n/* harmony export */   fetchSocialPosts: function() { return /* binding */ fetchSocialPosts; },\n/* harmony export */   fetchTrending: function() { return /* binding */ fetchTrending; },\n/* harmony export */   searchContent: function() { return /* binding */ searchContent; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n\n// API Configuration\nconst NEWS_API_KEY = \"9e962a77757d47eaa4eec1376a248b60\" || 0;\nconst TMDB_API_KEY = \"2c30c9928b0430bf604c2c3682aafca7\" || 0;\n// News API\nconst fetchNews = async function() {\n    let categories = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n    try {\n        if (NEWS_API_KEY) {\n            // Use the first selected category or 'general' as fallback\n            const category = categories[0] || \"general\";\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://newsapi.org/v2/top-headlines\", {\n                params: {\n                    country: \"us\",\n                    category,\n                    apiKey: NEWS_API_KEY\n                }\n            });\n            // Map NewsAPI response to NewsArticle[]\n            return (response.data.articles || []).map((item, idx)=>{\n                var _item_source, _item_source1;\n                return {\n                    id: item.url || String(idx),\n                    title: item.title,\n                    description: item.description || \"\",\n                    content: item.content || \"\",\n                    url: item.url,\n                    urlToImage: item.urlToImage || \"\",\n                    publishedAt: item.publishedAt,\n                    source: {\n                        id: ((_item_source = item.source) === null || _item_source === void 0 ? void 0 : _item_source.id) || \"\",\n                        name: ((_item_source1 = item.source) === null || _item_source1 === void 0 ? void 0 : _item_source1.name) || \"\"\n                    },\n                    category,\n                    isFavorite: false\n                };\n            });\n        }\n        // Mock data fallback\n        const mockNews = [\n            {\n                id: \"1\",\n                title: \"Latest Technology Breakthroughs in 2024\",\n                description: \"Discover the most innovative technologies that are shaping the future.\",\n                content: \"The technology landscape is rapidly evolving with new breakthroughs in AI, quantum computing, and renewable energy...\",\n                url: \"https://example.com/tech-breakthroughs\",\n                urlToImage: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400\",\n                publishedAt: \"2024-01-15T10:00:00Z\",\n                source: {\n                    id: \"tech-news\",\n                    name: \"Tech News\"\n                },\n                category: \"technology\",\n                isFavorite: false\n            },\n            {\n                id: \"2\",\n                title: \"Sports: Championship Finals This Weekend\",\n                description: \"The biggest sports event of the year is just around the corner.\",\n                content: \"Fans around the world are eagerly anticipating this weekend's championship finals...\",\n                url: \"https://example.com/sports-finals\",\n                urlToImage: \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400\",\n                publishedAt: \"2024-01-14T15:30:00Z\",\n                source: {\n                    id: \"sports-news\",\n                    name: \"Sports Central\"\n                },\n                category: \"sports\",\n                isFavorite: false\n            },\n            {\n                id: \"3\",\n                title: \"Financial Markets: New Investment Opportunities\",\n                description: \"Expert analysis on emerging investment trends and market opportunities.\",\n                content: \"The financial markets are presenting unique opportunities for investors...\",\n                url: \"https://example.com/finance-opportunities\",\n                urlToImage: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400\",\n                publishedAt: \"2024-01-13T09:15:00Z\",\n                source: {\n                    id: \"finance-news\",\n                    name: \"Financial Times\"\n                },\n                category: \"finance\",\n                isFavorite: false\n            },\n            {\n                id: \"4\",\n                title: \"Health: New Breakthrough in Cancer Research\",\n                description: \"Scientists have made a significant discovery in the fight against cancer.\",\n                content: \"A new treatment shows promise in early trials, offering hope to millions...\",\n                url: \"https://example.com/health-cancer-research\",\n                urlToImage: \"https://images.unsplash.com/photo-1506744038136-46273834b3fb?w=400\",\n                publishedAt: \"2024-01-12T11:00:00Z\",\n                source: {\n                    id: \"health-news\",\n                    name: \"Health Daily\"\n                },\n                category: \"health\",\n                isFavorite: false\n            },\n            {\n                id: \"5\",\n                title: \"Science: Mars Rover Sends New Images\",\n                description: \"Stunning new images from the surface of Mars have been released.\",\n                content: \"The Mars rover continues its mission, sending back valuable data and breathtaking photos...\",\n                url: \"https://example.com/science-mars-rover\",\n                urlToImage: \"https://images.unsplash.com/photo-1465101046530-73398c7f28ca?w=400\",\n                publishedAt: \"2024-01-11T13:45:00Z\",\n                source: {\n                    id: \"science-news\",\n                    name: \"Science World\"\n                },\n                category: \"science\",\n                isFavorite: false\n            },\n            {\n                id: \"6\",\n                title: \"Business: Startups to Watch in 2024\",\n                description: \"A look at the most promising startups making waves this year.\",\n                content: \"From fintech to healthtech, these startups are set to disrupt their industries...\",\n                url: \"https://example.com/business-startups-2024\",\n                urlToImage: \"https://images.unsplash.com/photo-1461749280684-dccba630e2f6?w=400\",\n                publishedAt: \"2024-01-10T16:20:00Z\",\n                source: {\n                    id: \"business-news\",\n                    name: \"Business Insider\"\n                },\n                category: \"business\",\n                isFavorite: false\n            },\n            {\n                id: \"7\",\n                title: \"World: Global Leaders Meet for Climate Summit\",\n                description: \"World leaders gather to discuss urgent climate action.\",\n                content: \"The summit aims to set new targets for reducing emissions and promoting sustainability...\",\n                url: \"https://example.com/world-climate-summit\",\n                urlToImage: \"https://images.unsplash.com/photo-1502082553048-f009c37129b9?w=400\",\n                publishedAt: \"2024-01-09T18:10:00Z\",\n                source: {\n                    id: \"world-news\",\n                    name: \"Global News\"\n                },\n                category: \"world\",\n                isFavorite: false\n            }\n        ];\n        return mockNews.filter((news)=>categories.length === 0 || categories.includes(news.category));\n    } catch (error) {\n        console.error(\"Error fetching news:\", error);\n        throw new Error(\"Failed to fetch news\");\n    }\n};\n// Movies API (TMDB)\nconst fetchMovies = async function() {\n    let categories = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n    try {\n        if (TMDB_API_KEY) {\n            // Fetch popular movies from TMDB\n            const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(\"https://api.themoviedb.org/3/movie/popular\", {\n                params: {\n                    api_key: TMDB_API_KEY,\n                    language: \"en-US\",\n                    page: 1\n                }\n            });\n            // Map TMDB response to MovieRecommendation[]\n            return (response.data.results || []).map((item)=>({\n                    id: String(item.id),\n                    title: item.title,\n                    overview: item.overview,\n                    poster_path: item.poster_path ? \"https://image.tmdb.org/t/p/w400\".concat(item.poster_path) : \"\",\n                    release_date: item.release_date,\n                    vote_average: item.vote_average,\n                    genre_ids: item.genre_ids,\n                    category: \"entertainment\",\n                    isFavorite: false\n                }));\n        }\n        // Mock data fallback\n        const mockMovies = [\n            {\n                id: \"1\",\n                title: \"The Future of Cinema\",\n                overview: \"A groundbreaking film that explores the intersection of technology and storytelling.\",\n                poster_path: \"https://images.unsplash.com/photo-1489599849927-2ee91cede3ba?w=400\",\n                release_date: \"2024-01-20\",\n                vote_average: 8.5,\n                genre_ids: [\n                    28,\n                    12,\n                    878\n                ],\n                category: \"entertainment\",\n                isFavorite: false\n            },\n            {\n                id: \"2\",\n                title: \"Adventure Quest\",\n                overview: \"An epic adventure that takes viewers on a journey through uncharted territories.\",\n                poster_path: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400\",\n                release_date: \"2024-01-25\",\n                vote_average: 7.8,\n                genre_ids: [\n                    12,\n                    14,\n                    28\n                ],\n                category: \"adventure\",\n                isFavorite: false\n            },\n            {\n                id: \"3\",\n                title: \"Mystery Manor\",\n                overview: \"A psychological thriller that keeps audiences guessing until the very end.\",\n                poster_path: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400\",\n                release_date: \"2024-01-30\",\n                vote_average: 8.2,\n                genre_ids: [\n                    53,\n                    27,\n                    9648\n                ],\n                category: \"thriller\",\n                isFavorite: false\n            },\n            {\n                id: \"4\",\n                title: \"Comedy Nights\",\n                overview: \"A hilarious comedy that will leave you in stitches.\",\n                poster_path: \"https://images.unsplash.com/photo-1465101178521-c1a9136a3c5c?w=400\",\n                release_date: \"2024-02-05\",\n                vote_average: 7.5,\n                genre_ids: [\n                    35\n                ],\n                category: \"entertainment\",\n                isFavorite: false\n            },\n            {\n                id: \"5\",\n                title: \"Science Unveiled\",\n                overview: \"A documentary exploring the wonders of modern science.\",\n                poster_path: \"https://images.unsplash.com/photo-1462331940025-496dfbfc7564?w=400\",\n                release_date: \"2024-02-10\",\n                vote_average: 8.7,\n                genre_ids: [\n                    99\n                ],\n                category: \"science\",\n                isFavorite: false\n            },\n            {\n                id: \"6\",\n                title: \"Startup Stories\",\n                overview: \"Inspiring tales from the world of startups and entrepreneurship.\",\n                poster_path: \"https://images.unsplash.com/photo-1461749280684-dccba630e2f6?w=400\",\n                release_date: \"2024-02-15\",\n                vote_average: 8.0,\n                genre_ids: [\n                    18\n                ],\n                category: \"business\",\n                isFavorite: false\n            }\n        ];\n        return mockMovies.filter((movie)=>categories.length === 0 || categories.includes(movie.category));\n    } catch (error) {\n        console.error(\"Error fetching movies:\", error);\n        throw new Error(\"Failed to fetch movies\");\n    }\n};\n// Social Posts API (Mock)\nconst fetchSocialPosts = async function() {\n    let categories = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n    try {\n        // Mock data for demonstration\n        const mockSocialPosts = [\n            {\n                id: \"1\",\n                content: \"Just discovered an amazing new tech startup! The innovation is incredible. #TechNews #Innovation\",\n                author: {\n                    name: \"Sarah Johnson\",\n                    avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100\",\n                    handle: \"@sarah_tech\"\n                },\n                timestamp: \"2024-01-15T08:30:00Z\",\n                likes: 245,\n                shares: 67,\n                hashtags: [\n                    \"#TechNews\",\n                    \"#Innovation\",\n                    \"#Startup\"\n                ],\n                category: \"technology\",\n                isFavorite: false\n            },\n            {\n                id: \"2\",\n                content: \"What a game! The energy in the stadium was electric tonight. #Sports #Championship\",\n                author: {\n                    name: \"Mike Chen\",\n                    avatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100\",\n                    handle: \"@mike_sports\"\n                },\n                timestamp: \"2024-01-14T22:15:00Z\",\n                likes: 189,\n                shares: 34,\n                hashtags: [\n                    \"#Sports\",\n                    \"#Championship\",\n                    \"#GameDay\"\n                ],\n                category: \"sports\",\n                isFavorite: false\n            },\n            {\n                id: \"3\",\n                content: \"Market analysis: The tech sector is showing strong growth potential. #Finance #Investing\",\n                author: {\n                    name: \"Emma Davis\",\n                    avatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100\",\n                    handle: \"@emma_finance\"\n                },\n                timestamp: \"2024-01-13T14:45:00Z\",\n                likes: 156,\n                shares: 89,\n                hashtags: [\n                    \"#Finance\",\n                    \"#Investing\",\n                    \"#TechStocks\"\n                ],\n                category: \"finance\",\n                isFavorite: false\n            },\n            {\n                id: \"4\",\n                content: \"Excited to attend the Global Climate Summit. Important discussions ahead! #ClimateAction #World\",\n                author: {\n                    name: \"Liam Smith\",\n                    avatar: \"https://images.unsplash.com/photo-1511367461989-f85a21fda167?w=100\",\n                    handle: \"@liam_world\"\n                },\n                timestamp: \"2024-01-12T19:00:00Z\",\n                likes: 210,\n                shares: 55,\n                hashtags: [\n                    \"#ClimateAction\",\n                    \"#World\",\n                    \"#Summit\"\n                ],\n                category: \"world\",\n                isFavorite: false\n            },\n            {\n                id: \"5\",\n                content: \"Breakthrough in cancer research gives hope to millions. #Health #Research\",\n                author: {\n                    name: \"Olivia Brown\",\n                    avatar: \"https://images.unsplash.com/photo-1517841905240-472988babdf9?w=100\",\n                    handle: \"@olivia_health\"\n                },\n                timestamp: \"2024-01-11T10:30:00Z\",\n                likes: 175,\n                shares: 40,\n                hashtags: [\n                    \"#Health\",\n                    \"#Research\",\n                    \"#Hope\"\n                ],\n                category: \"health\",\n                isFavorite: false\n            }\n        ];\n        return mockSocialPosts.filter((post)=>categories.length === 0 || categories.includes(post.category));\n    } catch (error) {\n        console.error(\"Error fetching social posts:\", error);\n        return [];\n    }\n};\n// Search API\nconst searchContent = async (query)=>{\n    try {\n        // Mock search implementation\n        const allNews = await fetchNews();\n        const allMovies = await fetchMovies();\n        const allSocial = await fetchSocialPosts();\n        const searchResults = {\n            news: allNews.filter((news)=>news.title.toLowerCase().includes(query.toLowerCase()) || news.description.toLowerCase().includes(query.toLowerCase())),\n            movies: allMovies.filter((movie)=>movie.title.toLowerCase().includes(query.toLowerCase()) || movie.overview.toLowerCase().includes(query.toLowerCase())),\n            social: allSocial.filter((post)=>post.content.toLowerCase().includes(query.toLowerCase()) || post.author.name.toLowerCase().includes(query.toLowerCase()))\n        };\n        return searchResults;\n    } catch (error) {\n        console.error(\"Error searching content:\", error);\n        return {\n            news: [],\n            movies: [],\n            social: []\n        };\n    }\n};\n// Helper to shuffle and pick top N trending items\nfunction pickTrending(arr, n, type) {\n    return arr.sort(()=>0.5 - Math.random()).slice(0, n).map((item, idx)=>{\n        var _item_content;\n        return {\n            id: \"\".concat(type, \"-\").concat(item.id),\n            title: item.title || ((_item_content = item.content) === null || _item_content === void 0 ? void 0 : _item_content.slice(0, 40)) || \"\",\n            category: item.category,\n            count: Math.floor(Math.random() * 1000) + 100,\n            type,\n            url: type === \"news\" ? item.url : type === \"movie\" ? \"https://www.themoviedb.org/movie/\".concat(item.id) : type === \"social\" ? undefined : undefined,\n            poster_path: type === \"movie\" ? item.poster_path : undefined\n        };\n    });\n}\nconst fetchTrending = async ()=>{\n    try {\n        // Gather all mock data\n        const news = await fetchNews();\n        const movies = await fetchMovies();\n        const social = await fetchSocialPosts();\n        const trending = [\n            ...pickTrending(news, 2, \"news\"),\n            ...pickTrending(movies, 1, \"movie\"),\n            ...pickTrending(social, 1, \"social\")\n        ];\n        // Shuffle trending\n        return trending.sort(()=>0.5 - Math.random());\n    } catch (error) {\n        console.error(\"Error fetching trending:\", error);\n        return [];\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});